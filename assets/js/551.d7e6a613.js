(window.webpackJsonp=window.webpackJsonp||[]).push([[551],{972:function(t,e,a){"use strict";a.r(e);var s=a(1),n=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"kubernetes-核心概念、架构及原理分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-核心概念、架构及原理分析","aria-hidden":"true"}},[t._v("#")]),t._v(" Kubernetes 核心概念、架构及原理分析")]),t._v(" "),a("h2",{attrs:{id:"kubernetes总体架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes总体架构","aria-hidden":"true"}},[t._v("#")]),t._v(" Kubernetes总体架构")]),t._v(" "),a("h3",{attrs:{id:"master和node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master和node","aria-hidden":"true"}},[t._v("#")]),t._v(" Master和Node")]),t._v(" "),a("p",[t._v("Kubernetes将集群中的机器划分为一个Master节点和一群工作节点（Node）。其中，Master节点上运行着集群管理相关的一组进程etcd、API Server、Controller Manager、Scheduler，后三个组件构成了Kubernetes的总控中心，这些进程实现了整个集群的资源管理、Pod调度、弹性伸缩、安全控制、系统监控和纠错等管理功能，并且全都是自动完成。在每个Node上运行Kubelet、Proxy、Docker daemon三个组件，负责对本节点上的Pod的生命周期进行管理，以及实现服务代理的功能。")]),t._v(" "),a("h3",{attrs:{id:"etcd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etcd","aria-hidden":"true"}},[t._v("#")]),t._v(" etcd")]),t._v(" "),a("p",[t._v("用于持久化存储集群中所有的资源对象，如Node、Service、Pod、RC、Namespace等；API Server提供了操作etcd的封装接口API，这些API基本上都是集群中资源对象的增删改查及监听资源变化的接口。")]),t._v(" "),a("h3",{attrs:{id:"api-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-server","aria-hidden":"true"}},[t._v("#")]),t._v(" API Server")]),t._v(" "),a("p",[t._v("提供了资源对象的唯一操作入口，其他所有组件都必须通过它提供的API来操作资源数据，通过对相关的资源数据“全量查询”+“变化监听”，这些组件可以很“实时”地完成相关的业务功能。")]),t._v(" "),a("p",[t._v("API Server内部有一套完备的安全机制，包括认证、授权和准入控制等相关模块")]),t._v(" "),a("h3",{attrs:{id:"controller-manager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#controller-manager","aria-hidden":"true"}},[t._v("#")]),t._v(" Controller Manager")]),t._v(" "),a("p",[t._v("集群内部的管理控制中心，其主要目的是实现Kubernetes集群的故障检测和恢复的自动化工作，比如根据RC的定义完成Pod的复制或移除，以确保Pod实例数符合RC副本的定义；根据Service与Pod的管理关系，完成服务的Endpoints对象的创建和更新；其他诸如Node的发现、管理和状态监控、死亡容器所占磁盘空间及本地缓存的镜像文件的清理等工作也是由Controller Manager完成的。")]),t._v(" "),a("h3",{attrs:{id:"scheduler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scheduler","aria-hidden":"true"}},[t._v("#")]),t._v(" Scheduler")]),t._v(" "),a("p",[t._v("集群中的调度器，负责Pod在集群节点中的调度分配。")]),t._v(" "),a("h3",{attrs:{id:"kubelet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubelet","aria-hidden":"true"}},[t._v("#")]),t._v(" Kubelet")]),t._v(" "),a("p",[t._v("负责本Node节点上的Pod的创建、修改、监控、删除等全生命周期管理，同时Kubelet定时“上报”本Node的状态信息到API Server里。")]),t._v(" "),a("h3",{attrs:{id:"proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy","aria-hidden":"true"}},[t._v("#")]),t._v(" Proxy")]),t._v(" "),a("p",[t._v("实现了Service的代理与软件模式的负载均衡器。")]),t._v(" "),a("p",[t._v("客户端通过Kubectl命令行工具或Kubectl Proxy来访问Kubernetes系统，在Kubernetes集群内部的客户端可以直接使用Kuberctl命令管理集群。Kubectl Proxy是API Server的一个反向代理，在Kubernetes集群外部的客户端可以通过Kubernetes Proxy来访问API Server。")]),t._v(" "),a("h2",{attrs:{id:"资源对象与基本概念解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源对象与基本概念解析","aria-hidden":"true"}},[t._v("#")]),t._v(" 资源对象与基本概念解析")]),t._v(" "),a("p",[t._v("以下列举的内容都是 kubernetes 中的 Object，这些对象都可以在 yaml 文件中作为一种 API 类型来配置。")]),t._v(" "),a("ul",[a("li",[t._v("Pod")]),t._v(" "),a("li",[t._v("Node")]),t._v(" "),a("li",[t._v("Namespace")]),t._v(" "),a("li",[t._v("Service")]),t._v(" "),a("li",[t._v("Volume")]),t._v(" "),a("li",[t._v("PersistentVolume")]),t._v(" "),a("li",[t._v("Deployment")]),t._v(" "),a("li",[t._v("Secret")]),t._v(" "),a("li",[t._v("StatefulSet")]),t._v(" "),a("li",[t._v("DaemonSet")]),t._v(" "),a("li",[t._v("ServiceAccount")]),t._v(" "),a("li",[t._v("ReplicationController")]),t._v(" "),a("li",[t._v("ReplicaSet")]),t._v(" "),a("li",[t._v("Job")]),t._v(" "),a("li",[t._v("CronJob")]),t._v(" "),a("li",[t._v("SecurityContext")]),t._v(" "),a("li",[t._v("ResourceQuota")]),t._v(" "),a("li",[t._v("LimitRange")]),t._v(" "),a("li",[t._v("HorizontalPodAutoscaling")]),t._v(" "),a("li",[t._v("Ingress")]),t._v(" "),a("li",[t._v("ConfigMap")]),t._v(" "),a("li",[t._v("Label")]),t._v(" "),a("li",[t._v("CustomResourceDefinition")]),t._v(" "),a("li",[t._v("Role")]),t._v(" "),a("li",[t._v("ClusterRole")])]),t._v(" "),a("p",[t._v("我将它们简单的分类为以下几种资源对象：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("类别")]),t._v(" "),a("th",[t._v("名称")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("资源对象")]),t._v(" "),a("td",[t._v("Pod、ReplicaSet、ReplicationController、Deployment、StatefulSet、DaemonSet、Job、CronJob、HorizontalPodAutoscaling、Node、Namespace、Service、Ingress、Label、CustomResourceDefinition")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("存储对象")]),t._v(" "),a("td",[t._v("Volume、PersistentVolume、Secret、ConfigMap")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("策略对象")]),t._v(" "),a("td",[t._v("SecurityContext、ResourceQuota、LimitRange")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("身份对象")]),t._v(" "),a("td",[t._v("ServiceAccount、Role、ClusterRole")])])])]),t._v(" "),a("h3",{attrs:{id:"理解-kubernetes-中的对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解-kubernetes-中的对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 理解 kubernetes 中的对象")]),t._v(" "),a("p",[t._v("在 Kubernetes 系统中，"),a("em",[t._v("Kubernetes 对象")]),t._v(" 是持久化的条目。Kubernetes 使用这些条目去表示整个集群的状态。特别地，它们描述了如下信息：")]),t._v(" "),a("ul",[a("li",[t._v("什么容器化应用在运行（以及在哪个 Node 上）")]),t._v(" "),a("li",[t._v("可以被应用使用的资源")]),t._v(" "),a("li",[t._v("关于应用如何表现的策略，比如重启策略、升级策略，以及容错策略")])]),t._v(" "),a("p",[t._v("Kubernetes 对象是 “目标性记录” —— 一旦创建对象，Kubernetes 系统将持续工作以确保对象存在。通过创建对象，可以有效地告知 Kubernetes 系统，所需要的集群工作负载看起来是什么样子的，这就是 Kubernetes 集群的 "),a("strong",[t._v("期望状态")]),t._v("。")]),t._v(" "),a("p",[t._v("与 Kubernetes 对象工作 —— 是否创建、修改，或者删除 —— 需要使用 "),a("a",{attrs:{href:"https://git.k8s.io/community/contributors/devel/api-conventions.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes API"),a("OutboundLink")],1),t._v("。当使用 "),a("code",[t._v("kubectl")]),t._v(" 命令行接口时，比如，CLI 会使用必要的 Kubernetes API 调用，也可以在程序中直接使用 Kubernetes API。为了实现该目标，Kubernetes 当前提供了一个 "),a("code",[t._v("golang")]),t._v(" "),a("a",{attrs:{href:"https://github.com/kubernetes/client-go",target:"_blank",rel:"noopener noreferrer"}},[t._v("客户端库"),a("OutboundLink")],1),t._v(" ，其它语言库（例如"),a("a",{attrs:{href:"https://github.com/kubernetes-incubator/client-python",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python"),a("OutboundLink")],1),t._v("）也正在开发中。")]),t._v(" "),a("h3",{attrs:{id:"对象-spec-与状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象-spec-与状态","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象 Spec 与状态")]),t._v(" "),a("p",[t._v("每个 Kubernetes 对象包含两个嵌套的对象字段，它们负责管理对象的配置：对象 "),a("em",[t._v("spec")]),t._v(" 和 对象 "),a("em",[t._v("status")]),t._v("。"),a("em",[t._v("spec")]),t._v(" 必须提供，它描述了对象的 "),a("em",[t._v("期望状态")]),t._v("—— 希望对象所具有的特征。"),a("em",[t._v("status")]),t._v(" 描述了对象的 "),a("em",[t._v("实际状态")]),t._v("，它是由 Kubernetes 系统提供和更新。在任何时刻，Kubernetes 控制平面一直处于活跃状态，管理着对象的实际状态以与我们所期望的状态相匹配。")]),t._v(" "),a("p",[t._v("例如，Kubernetes Deployment 对象能够表示运行在集群中的应用。当创建 Deployment 时，可能需要设置 Deployment 的 spec，以指定该应用需要有 3 个副本在运行。Kubernetes 系统读取 Deployment spec，启动我们所期望的该应用的 3 个实例 —— 更新状态以与 spec 相匹配。如果那些实例中有失败的（一种状态变更），Kubernetes 系统通过修正来响应 spec 和状态之间的不一致 —— 这种情况，启动一个新的实例来替换。")]),t._v(" "),a("p",[t._v("关于对象 spec、status 和 metadata 更多信息，查看 "),a("a",{attrs:{href:"https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes API Conventions"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"描述-kubernetes-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述-kubernetes-对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 描述 Kubernetes 对象")]),t._v(" "),a("p",[t._v("当创建 Kubernetes 对象时，必须提供对象的 spec，用来描述该对象的期望状态，以及关于对象的一些基本信息（例如，名称）。当使用 Kubernetes API 创建对象时（或者直接创建，或者基于"),a("code",[t._v("kubectl")]),t._v("），API 请求必须在请求体中包含 JSON 格式的信息。"),a("strong",[t._v("更常用的是，需要在 .yaml 文件中为 kubectl 提供这些信息")]),t._v("。 "),a("code",[t._v("kubectl")]),t._v(" 在执行 API 请求时，将这些信息转换成 JSON 格式。")]),t._v(" "),a("p",[t._v("这里有一个 "),a("code",[t._v("nginx-deployment.yaml")]),t._v(" 示例文件，展示了 Kubernetes Deployment 的必需字段和对象 spec：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Deployment\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("deployment\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("replicas")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("1.7.9\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containerPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n")])])]),a("p",[t._v("一种创建 Deployment 的方式，类似上面使用 "),a("code",[t._v(".yaml")]),t._v(" 文件，是使用 "),a("code",[t._v("kubectl")]),t._v(" 命令行接口（CLI）中的 "),a("code",[t._v("kubectl create")]),t._v(" 命令，传递 "),a("code",[t._v(".yaml")]),t._v(" 作为参数。下面是一个示例：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl create -f nginx-deployment.yaml --record\ndeployment "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx-deployment"')]),t._v(" created\n")])])]),a("h3",{attrs:{id:"必需字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#必需字段","aria-hidden":"true"}},[t._v("#")]),t._v(" 必需字段")]),t._v(" "),a("p",[t._v("在想要创建的 Kubernetes 对象对应的 "),a("code",[t._v(".yaml")]),t._v(" 文件中，需要配置如下的字段：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("apiVersion")]),t._v(" - 创建该对象所使用的 Kubernetes API 的版本")]),t._v(" "),a("li",[a("code",[t._v("kind")]),t._v(" - 想要创建的对象的类型")]),t._v(" "),a("li",[a("code",[t._v("metadata")]),t._v(" - 帮助识别对象唯一性的数据，包括一个 "),a("code",[t._v("name")]),t._v(" 字符串、UID 和可选的 "),a("code",[t._v("namespace")])])]),t._v(" "),a("p",[t._v("也需要提供对象的 "),a("code",[t._v("spec")]),t._v(" 字段。对象 "),a("code",[t._v("spec")]),t._v(" 的精确格式对每个 Kubernetes 对象来说是不同的，包含了特定于该对象的嵌套字段。"),a("a",{attrs:{href:"https://kubernetes.io/docs/api/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes API 参考"),a("OutboundLink")],1),t._v("能够帮助我们找到任何我们想创建的对象的 spec 格式。")]),t._v(" "),a("h2",{attrs:{id:"kubernetes-cluster"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-cluster","aria-hidden":"true"}},[t._v("#")]),t._v(" Kubernetes Cluster")]),t._v(" "),a("p",[t._v("Kubernetes将底层的计算资源连接在一起对外体现为一个计算集群，并将资源高度抽象化。部署应用时Kubernetes会以更高效的方式自动的将应用分发到集群内的机器上面，并调度运行。几个Kubernetes集群包含两种类型的资源：")]),t._v(" "),a("ul",[a("li",[t._v("Master节点：协调控制整个集群。")]),t._v(" "),a("li",[t._v("Nodes节点：运行应用的工作节点。")])]),t._v(" "),a("imgLink",{attrs:{src:"date/20190324/001.svg"}}),t._v(" "),a("p",[a("strong",[t._v("Master")]),t._v(" 负责管理集群。 master 协调集群中的所有活动，例如调度应用程序、维护应用程序的所需状态、扩展应用程序和滚动更新。")]),t._v(" "),a("p",[a("strong",[t._v("Node")]),t._v(" 是 Kubernetes 集群中的工作机器，可以是物理机或虚拟机。 每个工作节点都有一个 Kubelet，它是管理 节点 并与 Kubernetes Master 节点进行通信的代理。节点 上还应具有处理容器操作的工作，例如 Docker 或 rkt。一个 Kubernetes 工作集群至少有三个节点。")]),t._v(" "),a("p",[t._v("当部署应用的时候，我们通知Master节点启动应用容器。然后Master会调度这些应用将它们运行在Node节点上面。Node节点和Master节点通过Master节点暴露的Kubernetes API通信。当然我们也可以直接通过这些API和集群交互。")]),t._v(" "),a("h2",{attrs:{id:"节点-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点-node","aria-hidden":"true"}},[t._v("#")]),t._v(" 节点 (Node)")]),t._v(" "),a("p",[t._v("Node是kubernetes集群的工作节点，可以是物理机也可以是虚拟机。")]),t._v(" "),a("p",[t._v("Kubernetes集群中的计算能力由Node提供，最初Node称为服务节点Minion，后来改名为Node。Kubernetes集群中的Node也就等同于Mesos集群中的Slave节点，是所有Pod运行所在的工作主机，可以是物理机也可以是虚拟机。不论是物理机还是虚拟机，工作主机的统一特征是上面要运行kubelet管理节点上运行的容器。")]),t._v(" "),a("h3",{attrs:{id:"node状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node状态","aria-hidden":"true"}},[t._v("#")]),t._v(" Node状态")]),t._v(" "),a("p",[t._v("Node包括如下状态信息：")]),t._v(" "),a("p",[t._v("Node作为集群中的工作节点，运行真正的应用程序，在Node上Kubernetes管理的最小运行单元是Pod。Node上运行着Kubernetes的Kubelet、kube-proxy服务进程，这些服务进程负责Pod的创建、启动、监控、重启、销毁、以及实现软件模式的负载均衡。")]),t._v(" "),a("p",[t._v("Node包含的信息：")]),t._v(" "),a("ul",[a("li",[t._v("Node地址 (Address)：主机的IP地址，或Node ID\n"),a("ul",[a("li",[t._v("HostName：可以被kubelet中的"),a("code",[t._v("--hostname-override")]),t._v("参数替代。")]),t._v(" "),a("li",[t._v("ExternalIP：可以被集群外部路由到的IP地址。")]),t._v(" "),a("li",[t._v("InternalIP：集群内部使用的IP，集群外部无法访问。")])])]),t._v(" "),a("li",[t._v("Condition\n"),a("ul",[a("li",[t._v("OutOfDisk：磁盘空间不足时为"),a("code",[t._v("True")])]),t._v(" "),a("li",[t._v("Ready：Node controller 40秒内没有收到node的状态报告为"),a("code",[t._v("Unknown")]),t._v("，健康为"),a("code",[t._v("True")]),t._v("，否则为"),a("code",[t._v("False")]),t._v("。")]),t._v(" "),a("li",[t._v("MemoryPressure：当node有内存压力时为"),a("code",[t._v("True")]),t._v("，否则为"),a("code",[t._v("False")]),t._v("。")]),t._v(" "),a("li",[t._v("DiskPressure：当node有磁盘压力时为"),a("code",[t._v("True")]),t._v("，否则为"),a("code",[t._v("False")]),t._v("。")])])]),t._v(" "),a("li",[t._v("Node系统容量 (Capacity)：描述Node可用的系统资源，包括CPU、内存、最大可调度Pod数量等")]),t._v(" "),a("li",[t._v("Node的运行状态 (Status)：Pending、Running、Terminated三种状态")]),t._v(" "),a("li",[t._v("Info：节点的一些版本信息，如OS、kubernetes、docker等")]),t._v(" "),a("li",[t._v("其他：内核版本号、Kubernetes版本等。")])]),t._v(" "),a("h3",{attrs:{id:"node管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node管理","aria-hidden":"true"}},[t._v("#")]),t._v(" Node管理")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl get nodes "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取所有节点")]),t._v("\n$ kubectl describe node "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看Node信息")]),t._v("\n$ kubectl cordon "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 禁止pod调度到该节点上")]),t._v("\n$ kubectl drain "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 驱逐该节点上的所有pod")]),t._v("\n")])])]),a("p",[a("code",[t._v("drain")]),t._v(" 命令会删除该节点上的所有Pod（DaemonSet除外），在其他node上重新启动它们，通常该节点需要维护时使用该命令。直接使用该命令会自动调用"),a("code",[t._v("kubectl cordon <node>")]),t._v("命令。当该节点维护完成，启动了kubelet后，再使用"),a("code",[t._v("kubectl uncordon <node>")]),t._v("即可将该节点添加到kubernetes集群中。")]),t._v(" "),a("h2",{attrs:{id:"命名空间-namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名空间-namespace","aria-hidden":"true"}},[t._v("#")]),t._v(" 命名空间 (Namespace)")]),t._v(" "),a("p",[t._v("命名空间为Kubernetes集群提供虚拟的隔离作用，Kubernetes集群初始有两个命名空间，分别是默认命名空间default和系统命名空间kube-system，除此以外，管理员可以可以创建新的命名空间满足需要。")]),t._v(" "),a("p",[t._v("在一个Kubernetes集群中可以使用namespace创建多个“虚拟集群”，这些namespace之间可以完全隔离，也可以通过某种方式，让一个namespace中的service可以访问到其他的namespace中的服务，这需要通过RBAC定义集群级别的角色来实现。")]),t._v(" "),a("p",[t._v("Kubernetes集群在启动后，如果不特别指明Namespace，则用户创建的Pod、RC、Service都被系统创建到 default 的Namespace中。")]),t._v(" "),a("p",[a("strong",[t._v("哪些情况下适合使用多个 namespace ?")])]),t._v(" "),a("p",[t._v("因为namespace可以提供独立的命名空间，因此可以实现部分的环境隔离。当你的项目和人员众多的时候可以考虑根据项目属性，例如生产、测试、开发划分不同的namespace。")]),t._v(" "),a("h3",{attrs:{id:"获取集群中的所有-namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取集群中的所有-namespace","aria-hidden":"true"}},[t._v("#")]),t._v(" 获取集群中的所有 Namespace")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl get namespaces\n$ kubectl get ns\n")])])]),a("p",[t._v("集群中默认会有"),a("code",[t._v("default")]),t._v("和"),a("code",[t._v("kube-system")]),t._v("这两个namespace。")]),t._v(" "),a("p",[t._v("在执行"),a("code",[t._v("kubectl")]),t._v("命令时可以使用"),a("code",[t._v("-n")]),t._v("指定操作的namespace。")]),t._v(" "),a("p",[t._v("用户的普通应用默认是在"),a("code",[t._v("default")]),t._v("下，与集群管理相关的为整个集群提供服务的应用一般部署在"),a("code",[t._v("kube-system")]),t._v("的namespace下，例如我们在安装kubernetes集群时部署的"),a("code",[t._v("kubedns")]),t._v("、"),a("code",[t._v("heapseter")]),t._v("、"),a("code",[t._v("EFK")]),t._v("等都是在这个namespace下面。")]),t._v(" "),a("p",[t._v("另外，并不是所有的资源对象都会对应namespace，"),a("code",[t._v("node")]),t._v("和"),a("code",[t._v("persistentVolume")]),t._v("就不属于任何namespace。")]),t._v(" "),a("h3",{attrs:{id:"创建命名空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建命名空间","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建命名空间")]),t._v(" "),a("p",[t._v("比如创建一个 development 的命名空间, 首先撰写 yaml 文件, 如下:")]),t._v(" "),a("p",[a("code",[t._v("test.yaml")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Namespace\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl create -f ./test.yaml\nnamespace/test created\n")])])]),a("h3",{attrs:{id:"pod-rc-service中指定命名空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod-rc-service中指定命名空间","aria-hidden":"true"}},[t._v("#")]),t._v(" Pod/RC/Service中指定命名空间")]),t._v(" "),a("p",[t._v("在创建资源时使用 "),a("code",[t._v("namespace")]),t._v(" 字段指定命名空间")]),t._v(" "),a("p",[a("code",[t._v("nginx.yaml")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("test\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("qzy\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("test\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containerPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8081")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hostPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8081")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl create -f ./nginx.yaml\npod/nginx-test created\n")])])]),a("imgLink",{attrs:{src:"date/20190417/001.png"}}),t._v(" "),a("h3",{attrs:{id:"查询命名空间中的资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询命名空间中的资源","aria-hidden":"true"}},[t._v("#")]),t._v(" 查询命名空间中的资源")]),t._v(" "),a("p",[t._v("直接使用 "),a("code",[t._v("kubectl get pods")]),t._v(" 时，默认使用的是查询 "),a("code",[t._v("namespace=default")]),t._v(" 的，加上 "),a("code",[t._v("-n")]),t._v(" 参数可查询指定命名空间中的资源。同理创建RC/Service也是一样的。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl get pods -n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),t._v("\n$ kubectl get pods --all-namespaces  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询所有命名空间的pod")]),t._v("\n")])])]),a("h2",{attrs:{id:"pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod","aria-hidden":"true"}},[t._v("#")]),t._v(" Pod")]),t._v(" "),a("p",[t._v("Pod是Kubernetes最基本的操作单元，包含一个或多个紧密相关的容器，一个Pod可以被一个容器化的环境看作应用层的“逻辑宿主机”；一个Pod中的多个容器应用通常是紧密耦合的，Pod在Node上被创建、启动或者销毁；每个Pod里运行着一个特殊的被称之为Pause的容器，其他容器则为业务容器，这些业务容器共享Pause容器的网络栈和Volume挂载卷，因此他们之间通信和数据交换更为高效，在设计时我们可以充分利用这一特性将一组密切相关的服务进程放入同一个Pod中。")]),t._v(" "),a("p",[t._v("同一个Pod里的容器之间仅需通过localhost就能互相通信。")]),t._v(" "),a("p",[t._v("一个Pod中的应用容器共享同一组资源：")]),t._v(" "),a("ul",[a("li",[t._v("PID命名空间：Pod中的不同应用程序可以看到其他应用程序的进程ID；")]),t._v(" "),a("li",[t._v("网络命名空间：Pod中的多个容器能够访问同一个IP和端口范围；")]),t._v(" "),a("li",[t._v("IPC命名空间：Pod中的多个容器能够使用SystemV IPC或POSIX消息队列进行通信；")]),t._v(" "),a("li",[t._v("UTS命名空间：Pod中的多个容器共享一个主机名；")]),t._v(" "),a("li",[t._v("Volumes（共享存储卷）：Pod中的各个容器可以访问在Pod级别定义的Volumes；")])]),t._v(" "),a("p",[t._v("Pod的生命周期通过Replication Controller来管理；通过模板进行定义，然后分配到一个Node上运行，在Pod所包含容器运行结束后，Pod结束。")]),t._v(" "),a("p",[t._v("Kubernetes为Pod设计了一套独特的网络配置，包括：为每个Pod分配一个IP地址，使用Pod名作为容器间通信的主机名等。")]),t._v(" "),a("p",[t._v("相关操作")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl get pods "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取default命名空间的pods")]),t._v("\n")])])]),a("p",[t._v("在Kubernetes集群中Pod有如下两种使用方式：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("一个Pod中运行一个容器")]),t._v("。“每个Pod中一个容器”的模式是最常见的用法；在这种使用方式中，你可以把Pod想象成是单个容器的封装，kuberentes管理的是Pod而不是直接管理容器。")]),t._v(" "),a("li",[a("strong",[t._v("在一个Pod中同时运行多个容器")]),t._v("。一个Pod中也可以同时封装几个需要紧密耦合互相协作的容器，它们之间共享资源。这些在同一个Pod中的容器可以互相协作成为一个service单位——一个容器共享文件，另一个“sidecar”容器来更新这些文件。Pod将这些容器的存储资源作为一个实体来管理。")])]),t._v(" "),a("p",[t._v("每个Pod都是应用的一个实例。如果你想平行扩展应用的话（运行多个实例），你应该运行多个Pod，每个Pod都是一个应用实例。在Kubernetes中，这通常被称为replication。")]),t._v(" "),a("h3",{attrs:{id:"pod中管理多个容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod中管理多个容器","aria-hidden":"true"}},[t._v("#")]),t._v(" Pod中管理多个容器")]),t._v(" "),a("p",[t._v("Pod中可以同时运行多个进程（作为容器运行）协同工作。同一个Pod中的容器会自动的分配到同一个 node 上。同一个Pod中的容器共享资源、网络环境和依赖，它们总是被同时调度。")]),t._v(" "),a("p",[t._v("注意在一个Pod中同时运行多个容器是一种比较高级的用法。只有当你的容器需要紧密配合协作的时候才考虑用这种模式。例如，你有一个容器作为web服务器运行，需要用到共享的volume，有另一个“sidecar”容器来从远端获取资源更新这些文件，如下图所示：")]),t._v(" "),a("imgLink",{attrs:{src:"date/20190402/pod-overview.png"}}),t._v(" "),a("p",[t._v("Pod中可以共享两种资源：网络和存储。")]),t._v(" "),a("p",[a("strong",[t._v("网络")])]),t._v(" "),a("p",[t._v("每个Pod都会被分配一个唯一的IP地址。Pod中的所有容器共享网络空间，包括IP地址和端口。Pod内部的容器可以使用localhost互相通信。Pod中的容器与外界通信时，必须分配共享网络资源（例如使用宿主机的端口映射）。")]),t._v(" "),a("p",[a("strong",[t._v("存储")])]),t._v(" "),a("p",[t._v("可以为一个Pod指定多个共享的Volume。Pod中的所有容器都可以访问共享的volume。Volume也可以用来持久化Pod中的存储资源，以防容器重启后文件丢失。")]),t._v(" "),a("h3",{attrs:{id:"pod的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod的使用","aria-hidden":"true"}},[t._v("#")]),t._v(" Pod的使用")]),t._v(" "),a("p",[t._v("你很少会直接在kubernetes中创建单个Pod。因为Pod的生命周期是短暂的，用后即焚的实体。当Pod被创建后（不论是由你直接创建还是被其他Controller），都会被Kubernetes调度到集群的Node上。直到Pod的进程终止、被删掉、因为缺少资源而被驱逐、或者Node故障之前这个Pod都会一直保持在那个Node上。")]),t._v(" "),a("p",[t._v("::: warning 注意\n重启Pod中的容器跟重启Pod不是一回事。Pod只提供容器的运行环境并保持容器的运行状态，重启容器不会造成Pod重启。\n:::")]),t._v(" "),a("p",[t._v("Pod不会自愈。如果Pod运行的Node故障，或者是调度器本身故障，这个Pod就会被删除。同样的，如果Pod所在Node缺少资源或者Pod处于维护状态，Pod也会被驱逐。Kubernetes使用更高级的称为Controller的抽象层，来管理Pod实例。虽然可以直接使用Pod，但是在Kubernetes中通常是使用Controller来管理Pod的。")]),t._v(" "),a("p",[t._v("Pod也可以用于垂直应用栈（例如LAMP），这样使用的主要动机是为了支持共同调度和协调管理应用程序，例如：")]),t._v(" "),a("ul",[a("li",[t._v("内容管理系统、文件和数据加载器、本地换群管理器等。")]),t._v(" "),a("li",[t._v("日志和检查点备份、压缩、旋转、快照等。")]),t._v(" "),a("li",[t._v("数据变更观察者、日志和监控适配器、活动发布者等。")]),t._v(" "),a("li",[t._v("代理、桥接和适配器等。")]),t._v(" "),a("li",[t._v("控制器、管理器、配置器、更新器等。")])]),t._v(" "),a("p",[t._v("通常单个pod中不会同时运行一个应用的多个实例。")]),t._v(" "),a("h3",{attrs:{id:"pod-的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod-的生命周期","aria-hidden":"true"}},[t._v("#")]),t._v(" Pod 的生命周期")]),t._v(" "),a("p",[t._v("下图是Pod的生命周期示意图，从图中可以看到Pod状态的变化。")]),t._v(" "),a("imgLink",{attrs:{src:"date/20190402/kubernetes-pod-life-cycle.jpg"}}),t._v(" "),a("p",[t._v("Pod 的生命周期包括:")]),t._v(" "),a("ul",[a("li",[t._v("挂起（Pending）：Pod 已被 Kubernetes 系统接受，但有一个或者多个容器镜像尚未创建。等待时间包括调度 Pod 的时间和通过网络下载镜像的时间，这可能需要花点时间。")]),t._v(" "),a("li",[t._v("运行中（Running）：该 Pod 已经绑定到了一个节点上，Pod 中所有的容器都已被创建。至少有一个容器正在运行，或者正处于启动或重启状态。")]),t._v(" "),a("li",[t._v("成功（Succeeded）：Pod 中的所有容器都被成功终止，并且不会再重启。")]),t._v(" "),a("li",[t._v("失败（Failed）：Pod 中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以非0状态退出或者被系统终止。")]),t._v(" "),a("li",[t._v("未知（Unknown）：因为某些原因无法取得 Pod 的状态，通常是因为与 Pod 所在主机通信失败。")])]),t._v(" "),a("h3",{attrs:{id:"pod-hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod-hook","aria-hidden":"true"}},[t._v("#")]),t._v(" Pod hook")]),t._v(" "),a("p",[t._v("Pod hook（钩子）是由Kubernetes管理的kubelet发起的，当容器中的进程启动前或者容器中的进程终止之前运行，这是包含在容器的生命周期之中。可以同时为Pod中的所有容器都配置hook。")]),t._v(" "),a("p",[t._v("Hook的类型包括两种：")]),t._v(" "),a("ul",[a("li",[t._v("exec：执行一段命令")]),t._v(" "),a("li",[t._v("HTTP：发送HTTP请求。")])]),t._v(" "),a("p",[t._v("参考下面的配置：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lifecycle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("demo\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lifecycle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("container\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("lifecycle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("postStart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/sh"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo Hello from the postStart handler > /usr/share/message"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("preStop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/usr/sbin/nginx"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-s"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"quit"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("在容器创建之后，容器的Entrypoint执行之前，这时候Pod已经被调度到某台node上，被某个kubelet管理了，这时候kubelet会调用postStart操作，该操作跟容器的启动命令是在异步执行的，也就是说在postStart操作执行完成之前，kubelet会锁住容器，不让应用程序的进程启动，只有在 postStart操作完成之后容器的状态才会被设置成为RUNNING。")]),t._v(" "),a("p",[t._v("如果postStart或者preStop hook失败，将会终止容器。")]),t._v(" "),a("h3",{attrs:{id:"进入到pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进入到pod","aria-hidden":"true"}},[t._v("#")]),t._v(" 进入到Pod")]),t._v(" "),a("p",[t._v("类同于进入docker容器:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ docker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),t._v(" -ti  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("your-container-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("   /bin/sh\n")])])]),a("p",[t._v("进入pod:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),t._v(" -ti "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("your-pod-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  -n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("your-namespace"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  -- /bin/sh\n")])])]),a("h3",{attrs:{id:"pod-preset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod-preset","aria-hidden":"true"}},[t._v("#")]),t._v(" Pod Preset")]),t._v(" "),a("p",[t._v("Preset 就是预设，有时候想要让一批容器在启动的时候就注入一些信息，比如 secret、volume、volume mount 和环境变量，而又不想一个一个的改这些 Pod 的 template，这时候就可以用到 PodPreset 这个资源对象了。")]),t._v(" "),a("p",[t._v("Pod Preset 是用来在 Pod 被创建的时候向其中注入额外的运行时需求的 API 资源。")]),t._v(" "),a("p",[t._v("使用 Pod Preset 使得 pod 模板的作者可以不必为每个 Pod 明确提供所有信息。这样一来，pod 模板的作者就不需要知道关于该服务的所有细节。")]),t._v(" "),a("h3",{attrs:{id:"init-容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-容器","aria-hidden":"true"}},[t._v("#")]),t._v(" Init 容器")]),t._v(" "),a("p",[t._v("Pod 能够具有多个容器，应用运行在容器里面，但是它也可能有一个或多个先于应用容器启动的 Init 容器。")]),t._v(" "),a("p",[t._v("Init 容器与普通的容器非常像，除了如下两点：")]),t._v(" "),a("ul",[a("li",[t._v("Init 容器总是运行到成功完成为止。")]),t._v(" "),a("li",[t._v("每个 Init 容器都必须在下一个 Init 容器启动之前成功完成。")])]),t._v(" "),a("p",[t._v("如果 Pod 的 Init 容器失败，Kubernetes 会不断地重启该 Pod，直到 Init 容器成功为止。然而，如果 Pod 对应的 restartPolicy 为 Never，它不会重新启动。")]),t._v(" "),a("p",[t._v("指定容器为 Init 容器，在 PodSpec 中添加 initContainers 字段，以 v1.Container 类型对象的 JSON 数组的形式，还有 app 的 containers 数组。 Init 容器的状态在 status.initContainerStatuses 字段中以容器状态数组的格式返回（类似 status.containerStatuses 字段）。")]),t._v(" "),a("h4",{attrs:{id:"使用-init-容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-init-容器","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用 Init 容器")]),t._v(" "),a("p",[t._v("以下是 Kubernetes 1.6 版本的新语法，尽管老的 annotation 语法仍然可以使用。我们已经把 Init 容器的声明移到 "),a("code",[t._v("spec")]),t._v(" 中：")]),t._v(" "),a("p",[a("code",[t._v("myapp.yaml")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" myapp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("pod\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" myapp\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" myapp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("container\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" busybox\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sh'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'echo The app is running! && sleep 3600'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("initContainers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("myservice\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" busybox\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sh'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'until nslookup myservice; do echo waiting for myservice; sleep 2; done;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("mydb\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" busybox\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sh'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'until nslookup mydb; do echo waiting for mydb; sleep 2; done;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("下面的 YAML 文件展示了包括 "),a("code",[t._v("mydb")]),t._v(" 和 "),a("code",[t._v("myservice")]),t._v(" 两个 Service：")]),t._v(" "),a("p",[a("code",[t._v("services.yaml")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Service\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" myservice\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("protocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TCP\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("targetPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9376")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Service\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mydb\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("protocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TCP\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("targetPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9377")]),t._v("\n")])])]),a("p",[t._v("这个 Pod 可以使用下面的命令进行启动和调试：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl create -f myapp.yaml\npod "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myapp-pod"')]),t._v(" created\n$ kubectl get -f myapp.yaml\nNAME        READY     STATUS     RESTARTS   AGE\nmyapp-pod   0/1       Init:0/2   0          6m\n$ kubectl describe -f myapp.yaml\n$ kubectl logs myapp-pod -c init-myservice "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Inspect the first init container")]),t._v("\n$ kubectl logs myapp-pod -c init-mydb      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Inspect the second init container")]),t._v("\n")])])]),a("p",[t._v("可以看到, 在 "),a("code",[t._v("mydb")]),t._v(" 和 "),a("code",[t._v("myservice")]),t._v(" 服务还未创建之前, STATUS 为 "),a("code",[t._v("Init:0/2")]),t._v(", 处于等待服务创建的阶段。")]),t._v(" "),a("p",[t._v("一旦我们启动了 "),a("code",[t._v("mydb")]),t._v(" 和 "),a("code",[t._v("myservice")]),t._v(" 这两个 Service，我们能够看到 Init 容器完成，并且 "),a("code",[t._v("myapp-pod")]),t._v(" 被创建, 其状态为 "),a("code",[t._v("Running")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl create -f services.yaml\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myservice"')]),t._v(" created\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mydb"')]),t._v(" created\n$ kubectl get -f myapp.yaml\nNAME        READY     STATUS    RESTARTS   AGE\nmyapp-pod   1/1       Running   0          9m\n")])])]),a("p",[t._v("这个例子非常简单，但是应该能够为我们创建自己的 Init 容器提供一些启发。")]),t._v(" "),a("h3",{attrs:{id:"api-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-object","aria-hidden":"true"}},[t._v("#")]),t._v(" API Object")]),t._v(" "),a("p",[t._v("Pod是kubernetes REST API中的顶级资源类型。")]),t._v(" "),a("p",[t._v("在kuberentes1.6的V1 core API版本中的Pod的数据结构如下图所示：")]),t._v(" "),a("imgLink",{attrs:{src:"date/20190402/kubernetes-pod-cheatsheet.png"}}),t._v(" "),a("h2",{attrs:{id:"服务-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务-service","aria-hidden":"true"}},[t._v("#")]),t._v(" 服务 (Service)")]),t._v(" "),a("p",[t._v("在Kubernetes的世界里，虽然每个Pod都会被分配一个单独的IP地址，但这个IP地址会随着Pod的销毁而消失，这就引出一个问题：如果有一组Pod组成一个集群来提供服务，那么如何来访问它呢？Service！")]),t._v(" "),a("p",[t._v("一个Service可以看作一组提供相同服务的Pod的对外访问接口，Service作用于哪些Pod是通过Label Selector来定义的。")]),t._v(" "),a("ul",[a("li",[t._v("拥有一个指定的名字（比如my-mysql-server）；")]),t._v(" "),a("li",[t._v("拥有一个虚拟IP（ClusterIP、ServiceIP或VIP）和端口号，销毁之前不会改变，只能内网访问；")]),t._v(" "),a("li",[t._v("能够提供某种远程服务能力；")]),t._v(" "),a("li",[t._v("被映射到了提供这种服务能力的一组容器应用上；")])]),t._v(" "),a("p",[t._v("如果Service要提供外网服务，需指定公共IP和NodePort，或外部负载均衡器；")]),t._v(" "),a("p",[a("strong",[t._v("NodePort")])]),t._v(" "),a("p",[t._v("系统会在Kubernetes集群中的每个Node上打开一个主机的真实端口，这样，能够访问Node的客户端就能通过这个端口访问到内部的Service了")]),t._v(" "),a("h3",{attrs:{id:"定义-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义-service","aria-hidden":"true"}},[t._v("#")]),t._v(" 定义 Service")]),t._v(" "),a("p",[t._v("一个 "),a("code",[t._v("Service")]),t._v(" 在 Kubernetes 中是一个 REST 对象，和 "),a("code",[t._v("Pod")]),t._v(" 类似。 像所有的 REST 对象一样， "),a("code",[t._v("Service")]),t._v(" 定义可以基于 POST 方式，请求 apiserver 创建新的实例。 例如，假定有一组 "),a("code",[t._v("Pod")]),t._v("，它们对外暴露了 9376 端口，同时还被打上 "),a("code",[t._v('"app=MyApp"')]),t._v(" 标签。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Service\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("selector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" MyApp\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("protocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TCP\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("targetPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9376")]),t._v("\n")])])]),a("p",[t._v("上述配置将创建一个名称为 “my-service” 的 "),a("code",[t._v("Service")]),t._v(" 对象，它会将请求代理到使用 TCP 端口 9376，并且具有标签 "),a("code",[t._v('"app=MyApp"')]),t._v(" 的 "),a("code",[t._v("Pod")]),t._v(" 上。 这个 "),a("code",[t._v("Service")]),t._v(" 将被指派一个 IP 地址（通常称为 “Cluster IP”），它会被服务的代理使用（见下面）。 该 "),a("code",[t._v("Service")]),t._v(" 的 selector 将会持续评估，处理结果将被 POST 到一个名称为 “my-service” 的 "),a("code",[t._v("Endpoints")]),t._v(" 对象上。")]),t._v(" "),a("p",[t._v("需要注意的是， "),a("code",[t._v("Service")]),t._v(" 能够将一个接收端口映射到任意的 "),a("code",[t._v("targetPort")]),t._v("。 默认情况下，"),a("code",[t._v("targetPort")]),t._v(" 将被设置为与 "),a("code",[t._v("port")]),t._v(" 字段相同的值。 可能更有趣的是，"),a("code",[t._v("targetPort")]),t._v(" 可以是一个字符串，引用了 backend "),a("code",[t._v("Pod")]),t._v(" 的一个端口的名称。 但是，实际指派给该端口名称的端口号，在每个 backend "),a("code",[t._v("Pod")]),t._v(" 中可能并不相同。 对于部署和设计 "),a("code",[t._v("Service")]),t._v(" ，这种方式会提供更大的灵活性。 例如，可以在 backend 软件下一个版本中，修改 Pod 暴露的端口，并不会中断客户端的调用。")]),t._v(" "),a("p",[t._v("Kubernetes "),a("code",[t._v("Service")]),t._v(" 能够支持 "),a("code",[t._v("TCP")]),t._v(" 和 "),a("code",[t._v("UDP")]),t._v(" 协议，默认 "),a("code",[t._v("TCP")]),t._v(" 协议。")]),t._v(" "),a("h2",{attrs:{id:"副本控制器-replication-controller，rc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#副本控制器-replication-controller，rc","aria-hidden":"true"}},[t._v("#")]),t._v(" 副本控制器 (Replication Controller，RC)")]),t._v(" "),a("p",[t._v("Replication Controller 用来确保容器应用的副本数始终保持在用户定义的副本数，即如果有容器异常退出，会自动创建新的Pod来替代；而如果异常多出来的容器也会自动回收。")]),t._v(" "),a("p",[t._v("RC是Kubernetes集群中最早的保证Pod高可用的API对象。通过监控运行中的Pod来保证集群中运行指定数目的Pod副本。指定的数目可以是多个也可以是1个；少于指定数目，RC就会启动运行新的Pod副本；多于指定数目，RC就会杀死多余的Pod副本。即使在指定数目为1的情况下，通过RC运行Pod也比直接运行Pod更明智，因为RC也可以发挥它高可用的能力，保证永远有1个Pod在运行。RC是Kubernetes较早期的技术概念，只适用于长期伺服型的业务类型，比如控制小机器人提供高可用的Web服务。")]),t._v(" "),a("h2",{attrs:{id:"副本集（replica-set，rs）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#副本集（replica-set，rs）","aria-hidden":"true"}},[t._v("#")]),t._v(" 副本集（Replica Set，RS）")]),t._v(" "),a("p",[t._v("RS是新一代RC，提供同样的高可用能力，区别主要在于RS后来居上，能支持更多种类的匹配模式。副本集对象一般不单独使用，而是作为Deployment的理想状态参数使用。")]),t._v(" "),a("p",[t._v("在新版本的Kubernetes中建议使用ReplicaSet来取代ReplicationController。ReplicaSet跟ReplicationController没有本质的不同，只是名字不一样，并且ReplicaSet支持集合式的selector。")]),t._v(" "),a("p",[t._v("虽然ReplicaSet可以独立使用，但一般还是建议使用 Deployment 来自动管理ReplicaSet，这样就无需担心跟其他机制的不兼容问题（比如ReplicaSet不支持rolling-update但Deployment支持）。")]),t._v(" "),a("p",[t._v("ReplicaSet示例：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" extensions/v1beta1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ReplicaSet\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" frontend\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# these labels can be applied automatically")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# from the labels in the pod template if not set")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# labels:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# app: guestbook")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tier: frontend")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this replicas value is default")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# modify it according to your case")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("replicas")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# selector can be applied automatically")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# from the labels in the pod template if not set,")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# but we are specifying the selector here to")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# demonstrate its usage.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("selector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("matchLabels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tier")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" frontend\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("matchExpressions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" In"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("frontend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" guestbook\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tier")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" frontend\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" php"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("redis\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gcr.io/google_samples/gb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("frontend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("v3\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("resources")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("requests")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cpu")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100m\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("memory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100Mi\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("env")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" GET_HOSTS_FROM\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dns\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If your cluster config does not include a dns service, then to")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# instead access environment variables to find service host")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# info, comment out the 'value: dns' line above, and uncomment the")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# line below.")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# value: env")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containerPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n")])])]),a("h2",{attrs:{id:"有状态副本集-stateful-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有状态副本集-stateful-set","aria-hidden":"true"}},[t._v("#")]),t._v(" 有状态副本集 (Stateful Set)")]),t._v(" "),a("p",[t._v("StatefulSet 作为 Controller 为 Pod 提供唯一的标识。它可以保证部署和 scale 的顺序。")]),t._v(" "),a("p",[t._v("StatefulSet是为了解决有状态服务的问题（对应Deployments和ReplicaSets是为无状态服务而设计），其应用场景包括：")]),t._v(" "),a("ul",[a("li",[t._v("稳定的持久化存储，即Pod重新调度后还是能访问到相同的持久化数据，基于PVC来实现")]),t._v(" "),a("li",[t._v("稳定的网络标志，即Pod重新调度后其PodName和HostName不变，基于Headless Service（即没有Cluster IP的Service）来实现")]),t._v(" "),a("li",[t._v("有序部署，有序扩展，即Pod是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依次进行（即从0到N-1，在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态），基于init containers来实现")]),t._v(" "),a("li",[t._v("有序收缩，有序删除（即从N-1到0）")])]),t._v(" "),a("p",[t._v("从上面的应用场景可以发现，StatefulSet由以下几个部分组成：")]),t._v(" "),a("ul",[a("li",[t._v("用于定义网络标志（DNS domain）的Headless Service")]),t._v(" "),a("li",[t._v("用于创建PersistentVolumes的volumeClaimTemplates")]),t._v(" "),a("li",[t._v("定义具体应用的StatefulSet")])]),t._v(" "),a("p",[t._v("StatefulSet中每个Pod的DNS格式为"),a("code",[t._v("statefulSetName-{0..N-1}.serviceName.namespace.svc.cluster.local")]),t._v("，其中")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("serviceName")]),t._v("为Headless Service的名字")]),t._v(" "),a("li",[a("code",[t._v("0..N-1")]),t._v("为Pod所在的序号，从0开始到N-1")]),t._v(" "),a("li",[a("code",[t._v("statefulSetName")]),t._v("为StatefulSet的名字")]),t._v(" "),a("li",[a("code",[t._v("namespace")]),t._v("为服务所在的namespace，Headless Servic和StatefulSet必须在相同的namespace")]),t._v(" "),a("li",[a("code",[t._v(".cluster.local")]),t._v("为Cluster Domain")])]),t._v(" "),a("h3",{attrs:{id:"使用-stateful-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-stateful-set","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用 Stateful Set")]),t._v(" "),a("p",[t._v("Stateful Set 适用于有以下某个或多个需求的应用：")]),t._v(" "),a("ul",[a("li",[t._v("稳定，唯一的网络标志。")]),t._v(" "),a("li",[t._v("稳定，持久化存储。")]),t._v(" "),a("li",[t._v("有序，优雅地部署和 scale。")]),t._v(" "),a("li",[t._v("有序，优雅地删除和终止。")]),t._v(" "),a("li",[t._v("有序，自动的滚动升级。")])]),t._v(" "),a("p",[t._v("在上文中，稳定是 Pod （重新）调度中持久性的代名词。 如果应用程序不需要任何稳定的标识符、有序部署、删除和 scale，则应该使用提供一组无状态副本的 controller 来部署应用程序，例如 "),a("a",{attrs:{href:"https://kubernetes.io/docs/concepts/workloads/controllers/deployment",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deployment"),a("OutboundLink")],1),t._v(" 或 "),a("a",{attrs:{href:"https://kubernetes.io/docs/concepts/workloads/controllers/replicaset",target:"_blank",rel:"noopener noreferrer"}},[t._v("ReplicaSet"),a("OutboundLink")],1),t._v(" 可能更适合您的无状态需求。")]),t._v(" "),a("h3",{attrs:{id:"组件示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件示例","aria-hidden":"true"}},[t._v("#")]),t._v(" 组件示例")]),t._v(" "),a("p",[t._v("下面的示例中描述了 StatefulSet 中的组件。")]),t._v(" "),a("ul",[a("li",[t._v("一个名为 nginx 的 headless service，用于控制网络域。")]),t._v(" "),a("li",[t._v("一个名为 web 的 StatefulSet，它的 Spec 中指定在有 3 个运行 nginx 容器的 Pod。")]),t._v(" "),a("li",[t._v("volumeClaimTemplates 使用 PersistentVolume Provisioner 提供的 "),a("a",{attrs:{href:"https://kubernetes.io/docs/concepts/storage/volumes",target:"_blank",rel:"noopener noreferrer"}},[t._v("PersistentVolumes"),a("OutboundLink")],1),t._v(" 作为稳定存储。")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Service\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" web\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("clusterIP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" None\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("selector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" apps/v1beta1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" StatefulSet\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" web\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("serviceName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("replicas")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("terminationGracePeriodSeconds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gcr.io/google_containers/nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("slim"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.8")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containerPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" web\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumeMounts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" www\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mountPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /usr/share/nginx/html\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumeClaimTemplates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" www\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("annotations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volume.beta.kubernetes.io/storage-class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" anything\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("accessModes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ReadWriteOnce"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("resources")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("requests")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("storage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1Gi\n")])])]),a("h2",{attrs:{id:"部署-deployment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署-deployment","aria-hidden":"true"}},[t._v("#")]),t._v(" 部署 (Deployment)")]),t._v(" "),a("p",[t._v("部署表示用户对Kubernetes集群的一次更新操作。部署是一个比RS应用模式更广的API对象，可以是创建一个新的服务，更新一个新的服务，也可以是滚动升级一个服务。滚动升级一个服务，实际是创建一个新的RS，然后逐渐将新RS中副本数增加到理想状态，将旧RS中的副本数减小到0的复合操作；这样一个复合操作用一个RS是不太好描述的，所以用一个更通用的Deployment来描述。以Kubernetes的发展方向，未来对所有长期伺服型的的业务的管理，都会通过Deployment来管理。")]),t._v(" "),a("p",[t._v("Deployment 为 Pod 和 ReplicaSet（下一代Replication Controller）提供了一个声明式定义(declarative)方法，用来替代以前的ReplicationController 来方便的管理应用。典型的应用场景包括：")]),t._v(" "),a("ul",[a("li",[t._v("定义Deployment来创建Pod和ReplicaSet")]),t._v(" "),a("li",[t._v("滚动升级和回滚应用")]),t._v(" "),a("li",[t._v("扩容和缩容")]),t._v(" "),a("li",[t._v("暂停和继续Deployment")])]),t._v(" "),a("p",[t._v("您只需要在 Deployment 中描述您想要的目标状态是什么，Deployment controller 就会帮您将 Pod 和ReplicaSet 的实际状态改变到您的目标状态。您可以定义一个全新的 Deployment 来创建 ReplicaSet 或者删除已有的 Deployment 并创建一个新的来替换。")]),t._v(" "),a("p",[a("strong",[t._v("注意")]),t._v("：您不该手动管理由 Deployment 创建的 ReplicaSet，否则您就篡越了 Deployment controller 的职责！下文罗列了 Deployment 对象中已经覆盖了所有的用例。如果未有覆盖您所有需要的用例，请直接在 Kubernetes 的代码库中提 issue。")]),t._v(" "),a("p",[t._v("典型的用例如下：")]),t._v(" "),a("ul",[a("li",[t._v("使用Deployment来创建ReplicaSet。ReplicaSet在后台创建pod。检查启动状态，看它是成功还是失败。")]),t._v(" "),a("li",[t._v("然后，通过更新Deployment的PodTemplateSpec字段来声明Pod的新状态。这会创建一个新的ReplicaSet，Deployment会按照控制的速率将pod从旧的ReplicaSet移动到新的ReplicaSet中。")]),t._v(" "),a("li",[t._v("如果当前状态不稳定，回滚到之前的Deployment revision。每次回滚都会更新Deployment的revision。")]),t._v(" "),a("li",[t._v("扩容Deployment以满足更高的负载。")]),t._v(" "),a("li",[t._v("暂停Deployment来应用PodTemplateSpec的多个修复，然后恢复上线。")]),t._v(" "),a("li",[t._v("根据Deployment 的状态判断上线是否hang住了。")]),t._v(" "),a("li",[t._v("清除旧的不必要的 ReplicaSet。")])]),t._v(" "),a("p",[t._v("比如一个简单的nginx应用可以定义为")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" extensions/v1beta1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Deployment\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("deployment\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("replicas")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("1.7.9\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containerPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n")])])]),a("p",[t._v("扩容：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl scale deployment nginx-deployment --replicas 10\n")])])]),a("p",[t._v("如果集群支持 horizontal pod autoscaling 的话，还可以为Deployment设置自动扩展：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl autoscale deployment nginx-deployment --min"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("10 --max"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("15 --cpu-percent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("80\n")])])]),a("p",[t._v("更新镜像也比较简单:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" image deployment/nginx-deployment nginx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("nginx:1.9.1\n")])])]),a("p",[t._v("回滚：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl rollout undo deployment/nginx-deployment\n")])])]),a("imgLink",{attrs:{src:"date/20190403/deployment-cheatsheet.png"}}),t._v(" "),a("h3",{attrs:{id:"创建-deployment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-deployment","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建 Deployment")]),t._v(" "),a("p",[t._v("下面是一个 Deployment 示例，它创建了一个 ReplicaSet 来启动3个 nginx pod。")]),t._v(" "),a("p",[t._v("下载示例文件并执行命令：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl create -f https://kubernetes.io/docs/user-guide/nginx-deployment.yaml --record\ndeployment "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx-deployment"')]),t._v(" created\n")])])]),a("p",[t._v("将kubectl的 "),a("code",[t._v("--record")]),t._v(" 的 flag 设置为 "),a("code",[t._v("true")]),t._v("可以在 annotation 中记录当前命令创建或者升级了该资源。这在未来会很有用，例如，查看在每个 Deployment revision 中执行了哪些命令。")]),t._v(" "),a("p",[t._v("然后立即执行 "),a("code",[t._v("get")]),t._v(" 将获得如下结果：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl get deployments\nNAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment   3         0         0            0           1s\n")])])]),a("p",[t._v("输出结果表明我们希望的repalica数是3（根据deployment中的"),a("code",[t._v(".spec.replicas")]),t._v("配置）当前replica数（ "),a("code",[t._v(".status.replicas")]),t._v("）是0, 最新的replica数（"),a("code",[t._v(".status.updatedReplicas")]),t._v("）是0，可用的replica数（"),a("code",[t._v(".status.availableReplicas")]),t._v("）是0。")]),t._v(" "),a("p",[t._v("过几秒后再执行"),a("code",[t._v("get")]),t._v("命令，将获得如下输出：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl get deployments\nNAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment   3         3         3            3           18s\n")])])]),a("p",[t._v("我们可以看到Deployment已经创建了3个 replica，所有的 replica 都已经是最新的了（包含最新的pod template），可用的（根据Deployment中的"),a("code",[t._v(".spec.minReadySeconds")]),t._v("声明，处于已就绪状态的pod的最少个数）。执行"),a("code",[t._v("kubectl get rs")]),t._v("和"),a("code",[t._v("kubectl get pods")]),t._v("会显示Replica Set（RS）和Pod已创建。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl get rs\nNAME                          DESIRED   CURRENT   READY   AGE\nnginx-deployment-2035384211   3         3         0       18s\n")])])]),a("p",[t._v("您可能会注意到 ReplicaSet 的名字总是"),a("code",[t._v("<Deployment的名字>-<pod template的hash值>")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl get pods --show-labels\nNAME                                READY     STATUS    RESTARTS   AGE       LABELS\nnginx-deployment-2035384211-7ci7o   1/1       Running   0          18s       app"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("nginx,pod-template-hash"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("2035384211\nnginx-deployment-2035384211-kzszj   1/1       Running   0          18s       app"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("nginx,pod-template-hash"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("2035384211\nnginx-deployment-2035384211-qqcnn   1/1       Running   0          18s       app"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("nginx,pod-template-hash"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("2035384211\n")])])]),a("p",[t._v("刚创建的Replica Set将保证总是有3个 nginx 的 pod 存在。")]),t._v(" "),a("p",[a("strong",[t._v("注意：")]),t._v(" 您必须在 Deployment 中的 selector 指定正确的 pod template label（在该示例中是 "),a("code",[t._v("app = nginx")]),t._v("），不要跟其他的 controller 的 selector 中指定的 pod template label 搞混了（包括 Deployment、Replica Set、Replication Controller 等）。"),a("strong",[t._v("Kubernetes 本身并不会阻止您任意指定 pod template label")]),t._v(" ，但是如果您真的这么做了，这些 controller 之间会相互打架，并可能导致不正确的行为。")]),t._v(" "),a("h2",{attrs:{id:"守护进程集-daemonset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#守护进程集-daemonset","aria-hidden":"true"}},[t._v("#")]),t._v(" 守护进程集 (DaemonSet)")]),t._v(" "),a("p",[a("em",[t._v("DaemonSet")]),t._v(" 确保全部（或者一些）Node 上运行一个 Pod 的副本。当有 Node 加入集群时，也会为他们新增一个 Pod 。当有 Node 从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。")]),t._v(" "),a("p",[t._v("使用 DaemonSet 的一些典型用法：")]),t._v(" "),a("ul",[a("li",[t._v("运行集群存储 daemon，例如在每个 Node 上运行 "),a("code",[t._v("glusterd")]),t._v("、"),a("code",[t._v("ceph")]),t._v("。")]),t._v(" "),a("li",[t._v("在每个 Node 上运行日志收集 daemon，例如"),a("code",[t._v("fluentd")]),t._v("、"),a("code",[t._v("logstash")]),t._v("。")]),t._v(" "),a("li",[t._v("在每个 Node 上运行监控 daemon，例如 "),a("a",{attrs:{href:"https://github.com/prometheus/node_exporter",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prometheus Node Exporter"),a("OutboundLink")],1),t._v("、"),a("code",[t._v("collectd")]),t._v("、Datadog 代理、New Relic 代理，或 Ganglia "),a("code",[t._v("gmond")]),t._v("。")])]),t._v(" "),a("p",[t._v("一个简单的用法是，在所有的 Node 上都存在一个 DaemonSet，将被作为每种类型的 daemon 使用。 一个稍微复杂的用法可能是，对单独的每种类型的 daemon 使用多个 DaemonSet，但具有不同的标志，和/或对不同硬件类型具有不同的内存、CPU要求。")]),t._v(" "),a("h3",{attrs:{id:"daemonset-spec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#daemonset-spec","aria-hidden":"true"}},[t._v("#")]),t._v(" DaemonSet Spec")]),t._v(" "),a("p",[t._v("和其它所有 Kubernetes 配置一样，DaemonSet 需要 apiVersion、kind 和 metadata字段。有关配置文件的通用信息, DaemonSet 也需要一个 .spec 配置段。")]),t._v(" "),a("h3",{attrs:{id:"pod-模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod-模板","aria-hidden":"true"}},[t._v("#")]),t._v(" Pod 模板")]),t._v(" "),a("p",[a("code",[t._v(".spec")]),t._v(" 唯一必需的字段是 "),a("code",[t._v(".spec.template")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v(".spec.template")]),t._v(" 是一个 "),a("a",{attrs:{href:"https://kubernetes.io/docs/user-guide/replication-controller/#pod-template",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pod 模板"),a("OutboundLink")],1),t._v("。 它与 "),a("a",{attrs:{href:"https://kubernetes.io/docs/user-guide/pods",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pod"),a("OutboundLink")],1),t._v(" 具有相同的 schema，除了它是嵌套的，而且不具有 "),a("code",[t._v("apiVersion")]),t._v(" 或 "),a("code",[t._v("kind")]),t._v(" 字段。")]),t._v(" "),a("p",[t._v("Pod 除了必须字段外，在 DaemonSet 中的 Pod 模板必须指定合理的标签（查看 "),a("a",{attrs:{href:"https://jimmysong.io/kubernetes-handbook/concepts/daemonset.html#pod-selector",target:"_blank",rel:"noopener noreferrer"}},[t._v("pod selector"),a("OutboundLink")],1),t._v("）。")]),t._v(" "),a("p",[t._v("在 DaemonSet 中的 Pod 模板必需具有一个值为 "),a("code",[t._v("Always")]),t._v(" 的 "),a("a",{attrs:{href:"https://kubernetes.io/docs/user-guide/pod-states",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("RestartPolicy")]),a("OutboundLink")],1),t._v("，或者未指定它的值，默认是 "),a("code",[t._v("Always")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"任务-job"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任务-job","aria-hidden":"true"}},[t._v("#")]),t._v(" 任务 (Job)")]),t._v(" "),a("p",[t._v("Job负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个Pod成功结束。")]),t._v(" "),a("h3",{attrs:{id:"job-spec格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#job-spec格式","aria-hidden":"true"}},[t._v("#")]),t._v(" Job Spec格式")]),t._v(" "),a("ul",[a("li",[t._v("spec.template格式同Pod")]),t._v(" "),a("li",[t._v("RestartPolicy仅支持Never或OnFailure")]),t._v(" "),a("li",[t._v("单个Pod时，默认Pod成功运行后Job即结束")]),t._v(" "),a("li",[a("code",[t._v(".spec.completions")]),t._v("标志Job结束需要成功运行的Pod个数，默认为1")]),t._v(" "),a("li",[a("code",[t._v(".spec.parallelism")]),t._v("标志并行运行的Pod的个数，默认为1")]),t._v(" "),a("li",[a("code",[t._v("spec.activeDeadlineSeconds")]),t._v("标志失败Pod的重试最大时间，超过这个时间不会继续重试")])]),t._v(" "),a("p",[t._v("一个简单的例子：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" batch/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Job\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" pi\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" pi\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" pi\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" perl\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"perl"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-Mbignum=bpi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-wle"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"print bpi(2000)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restartPolicy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Never\n$ kubectl create "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('f ./job.yaml\njob "pi" created\n$ pods=$(kubectl get pods '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("selector=job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("name=pi "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("output=jsonpath="),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(".items..metadata.name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(")\n$ kubectl logs $pods\n3.141592653589793238462643383279502"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),a("h3",{attrs:{id:"bare-pods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bare-pods","aria-hidden":"true"}},[t._v("#")]),t._v(" Bare Pods")]),t._v(" "),a("p",[t._v("所谓Bare Pods是指直接用PodSpec来创建的Pod（即不在ReplicaSets或者ReplicationController的管理之下的Pods）。这些Pod在Node重启后不会自动重启，但Job则会创建新的Pod继续任务。所以，推荐使用Job来替代Bare Pods，即便是应用只需要一个Pod。")]),t._v(" "),a("h2",{attrs:{id:"定时任务-cronjob"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时任务-cronjob","aria-hidden":"true"}},[t._v("#")]),t._v(" 定时任务 (CronJob)")]),t._v(" "),a("p",[a("em",[t._v("Cron Job")]),t._v(" 管理基于时间的 "),a("a",{attrs:{href:"https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Job"),a("OutboundLink")],1),t._v("，即：")]),t._v(" "),a("ul",[a("li",[t._v("在给定时间点只运行一次")]),t._v(" "),a("li",[t._v("周期性地在给定时间点运行")])]),t._v(" "),a("p",[t._v("一个 CronJob 对象类似于 "),a("em",[t._v("crontab")]),t._v(" （cron table）文件中的一行。它根据指定的预定计划周期性地运行一个 Job，格式可以参考 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cron",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cron"),a("OutboundLink")],1),t._v(" 。")]),t._v(" "),a("h3",{attrs:{id:"前提条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前提条件","aria-hidden":"true"}},[t._v("#")]),t._v(" 前提条件")]),t._v(" "),a("p",[t._v("当前使用的 Kubernetes 集群，版本 >= 1.8（对 CronJob）。对于先前版本的集群，版本 < 1.8，启动 API Server（参考 "),a("a",{attrs:{href:"https://kubernetes.io/docs/admin/cluster-management/#turn-on-or-off-an-api-version-for-your-cluster",target:"_blank",rel:"noopener noreferrer"}},[t._v("为集群开启或关闭 API 版本"),a("OutboundLink")],1),t._v(" 获取更多信息）时，通过传递选项 "),a("code",[t._v("--runtime-config=batch/v2alpha1=true")]),t._v(" 可以开启 batch/v2alpha1 API。")]),t._v(" "),a("p",[t._v("典型的用法如下所示：")]),t._v(" "),a("ul",[a("li",[t._v("在给定的时间点调度 Job 运行")]),t._v(" "),a("li",[t._v("创建周期性运行的 Job，例如：数据库备份、发送邮件。")])]),t._v(" "),a("h3",{attrs:{id:"cronjob-spec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cronjob-spec","aria-hidden":"true"}},[t._v("#")]),t._v(" CronJob Spec")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v(".spec.schedule")]),t._v("："),a("strong",[t._v("调度")]),t._v("，必需字段，指定任务运行周期，格式同 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cron",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cron"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("code",[t._v(".spec.jobTemplate")]),t._v("："),a("strong",[t._v("Job 模板")]),t._v("，必需字段，指定需要运行的任务，格式同 "),a("a",{attrs:{href:"https://jimmysong.io/kubernetes-handbook/concepts/job.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Job"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("code",[t._v(".spec.startingDeadlineSeconds")]),t._v(" ："),a("strong",[t._v("启动 Job 的期限（秒级别）")]),t._v("，该字段是可选的。如果因为任何原因而错过了被调度的时间，那么错过执行时间的 Job 将被认为是失败的。如果没有指定，则没有期限")])]),t._v(" "),a("li",[a("p",[a("code",[t._v(".spec.concurrencyPolicy")]),t._v("："),a("strong",[t._v("并发策略")]),t._v("，该字段也是可选的。它指定了如何处理被 Cron Job 创建的 Job 的并发执行。只允许指定下面策略中的一种：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Allow")]),t._v("（默认）：允许并发运行 Job")]),t._v(" "),a("li",[a("code",[t._v("Forbid")]),t._v("：禁止并发运行，如果前一个还没有完成，则直接跳过下一个")]),t._v(" "),a("li",[a("code",[t._v("Replace")]),t._v("：取消当前正在运行的 Job，用一个新的来替换")])]),t._v(" "),a("p",[t._v("注意，当前策略只能应用于同一个 Cron Job 创建的 Job。如果存在多个 Cron Job，它们创建的 Job 之间总是允许并发运行。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v(".spec.suspend")]),t._v(" ："),a("strong",[t._v("挂起")]),t._v("，该字段也是可选的。如果设置为 "),a("code",[t._v("true")]),t._v("，后续所有执行都会被挂起。它对已经开始执行的 Job 不起作用。默认值为 "),a("code",[t._v("false")]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v(".spec.successfulJobsHistoryLimit")]),t._v(" 和 "),a("code",[t._v(".spec.failedJobsHistoryLimit")]),t._v(" ："),a("strong",[t._v("历史限制")]),t._v("，是可选的字段。它们指定了可以保留多少完成和失败的 Job。")]),t._v(" "),a("p",[t._v("默认情况下，它们分别设置为 "),a("code",[t._v("3")]),t._v(" 和 "),a("code",[t._v("1")]),t._v("。设置限制的值为 "),a("code",[t._v("0")]),t._v("，相关类型的 Job 完成后将不会被保留。")])])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" batch/v1beta1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CronJob\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hello\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("schedule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*/1 * * * *"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobTemplate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hello\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" busybox\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /bin/sh\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("c\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" date; echo Hello from the Kubernetes cluster\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restartPolicy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" OnFailure\n$ kubectl create "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('f cronjob.yaml\ncronjob "hello" created\n')])])]),a("p",[t._v("当然，也可以用"),a("code",[t._v("kubectl run")]),t._v("来创建一个CronJob：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("kubectl run hello --schedule"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*/1 * * * *"')]),t._v(" --restart"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("OnFailure --image"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("busybox -- /bin/sh -c "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"date; echo Hello from the Kubernetes cluster"')]),t._v("\n$ kubectl get cronjob\nNAME      SCHEDULE      SUSPEND   ACTIVE    LAST-SCHEDULE\nhello     */1 * * * *   False     0         "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n$ kubectl get "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("jobs")]),t._v("\nNAME               DESIRED   SUCCESSFUL   AGE\nhello-1202039034   1         1            49s\n$ pods"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("kubectl get pods --selector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("job-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("hello-1202039034 --output"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("jsonpath"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(".items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("metadata.name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n$ kubectl logs "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pods")]),t._v("\nMon Aug 29 21:34:09 UTC 2016\nHello from the Kubernetes cluster\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意，删除 cronjob 的时候不会自动删除 job，这些 job 可以用 kubectl delete job 来删除")]),t._v("\n$ kubectl delete cronjob hello\ncronjob "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" deleted\n")])])]),a("h3",{attrs:{id:"cron-job-限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cron-job-限制","aria-hidden":"true"}},[t._v("#")]),t._v(" Cron Job 限制")]),t._v(" "),a("p",[t._v("Cron Job 在每次调度运行时间内 "),a("em",[t._v("大概")]),t._v(" 会创建一个 Job 对象。我们之所以说 "),a("em",[t._v("大概")]),t._v(" ，是因为在特定的环境下可能会创建两个 Job，或者一个 Job 都没创建。我们尝试少发生这种情况，但却不能完全避免。因此，创建 Job 操作应该是 "),a("em",[t._v("幂等的")]),t._v("。")]),t._v(" "),a("p",[t._v("Job 根据它所创建的 Pod 的并行度，负责重试创建 Pod，并就决定这一组 Pod 的成功或失败。Cron Job 根本就不会去检查 Pod。")]),t._v(" "),a("h3",{attrs:{id:"删除-cron-job"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除-cron-job","aria-hidden":"true"}},[t._v("#")]),t._v(" 删除 Cron Job")]),t._v(" "),a("p",[t._v("一旦不再需要 Cron Job，简单地可以使用 "),a("code",[t._v("kubectl")]),t._v(" 命令删除它：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ kubectl delete cronjob hello\ncronjob "hello" deleted\n')])])]),a("p",[t._v("这将会终止正在创建的 Job。然而，运行中的 Job 将不会被终止，不会删除 Job 或 它们的 Pod。为了清理那些 Job 和 Pod，需要列出该 Cron Job 创建的全部 Job，然后删除它们：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ kubectl get jobs\nNAME               DESIRED   SUCCESSFUL   AGE\nhello-1201907962   1         1            11m\nhello-1202039034   1         1            8m\n...\n\n$ kubectl delete jobs hello-1201907962 hello-1202039034 ...\njob "hello-1201907962" deleted\njob "hello-1202039034" deleted\n...\n')])])]),a("p",[t._v("一旦 Job 被删除，由 Job 创建的 Pod 也会被删除。注意，所有由名称为 “hello” 的 Cron Job 创建的 Job 会以前缀字符串 “hello-” 进行命名。如果想要删除当前 Namespace 中的所有 Job，可以通过命令 "),a("code",[t._v("kubectl delete jobs --all")]),t._v(" 立刻删除它们。")]),t._v(" "),a("h2",{attrs:{id:"pod水平自动伸缩-horizontal-pod-autoscaling-hpa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod水平自动伸缩-horizontal-pod-autoscaling-hpa","aria-hidden":"true"}},[t._v("#")]),t._v(" pod水平自动伸缩 (Horizontal Pod Autoscaling, HPA)")]),t._v(" "),a("p",[t._v("应用的资源使用率通常都有高峰和低谷的时候，如何削峰填谷，提高集群的整体资源利用率，让service中的Pod个数自动调整呢？这就有赖于Horizontal Pod Autoscaling了，顾名思义，使Pod水平自动缩放。这个Object（跟Pod、Deployment一样都是API resource）也是最能体现kubernetes之于传统运维价值的地方，不再需要手动扩容了，终于实现自动化了，还可以自定义指标，没准未来还可以通过人工智能自动进化呢！")]),t._v(" "),a("p",[t._v("HPA属于Kubernetes中的"),a("strong",[t._v("autoscaling")]),t._v(" SIG（Special Interest Group），其下有两个feature：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/kubernetes/features/issues/117",target:"_blank",rel:"noopener noreferrer"}},[t._v("Arbitrary/Custom Metrics in the Horizontal Pod Autoscaler#117"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/kubernetes/features/issues/118",target:"_blank",rel:"noopener noreferrer"}},[t._v("Monitoring Pipeline Metrics HPA API #118"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("Kubernetes自1.2版本引入HPA机制，到1.6版本之前一直是通过kubelet来获取监控指标来判断是否需要扩缩容，1.6版本之后必须通过API server、Heapseter或者kube-aggregator来获取监控指标。")]),t._v(" "),a("h2",{attrs:{id:"准入控制器-admission-controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准入控制器-admission-controller","aria-hidden":"true"}},[t._v("#")]),t._v(" 准入控制器 (Admission Controller)")]),t._v(" "),a("p",[t._v("准入控制器（Admission Controller）位于 API Server 中，在对象被持久化之前，准入控制器拦截对 API Server 的请求，一般用来做身份验证和授权。其中包含两个特殊的控制器：MutatingAdmissionWebhook 和 ValidatingAdmissionWebhook。分别作为配置的变异和验证准入控制 webhook。")]),t._v(" "),a("p",[t._v("变更（Mutating）准入控制：修改请求的对象")]),t._v(" "),a("p",[t._v("验证（Validating）准入控制：验证请求的对象")]),t._v(" "),a("p",[t._v("准入控制器是在 API Server 的启动参数重配置的。一个准入控制器可能属于以上两者中的一种，也可能两者都属于。当请求到达 API Server 的时候首先执行变更准入控制，然后再执行验证准入控制。")]),t._v(" "),a("p",[t._v("我们在部署 Kubernetes 集群的时候都会默认开启一系列准入控制器，如果没有设置这些准入控制器的话可以说你的 Kubernetes 集群就是在裸奔，应该只有集群管理员可以修改集群的准入控制器。")]),t._v(" "),a("h2",{attrs:{id:"service-account"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-account","aria-hidden":"true"}},[t._v("#")]),t._v(" Service Account")]),t._v(" "),a("p",[t._v("Service Account为Pod中的进程提供身份信息。")]),t._v(" "),a("p",[a("strong",[t._v("注意")]),t._v("："),a("strong",[t._v("本文是关于 Service Account 的用户指南，管理指南另见 Service Account 的集群管理指南 。")])]),t._v(" "),a("blockquote",[a("p",[t._v("本文档描述的关于 Service Account 的行为只有当您按照 Kubernetes 项目建议的方式搭建起集群的情况下才有效。您的集群管理员可能在您的集群中有自定义配置，这种情况下该文档可能并不适用。")])]),t._v(" "),a("p",[t._v("当您（真人用户）访问集群（例如使用"),a("code",[t._v("kubectl")]),t._v("命令）时，apiserver 会将您认证为一个特定的 User Account（目前通常是"),a("code",[t._v("admin")]),t._v("，除非您的系统管理员自定义了集群配置）。Pod 容器中的进程也可以与 apiserver 联系。 当它们在联系 apiserver 的时候，它们会被认证为一个特定的 Service Account（例如"),a("code",[t._v("default")]),t._v("）。")]),t._v(" "),a("h3",{attrs:{id:"使用默认的-service-account-访问-api-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用默认的-service-account-访问-api-server","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用默认的 Service Account 访问 API server")]),t._v(" "),a("p",[t._v("当您创建 pod 的时候，如果您没有指定一个 service account，系统会自动得在与该pod 相同的 namespace 下为其指派一个"),a("code",[t._v("default")]),t._v(" service account。如果您获取刚创建的 pod 的原始 json 或 yaml 信息（例如使用"),a("code",[t._v("kubectl get pods/podename -o yaml")]),t._v("命令），您将看到"),a("code",[t._v("spec.serviceAccountName")]),t._v("字段已经被设置为 "),a("code",[t._v("default")]),t._v("。")]),t._v(" "),a("p",[t._v("您可以在 pod 中使用自动挂载的 service account 凭证来访问 API，如 "),a("a",{attrs:{href:"https://kubernetes.io/docs/user-guide/accessing-the-cluster/#accessing-the-api-from-a-pod",target:"_blank",rel:"noopener noreferrer"}},[t._v("Accessing the Cluster"),a("OutboundLink")],1),t._v(" 中所描述。")]),t._v(" "),a("p",[t._v("Service account 是否能够取得访问 API 的许可取决于您使用的 "),a("a",{attrs:{href:"https://kubernetes.io/docs/admin/authorization/#a-quick-note-on-service-accounts",target:"_blank",rel:"noopener noreferrer"}},[t._v("授权插件和策略"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("在 1.6 以上版本中，您可以选择取消为 service account 自动挂载 API 凭证，只需在 service account 中设置 "),a("code",[t._v("automountServiceAccountToken: false")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ServiceAccount\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" build"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("robot\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("automountServiceAccountToken")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),a("p",[t._v("在 1.6 以上版本中，您也可以选择只取消单个 pod 的 API 凭证自动挂载：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("serviceAccountName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" build"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("robot\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("automountServiceAccountToken")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),a("p",[t._v("如果在 pod 和 service account 中同时设置了 "),a("code",[t._v("automountServiceAccountToken")]),t._v(" , pod 设置中的优先级更高。")]),t._v(" "),a("h3",{attrs:{id:"使用多个service-account"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用多个service-account","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用多个Service Account")]),t._v(" "),a("p",[t._v("每个 namespace 中都有一个默认的叫做 "),a("code",[t._v("default")]),t._v(" 的 service account 资源。")]),t._v(" "),a("p",[t._v("您可以使用以下命令列出 namespace 下的所有 serviceAccount 资源。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl get serviceAccounts\nNAME      SECRETS    AGE\ndefault   1          1d\n")])])]),a("p",[t._v("您可以像这样创建一个 ServiceAccount 对象：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /tmp/serviceaccount.yaml "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("EOF\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: build-robot\nEOF")]),t._v("\n$ kubectl create -f /tmp/serviceaccount.yaml\nserviceaccount "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"build-robot"')]),t._v(" created\n")])])]),a("p",[t._v("如果您看到如下的 service account 对象的完整输出信息：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl get serviceaccounts/build-robot -o yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  creationTimestamp: 2015-06-16T00:12:59Z\n  name: build-robot\n  namespace: default\n  resourceVersion: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"272500"')]),t._v("\n  selfLink: /api/v1/namespaces/default/serviceaccounts/build-robot\n  uid: 721ab723-13bc-11e5-aec2-42010af0021e\nsecrets:\n- name: build-robot-token-bvbk5\n")])])]),a("p",[t._v("然后您将看到有一个 token 已经被自动创建，并被 service account 引用。")]),t._v(" "),a("p",[t._v("您可以使用授权插件来 "),a("a",{attrs:{href:"https://kubernetes.io/docs/admin/authorization/#a-quick-note-on-service-accounts",target:"_blank",rel:"noopener noreferrer"}},[t._v("设置 service account 的权限"),a("OutboundLink")],1),t._v(" 。")]),t._v(" "),a("p",[t._v("设置非默认的 service account，只需要在 pod 的"),a("code",[t._v("spec.serviceAccountName")]),t._v(" 字段中将name设置为您想要用的 service account 名字即可。")]),t._v(" "),a("p",[t._v("在 pod 创建之初 service account 就必须已经存在，否则创建将被拒绝。")]),t._v(" "),a("p",[t._v("您不能更新已创建的 pod 的 service account。")]),t._v(" "),a("p",[t._v("您可以清理 service account，如下所示：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl delete serviceaccount/build-robot\n")])])]),a("h3",{attrs:{id:"手动创建-service-account-的-api-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动创建-service-account-的-api-token","aria-hidden":"true"}},[t._v("#")]),t._v(" 手动创建 service account 的 API token")]),t._v(" "),a("p",[t._v("假设我们已经有了一个如上文提到的名为 ”build-robot“ 的 service account，我们手动创建一个新的 secret。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /tmp/build-robot-secret.yaml "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: build-robot-secret\n  annotations:\n    kubernetes.io/service-account.name: build-robot\ntype: kubernetes.io/service-account-token\nEOF")]),t._v("\n$ kubectl create -f /tmp/build-robot-secret.yaml\nsecret "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"build-robot-secret"')]),t._v(" created\n")])])]),a("p",[t._v("现在您可以确认下新创建的 secret 取代了 “build-robot” 这个 service account 原来的 API token。")]),t._v(" "),a("p",[t._v("所有已不存在的 service account 的 token 将被 token controller 清理掉。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl describe secrets/build-robot-secret\nName:   build-robot-secret\nNamespace:  default\nLabels:   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nAnnotations:  kubernetes.io/service-account.name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("build-robot,kubernetes.io/service-account.uid"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("870ef2a5-35cf-11e5-8d06-005056b45392\n\nType: kubernetes.io/service-account-token\n\nData\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\nca.crt: 1220 bytes\ntoken: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nnamespace: 7 bytes\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("注意")]),t._v("：该内容中的"),a("code",[t._v("token")]),t._v("被省略了。")])]),t._v(" "),a("h3",{attrs:{id:"为-service-account-添加-imagepullsecret"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为-service-account-添加-imagepullsecret","aria-hidden":"true"}},[t._v("#")]),t._v(" 为 service account 添加 ImagePullSecret")]),t._v(" "),a("p",[t._v("首先，创建一个 imagePullSecret，详见"),a("a",{attrs:{href:"https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("然后，确认已创建。如：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl get secrets myregistrykey\nNAME             TYPE                              DATA    AGE\nmyregistrykey    kubernetes.io/.dockerconfigjson   1       1d\n")])])]),a("p",[t._v("然后，修改 namespace 中的默认 service account 使用该 secret 作为 imagePullSecret。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("kubectl patch serviceaccount default -p "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"imagePullSecrets": [{"name": "myregistrykey"}]}\'')]),t._v("\n")])])]),a("p",[t._v("Vi 交互过程中需要手动编辑：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl get serviceaccounts default -o yaml "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ./sa.yaml\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" sa.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  creationTimestamp: 2015-08-07T22:02:39Z\n  name: default\n  namespace: default\n  resourceVersion: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"243024"')]),t._v("\n  selfLink: /api/v1/namespaces/default/serviceaccounts/default\n  uid: 052fb0f4-3d50-11e5-b066-42010af0d7b6\nsecrets:\n- name: default-token-uudge\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" sa.yaml\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("editor session not shown"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("delete line with key "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"resourceVersion"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("add lines with "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"imagePullSecret:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" sa.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  creationTimestamp: 2015-08-07T22:02:39Z\n  name: default\n  namespace: default\n  selfLink: /api/v1/namespaces/default/serviceaccounts/default\n  uid: 052fb0f4-3d50-11e5-b066-42010af0d7b6\nsecrets:\n- name: default-token-uudge\nimagePullSecrets:\n- name: myregistrykey\n$ kubectl replace serviceaccount default -f ./sa.yaml\nserviceaccounts/default\n")])])]),a("p",[t._v("现在，所有当前 namespace 中新创建的 pod 的 spec 中都会增加如下内容：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("imagePullSecrets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" myregistrykey\n")])])]),a("h2",{attrs:{id:"网络策略-network-policy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络策略-network-policy","aria-hidden":"true"}},[t._v("#")]),t._v(" 网络策略 (Network Policy)")]),t._v(" "),a("p",[t._v("网络策略说明一组 "),a("code",[t._v("Pod")]),t._v(" 之间是如何被允许互相通信，以及如何与其它网络 Endpoint 进行通信。 "),a("code",[t._v("NetworkPolicy")]),t._v(" 资源使用标签来选择 "),a("code",[t._v("Pod")]),t._v("，并定义了一些规则，这些规则指明允许什么流量进入到选中的 "),a("code",[t._v("Pod")]),t._v(" 上。")]),t._v(" "),a("p",[t._v("网络策略通过网络插件来实现，所以必须使用一种支持 NetworkPolicy 的网络方案（如 calico）—— 非 Controller 创建的资源，是不起作用的。")]),t._v(" "),a("h3",{attrs:{id:"隔离的与未隔离的-pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隔离的与未隔离的-pod","aria-hidden":"true"}},[t._v("#")]),t._v(" 隔离的与未隔离的 Pod")]),t._v(" "),a("p",[t._v("默认 Pod 是未隔离的，它们可以从任何的源接收请求。 具有一个可以选择 Pod 的网络策略后，Pod 就会变成隔离的。 一旦 Namespace 中配置的网络策略能够选择一个特定的 Pod，这个 Pod 将拒绝任何该网络策略不允许的连接。（Namespace 中其它未被网络策略选中的 Pod 将继续接收所有流量）")]),t._v(" "),a("h3",{attrs:{id:"networkpolicy-资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#networkpolicy-资源","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("NetworkPolicy")]),t._v(" 资源")]),t._v(" "),a("p",[t._v("下面是一个 "),a("code",[t._v("NetworkPolicy")]),t._v(" 的例子：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" networking.k8s.io/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NetworkPolicy\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("network"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("policy\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" default\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("podSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("matchLabels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("role")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" db\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("policyTypes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Ingress\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Egress\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ingress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ipBlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cidr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 172.17.0.0/16\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("except")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 172.17.1.0/24\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespaceSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("matchLabels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("project")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" myproject\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("podSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("matchLabels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("role")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" frontend\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("protocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TCP\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("egress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("to")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ipBlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cidr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10.0.0.0/24\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("protocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TCP\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5978")]),t._v("\n")])])]),a("p",[a("em",[t._v("将上面配置 POST 到 API Server 将不起任何作用，除非选择的网络方案支持网络策略。")])]),t._v(" "),a("p",[a("strong",[t._v("必选字段")]),t._v("：像所有其它 Kubernetes 配置一样， "),a("code",[t._v("NetworkPolicy")]),t._v(" 需要 "),a("code",[t._v("apiVersion")]),t._v("、"),a("code",[t._v("kind")]),t._v(" 和 "),a("code",[t._v("metadata")]),t._v("这三个字段，关于如何使用配置文件的基本信息，可以查看 "),a("a",{attrs:{href:"https://kubernetes.io/docs/user-guide/configuring-containers",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://kubernetes.io/docs/user-guide/working-with-resources",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("spec")]),t._v("："),a("code",[t._v("NetworkPolicy")]),t._v(" "),a("a",{attrs:{href:"https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",target:"_blank",rel:"noopener noreferrer"}},[t._v("spec"),a("OutboundLink")],1),t._v(" 具有在给定 Namespace 中定义特定网络的全部信息。")]),t._v(" "),a("p",[a("strong",[t._v("podSelector")]),t._v("：每个 "),a("code",[t._v("NetworkPolicy")]),t._v(" 包含一个 "),a("code",[t._v("podSelector")]),t._v("，它可以选择一组应用了网络策略的 Pod。由于 "),a("code",[t._v("NetworkPolicy")]),t._v(" 当前只支持定义 "),a("code",[t._v("ingress")]),t._v(" 规则，这个 "),a("code",[t._v("podSelector")]),t._v(" 实际上为该策略定义了一组 “目标Pod”。示例中的策略选择了标签为 “role=db” 的 Pod。一个空的 "),a("code",[t._v("podSelector")]),t._v(" 选择了该 Namespace 中的所有 Pod。")]),t._v(" "),a("p",[a("strong",[t._v("ingress")]),t._v("：每个"),a("code",[t._v("NetworkPolicy")]),t._v(" 包含了一个白名单 "),a("code",[t._v("ingress")]),t._v(" 规则列表。每个规则只允许能够匹配上 "),a("code",[t._v("from")]),t._v("和 "),a("code",[t._v("ports")]),t._v("配置段的流量。示例策略包含了单个规则，它从这两个源中匹配在单个端口上的流量，第一个是通过"),a("code",[t._v("namespaceSelector")]),t._v(" 指定的，第二个是通过 "),a("code",[t._v("podSelector")]),t._v(" 指定的。")]),t._v(" "),a("p",[a("strong",[t._v("egress")]),t._v("：每个"),a("code",[t._v("NetworkPolicy")]),t._v(" 包含了一个白名单 "),a("code",[t._v("ingress")]),t._v(" 规则列表。每个规则只允许能够匹配上 "),a("code",[t._v("to")]),t._v(" 和 "),a("code",[t._v("ports")]),t._v("配置段的流量。示例策略包含了单个规则，它匹配目的地 "),a("code",[t._v("10.0.0.0/24")]),t._v(" 单个端口的流量。")]),t._v(" "),a("p",[t._v("因此，上面示例的 NetworkPolicy：")]),t._v(" "),a("ol",[a("li",[t._v("在 “default” Namespace中 隔离了标签 “role=db” 的 Pod（如果他们还没有被隔离）")]),t._v(" "),a("li",[t._v("在 “default” Namespace中，允许任何具有 “role=frontend” 的 Pod，IP 范围在 172.17.0.0–172.17.0.255 和 172.17.2.0–172.17.255.255（整个 172.17.0.0/16 段， 172.17.1.0/24 除外）连接到标签为 “role=db” 的 Pod 的 TCP 端口 6379")]),t._v(" "),a("li",[t._v("允许在 Namespace 中任何具有标签 “project=myproject” ，IP范围在10.0.0.0/24段的 Pod，连接到 “default” Namespace 中标签为 “role=db” 的 Pod 的 TCP 端口 5978")])]),t._v(" "),a("h3",{attrs:{id:"默认策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认策略","aria-hidden":"true"}},[t._v("#")]),t._v(" 默认策略")]),t._v(" "),a("p",[t._v("通过创建一个可以选择所有 Pod 但不允许任何流量的 NetworkPolicy，你可以为一个 Namespace 创建一个 “默认的” 隔离策略，如下所示：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" networking.k8s.io/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NetworkPolicy\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("deny\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("podSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n")])])]),a("p",[t._v("这确保了即使是没有被任何 NetworkPolicy 选中的 Pod，将仍然是被隔离的。")]),t._v(" "),a("p",[t._v("可选地，在 Namespace 中，如果你想允许所有的流量进入到所有的 Pod（即使已经添加了某些策略，使一些 Pod 被处理为 “隔离的”），你可以通过创建一个策略来显式地指定允许所有流量：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" networking.k8s.io/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NetworkPolicy\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" allow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("all\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("podSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ingress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储","aria-hidden":"true"}},[t._v("#")]),t._v(" 存储")]),t._v(" "),a("h3",{attrs:{id:"存储卷-volume"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储卷-volume","aria-hidden":"true"}},[t._v("#")]),t._v(" 存储卷 (Volume)")]),t._v(" "),a("p",[t._v("Kubernetes集群中的存储卷跟Docker的存储卷有些类似，只不过Docker的存储卷作用范围为一个容器，而Kubernetes的存储卷的生命周期和作用范围是一个Pod。每个Pod中声明的存储卷由Pod中的所有容器共享。Kubernetes支持非常多的存储卷类型，特别的，支持多种公有云平台的存储，包括AWS，Google和Azure云；支持多种分布式存储包括GlusterFS和Ceph；也支持较容易使用的主机本地目录emptyDir, hostPath和NFS。Kubernetes还支持使用Persistent Volume Claim即PVC这种逻辑存储，使用这种存储，使得存储的使用者可以忽略后台的实际存储技术（例如AWS，Google或GlusterFS和Ceph），而将有关存储实际技术的配置交给存储管理员通过Persistent Volume来配置。")]),t._v(" "),a("p",[t._v("详见 "),a("a",{attrs:{href:"./Volume"}},[t._v("Kubernetes 核心概念之 Volume 存储数据卷")])]),t._v(" "),a("h3",{attrs:{id:"持久存储卷（persistent-volume，pv）和持久存储卷声明（persistent-volume-claim，pvc）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持久存储卷（persistent-volume，pv）和持久存储卷声明（persistent-volume-claim，pvc）","aria-hidden":"true"}},[t._v("#")]),t._v(" 持久存储卷（Persistent Volume，PV）和持久存储卷声明（Persistent Volume Claim，PVC）")]),t._v(" "),a("p",[t._v("PV和PVC使得Kubernetes集群具备了存储的逻辑抽象能力，使得在配置Pod的逻辑里可以忽略对实际后台存储技术的配置，而把这项配置的工作交给PV的配置者，即集群的管理者。存储的PV和PVC的这种关系，跟计算的Node和Pod的关系是非常类似的；PV和Node是资源的提供者，根据集群的基础设施变化而变化，由Kubernetes集群管理员配置；而PVC和Pod是资源的使用者，根据业务服务的需求变化而变化，有Kubernetes集群的使用者即服务的管理员来配置。")]),t._v(" "),a("p",[t._v("详见 "),a("a",{attrs:{href:"./Volume"}},[t._v("Kubernetes 核心概念之 Volume 存储数据卷")])]),t._v(" "),a("h3",{attrs:{id:"密钥对象（secret）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#密钥对象（secret）","aria-hidden":"true"}},[t._v("#")]),t._v(" 密钥对象（Secret）")]),t._v(" "),a("p",[t._v("Secret是用来保存和传递密码、密钥、认证凭证这些敏感信息的对象。使用Secret的好处是可以避免把敏感信息明文写在配置文件里。在Kubernetes集群中配置和使用服务不可避免的要用到各种敏感信息实现登录、认证等功能，例如访问AWS存储的用户名密码。为了避免将类似的敏感信息明文写在所有需要使用的配置文件中，可以将这些信息存入一个Secret对象，而在配置文件中通过Secret对象引用这些敏感信息。这种方式的好处包括：意图明确，避免重复，减少暴漏机会。")]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://blog.csdn.net/dream_broken/article/details/53128595",target:"_blank",rel:"noopener noreferrer"}},[t._v("kubenetes学习3--Namespace命名空间"),a("OutboundLink")],1)])])],1)},[],!1,null,null,null);e.default=n.exports}}]);