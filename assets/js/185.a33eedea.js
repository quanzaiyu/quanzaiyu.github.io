(window.webpackJsonp=window.webpackJsonp||[]).push([[185],{529:function(t,s,a){"use strict";a.r(s);var e={props:["slot-key"],mounted(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},n=a(0),i=Object(n.a)(e,function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.slotKey}},[a("h1",{attrs:{id:"git-状态查看"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-状态查看","aria-hidden":"true"}},[t._v("#")]),t._v(" git 状态查看")]),t._v(" "),a("h2",{attrs:{id:"git-status"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-status","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("git status")])]),t._v(" "),a("p",[a("code",[t._v("git status")]),t._v(" 命令可以让我们时刻掌握仓库当前的状态，比如我们修改了一个名叫 "),a("code",[t._v("readme.txt")]),t._v(" 的文件，使用 "),a("code",[t._v("git status")]),t._v(" 可以看到已修改状态:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),a("span",{attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# Changes not staged for commit:")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('#   (use "git add <file>..." to update what will be committed)')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('#   (use "git checkout -- <file>..." to discard changes in working directory)')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("#    modified:   readme.txt")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("#")]),t._v("\nno changes added to commit "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" and/or "),a("span",{attrs:{class:"token string"}},[t._v('"git commit -a"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("提示 "),a("code",[t._v("Changes not staged for commit:")]),t._v(" ，修改还未提交。")]),t._v(" "),a("p",[t._v("提示 "),a("code",[t._v("modified: readme.txt")]),t._v("，说明 readme.txt 已被修改。")]),t._v(" "),a("h2",{attrs:{id:"git-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-diff","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("git diff")])]),t._v(" "),a("p",[t._v("虽然 Git 告诉我们 readme.txt 被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的 readme.txt，所以，需要用 "),a("code",[t._v("git diff")]),t._v(" 这个命令看看：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("diff")]),t._v(" readme.txt \n"),a("span",{attrs:{class:"token function"}},[t._v("diff")]),t._v(" --git a/readme.txt b/readme.txt\nindex 46d49bf"),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("9247db6 100644\n--- a/readme.txt\n+++ b/readme.txt\n@@ -1,2 +1,2 @@\n-Git is a version control system.\n+Git is a distributed version control system.\n Git is "),a("span",{attrs:{class:"token function"}},[t._v("free")]),t._v(" software.\n")])])]),a("p",[a("code",[t._v("git diff")]),t._v(" 顾名思义就是查看 difference，显示的格式正是 Unix 通用的 diff 格式，可以从上面的命令输出看到，我们在第一行添加了一个“distributed”单词。")]),t._v(" "),a("p",[t._v("在 add 之后，commit 之前使用 "),a("code",[t._v("git status")]),t._v(" 可以看到 :")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),a("span",{attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('#   (use "git reset HEAD <file>..." to unstage)')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("#       modified:   readme.txt")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("#")]),t._v("\n")])])]),a("p",[t._v("提示 "),a("code",[t._v("Changes to be committed:")]),t._v(" ，修改将被提交。")]),t._v(" "),a("p",[t._v("提交后，我们再用 "),a("code",[t._v("git status")]),t._v(" 命令看看仓库的当前状态：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),a("span",{attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\nnothing to commit "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("working directory clean"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Git 告诉我们当前没有需要提交的修改，而且，工作目录是干净（working directory clean）的。")]),t._v(" "),a("h2",{attrs:{id:"文件的三种状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件的三种状态","aria-hidden":"true"}},[t._v("#")]),t._v(" 文件的三种状态")]),t._v(" "),a("p",[t._v("对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。")]),t._v(" "),a("p",[t._v("由此我们看到 Git 管理项目时，文件流转的三个工作区域：Git 的工作目录，暂存区域，以及本地仓库。")]),t._v(" "),a("imgLink",{attrs:{src:"date/20181119/001.png"}})],1)},[],!1,null,null,null);i.options.__file="Status.md";s.default=i.exports}}]);