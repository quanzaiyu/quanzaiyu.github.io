(window.webpackJsonp=window.webpackJsonp||[]).push([[446],{1009:function(t,a,s){"use strict";s.r(a);var n={props:["slot-key"],mounted(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},e=s(0),o=Object(e.a)(n,function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.slotKey}},[s("h1",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Number")]),t._v(" （数字）\n"),s("ul",[s("li",[t._v("整数(int): 1，100，-8080，0，0xff00，0xa5b4c3d2")]),t._v(" "),s("li",[t._v("浮点数(float): 1.23，3.14，-9.01，1.23e9，1.2e-5")]),t._v(" "),s("li",[t._v("复数(complex): 1 + 2j、 1.1 + 2.2j")])])]),t._v(" "),s("li",[s("strong",[t._v("String")]),t._v(" （字符串str）: 'abc'，\"xyz\"，'I'm \"OK\"!'")]),t._v(" "),s("li",[s("strong",[t._v("Boolean")]),t._v(" （布尔值bool）: True、False（注意首字母是大写）")]),t._v(" "),s("li",[s("strong",[t._v("None")]),t._v(" （空值）: None")]),t._v(" "),s("li",[s("strong",[t._v("List")]),t._v(" （列表list）")]),t._v(" "),s("li",[s("strong",[t._v("Tuple")]),t._v(" （元组tuple）")]),t._v(" "),s("li",[s("strong",[t._v("Set")]),t._v(" （集合set）")]),t._v(" "),s("li",[s("strong",[t._v("Dictionary")]),t._v(" （字典dict）")])]),t._v(" "),s("h2",{attrs:{id:"布尔值-bool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布尔值-bool","aria-hidden":"true"}},[t._v("#")]),t._v(" 布尔值(bool)")]),t._v(" "),s("p",[t._v("布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），布尔值可以用and、or和not运算。")]),t._v(" "),s("h3",{attrs:{id:"转化为布尔值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转化为布尔值","aria-hidden":"true"}},[t._v("#")]),t._v(" 转化为布尔值")]),t._v(" "),s("p",[t._v("使用转换函数 "),s("code",[t._v("bool()")]),t._v(" 即可将其他数据类型的对象转化为布尔值")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("bool")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n")])])]),s("h2",{attrs:{id:"空值-none"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空值-none","aria-hidden":"true"}},[t._v("#")]),t._v(" 空值(None)")]),t._v(" "),s("p",[t._v("空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。")]),t._v(" "),s("h2",{attrs:{id:"整数-int"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数-int","aria-hidden":"true"}},[t._v("#")]),t._v(" 整数(int)")]),t._v(" "),s("p",[t._v("Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。")]),t._v(" "),s("p",[t._v("计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。")]),t._v(" "),s("h3",{attrs:{id:"转化为int"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转化为int","aria-hidden":"true"}},[t._v("#")]),t._v(" 转化为int")]),t._v(" "),s("p",[t._v("使用转换函数 "),s("code",[t._v("int()")]),t._v(" 即可将其他数据类型的对象转化为整数")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1.2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token boolean"}},[t._v("False")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'4'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token string"}},[t._v("'a'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'b'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'c'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nTraceback "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("most recent call last"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  File "),s("span",{attrs:{class:"token string"}},[t._v('"<stdin>"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" line "),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("module"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\nTypeError"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" argument must be a string"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),s("span",{attrs:{class:"token builtin"}},[t._v("bytes")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("like "),s("span",{attrs:{class:"token builtin"}},[t._v("object")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("or")]),t._v(" a number"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'set'")]),t._v("\n")])])]),s("p",[t._v("注意到，只能将一个 string，bytes-like object，number转化为int，否则会报错。")]),t._v(" "),s("h2",{attrs:{id:"浮点数-float"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浮点数-float","aria-hidden":"true"}},[t._v("#")]),t._v(" 浮点数(float)")]),t._v(" "),s("p",[t._v("浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。")]),t._v(" "),s("p",[t._v("整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。")]),t._v(" "),s("h3",{attrs:{id:"转化为float"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转化为float","aria-hidden":"true"}},[t._v("#")]),t._v(" 转化为float")]),t._v(" "),s("p",[t._v("使用转换函数 "),s("code",[t._v("float()")]),t._v(" 即可将其他数据类型的对象转化为浮点数")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("float")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'1.2222'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token number"}},[t._v("1.2222")]),t._v("\n"),s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("float")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token boolean"}},[t._v("False")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token number"}},[t._v("0.0")]),t._v("\n")])])]),s("h2",{attrs:{id:"复数-complex"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复数-complex","aria-hidden":"true"}},[t._v("#")]),t._v(" 复数(complex)")]),t._v(" "),s("p",[t._v("python的强大之处在于其可以直接支持复数的运算和操作，在做科学计算时很有帮助，本人并不深入研究复数，就不展开说明。")]),t._v(" "),s("h3",{attrs:{id:"转化为complex"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转化为complex","aria-hidden":"true"}},[t._v("#")]),t._v(" 转化为complex")]),t._v(" "),s("p",[t._v("使用转换函数 "),s("code",[t._v("complex()")]),t._v(" 即可将其他数据类型的对象转化为复数")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("complex")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token operator"}},[t._v("+")]),s("span",{attrs:{class:"token number"}},[t._v("0j")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])},[],!1,null,null,null);o.options.__file="Type.md";a.default=o.exports}}]);