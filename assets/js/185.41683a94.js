(window.webpackJsonp=window.webpackJsonp||[]).push([[185],{532:function(t,e,a){"use strict";a.r(e);var s={props:["slot-key"],mounted(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},i=a(0),n=Object(i.a)(s,function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.slotKey}},[a("h1",{attrs:{id:"git-状态查看"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-状态查看","aria-hidden":"true"}},[t._v("#")]),t._v(" git 状态查看")]),t._v(" "),a("p",[a("code",[t._v("git status")]),t._v(" 命令可以让我们时刻掌握仓库当前的状态，比如我们修改了一个名叫 "),a("code",[t._v("readme.txt")]),t._v(" 的文件，使用 "),a("code",[t._v("git status")]),t._v(" 可以看到已修改状态 :")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git status\n# On branch master\n# Changes not staged for commit:\n#   (use "git add <file>..." to update what will be committed)\n#   (use "git checkout -- <file>..." to discard changes in working directory)\n#\n#    modified:   readme.txt\n#\nno changes added to commit (use "git add" and/or "git commit -a")\n')])])]),a("p",[t._v("提示 "),a("code",[t._v("Changes not staged for commit:")]),t._v(" ，修改还未提交。")]),t._v(" "),a("p",[t._v("提示 "),a("code",[t._v("modified: readme.txt")]),t._v("，说明 readme.txt 已被修改。")]),t._v(" "),a("p",[t._v("虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令看看：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git diff readme.txt \ndiff --git a/readme.txt b/readme.txt\nindex 46d49bf..9247db6 100644\n--- a/readme.txt\n+++ b/readme.txt\n@@ -1,2 +1,2 @@\n-Git is a version control system.\n+Git is a distributed version control system.\n Git is free software.\n")])])]),a("p",[a("code",[t._v("git diff")]),t._v(" 顾名思义就是查看 difference，显示的格式正是 Unix 通用的 diff 格式，可以从上面的命令输出看到，我们在第一行添加了一个“distributed”单词。")]),t._v(" "),a("p",[t._v("在 add 之后，commit 之前使用 "),a("code",[t._v("git status")]),t._v(" 可以看到 :")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git status\n# On branch master\n# Changes to be committed:\n#   (use "git reset HEAD <file>..." to unstage)\n#\n#       modified:   readme.txt\n#\n')])])]),a("p",[t._v("提示 "),a("code",[t._v("Changes to be committed:")]),t._v(" ，修改将被提交。")]),t._v(" "),a("p",[t._v("提交后，我们再用 "),a("code",[t._v("git status")]),t._v(" 命令看看仓库的当前状态：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git status\n# On branch master\nnothing to commit (working directory clean)\n")])])]),a("p",[t._v("Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working directory clean）的。")])])},[],!1,null,null,null);n.options.__file="Status.md";e.default=n.exports}}]);