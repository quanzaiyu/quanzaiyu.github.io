(window.webpackJsonp=window.webpackJsonp||[]).push([[437],{938:function(t,e,a){"use strict";a.r(e);var s=a(1),r=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"kubernetes-核心概念、架构及原理分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-核心概念、架构及原理分析","aria-hidden":"true"}},[t._v("#")]),t._v(" Kubernetes 核心概念、架构及原理分析")]),t._v(" "),a("h2",{attrs:{id:"kubernetes总体架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes总体架构","aria-hidden":"true"}},[t._v("#")]),t._v(" Kubernetes总体架构")]),t._v(" "),a("h3",{attrs:{id:"master和node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master和node","aria-hidden":"true"}},[t._v("#")]),t._v(" Master和Node")]),t._v(" "),a("p",[t._v("Kubernetes将集群中的机器划分为一个Master节点和一群工作节点（Node）。其中，Master节点上运行着集群管理相关的一组进程etcd、API Server、Controller Manager、Scheduler，后三个组件构成了Kubernetes的总控中心，这些进程实现了整个集群的资源管理、Pod调度、弹性伸缩、安全控制、系统监控和纠错等管理功能，并且全都是自动完成。在每个Node上运行Kubelet、Proxy、Docker daemon三个组件，负责对本节点上的Pod的生命周期进行管理，以及实现服务代理的功能。")]),t._v(" "),a("h3",{attrs:{id:"etcd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etcd","aria-hidden":"true"}},[t._v("#")]),t._v(" etcd")]),t._v(" "),a("p",[t._v("用于持久化存储集群中所有的资源对象，如Node、Service、Pod、RC、Namespace等；API Server提供了操作etcd的封装接口API，这些API基本上都是集群中资源对象的增删改查及监听资源变化的接口。")]),t._v(" "),a("h3",{attrs:{id:"api-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-server","aria-hidden":"true"}},[t._v("#")]),t._v(" API Server")]),t._v(" "),a("p",[t._v("提供了资源对象的唯一操作入口，其他所有组件都必须通过它提供的API来操作资源数据，通过对相关的资源数据“全量查询”+“变化监听”，这些组件可以很“实时”地完成相关的业务功能。")]),t._v(" "),a("p",[t._v("API Server内部有一套完备的安全机制，包括认证、授权和准入控制等相关模块")]),t._v(" "),a("h3",{attrs:{id:"controller-manager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#controller-manager","aria-hidden":"true"}},[t._v("#")]),t._v(" Controller Manager")]),t._v(" "),a("p",[t._v("集群内部的管理控制中心，其主要目的是实现Kubernetes集群的故障检测和恢复的自动化工作，比如根据RC的定义完成Pod的复制或移除，以确保Pod实例数符合RC副本的定义；根据Service与Pod的管理关系，完成服务的Endpoints对象的创建和更新；其他诸如Node的发现、管理和状态监控、死亡容器所占磁盘空间及本地缓存的镜像文件的清理等工作也是由Controller Manager完成的。")]),t._v(" "),a("h3",{attrs:{id:"scheduler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scheduler","aria-hidden":"true"}},[t._v("#")]),t._v(" Scheduler")]),t._v(" "),a("p",[t._v("集群中的调度器，负责Pod在集群节点中的调度分配。")]),t._v(" "),a("h3",{attrs:{id:"kubelet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubelet","aria-hidden":"true"}},[t._v("#")]),t._v(" Kubelet")]),t._v(" "),a("p",[t._v("负责本Node节点上的Pod的创建、修改、监控、删除等全生命周期管理，同时Kubelet定时“上报”本Node的状态信息到API Server里。")]),t._v(" "),a("h3",{attrs:{id:"proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy","aria-hidden":"true"}},[t._v("#")]),t._v(" Proxy")]),t._v(" "),a("p",[t._v("实现了Service的代理与软件模式的负载均衡器。")]),t._v(" "),a("p",[t._v("客户端通过Kubectl命令行工具或Kubectl Proxy来访问Kubernetes系统，在Kubernetes集群内部的客户端可以直接使用Kuberctl命令管理集群。Kubectl Proxy是API Server的一个反向代理，在Kubernetes集群外部的客户端可以通过Kubernetes Proxy来访问API Server。")]),t._v(" "),a("h2",{attrs:{id:"资源类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 资源类型")]),t._v(" "),a("p",[t._v("下表列出的是 kubernetes 中所有支持的类型和缩写的别名。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("资源类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("缩写别名")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("clusters")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("componentstatuses")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("cs")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("configmaps")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("cm")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("daemonsets")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ds")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("deployments")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("deploy")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("endpoints")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ep")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("event")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ev")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("horizontalpodautoscalers")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("hpa")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ingresses")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ing")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("jobs")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("limitranges")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("limits")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("namespaces")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ns")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("networkpolicies")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("nodes")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("no")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("statefulsets")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("persistentvolumeclaims")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("pvc")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("persistentvolumes")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("pv")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("pods")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("po")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("podsecuritypolicies")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("psp")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("podtemplates")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("replicasets")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("rs")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("replicationcontrollers")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("rc")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("resourcequotas")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("quota")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("cronjob")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("secrets")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("serviceaccount")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("sa")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("services")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("svc")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("storageclasses")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("thirdpartyresources")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})])])]),t._v(" "),a("h3",{attrs:{id:"资源对象分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源对象分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 资源对象分类")]),t._v(" "),a("p",[t._v("我将它们简单的分类为以下几种资源对象：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("类别")]),t._v(" "),a("th",[t._v("名称")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("资源对象")]),t._v(" "),a("td",[t._v("Pod、ReplicaSet、ReplicationController、Deployment、StatefulSet、DaemonSet、Job、CronJob、HorizontalPodAutoscaling、Node、Namespace、Service、Ingress、Label、CustomResourceDefinition")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("存储对象")]),t._v(" "),a("td",[t._v("Volume、PersistentVolume、Secret、ConfigMap")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("策略对象")]),t._v(" "),a("td",[t._v("SecurityContext、ResourceQuota、LimitRange")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("身份对象")]),t._v(" "),a("td",[t._v("ServiceAccount、Role、ClusterRole")])])])]),t._v(" "),a("h3",{attrs:{id:"格式化输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#格式化输出","aria-hidden":"true"}},[t._v("#")]),t._v(" 格式化输出")]),t._v(" "),a("p",[t._v("要以特定的格式向终端窗口输出详细信息，可以在 "),a("code",[t._v("kubectl")]),t._v(" 命令中添加 "),a("code",[t._v("-o")]),t._v(" 或者 "),a("code",[t._v("-output")]),t._v(" 标志。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("输出格式")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("-o=custom-columns=<spec>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("使用逗号分隔的自定义列列表打印表格")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("-o=custom-columns-file=<filename>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("使用 文件中的自定义列模板打印表格")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("-o=json")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("输出 JSON 格式的 API 对象")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("-o=jsonpath=<template>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("打印 "),a("a",{attrs:{href:"https://kubernetes.io/docs/user-guide/jsonpath",target:"_blank",rel:"noopener noreferrer"}},[t._v("jsonpath"),a("OutboundLink")],1),t._v(" 表达式中定义的字段")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("-o=jsonpath-file=<filename>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("打印由 文件中的 "),a("a",{attrs:{href:"https://kubernetes.io/docs/user-guide/jsonpath",target:"_blank",rel:"noopener noreferrer"}},[t._v("jsonpath"),a("OutboundLink")],1),t._v(" 表达式定义的字段")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("-o=name")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("仅打印资源名称")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("-o=wide")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("以纯文本格式输出任何附加信息，对于 Pod ，包含节点名称")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("-o=yaml")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("输出 YAML 格式的 API 对象")])])])]),t._v(" "),a("h3",{attrs:{id:"kubectl-详细输出和调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubectl-详细输出和调试","aria-hidden":"true"}},[t._v("#")]),t._v(" Kubectl 详细输出和调试")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("-v")]),t._v(" 或 "),a("code",[t._v("--v")]),t._v(" 标志跟着一个整数来指定日志级别。"),a("a",{attrs:{href:"https://github.com/kubernetes/community/blob/master/contributors/devel/logging.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v(" 描述了通用的 kubernetes 日志约定和相关的日志级别。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("详细等级")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--v=0")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("总是对操作人员可见。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--v=1")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("合理的默认日志级别，如果您不需要详细输出。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--v=2")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("可能与系统的重大变化相关的，有关稳定状态的信息和重要的日志信息。这是对大多数系统推荐的日志级别。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--v=3")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("有关更改的扩展信息。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--v=4")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("调试级别详细输出。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--v=6")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示请求的资源。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--v=7")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示HTTP请求的header。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("--v=8")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示HTTP请求的内容。")])])])]),t._v(" "),a("h3",{attrs:{id:"理解-kubernetes-中的对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解-kubernetes-中的对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 理解 kubernetes 中的对象")]),t._v(" "),a("p",[t._v("在 Kubernetes 系统中，"),a("em",[t._v("Kubernetes 对象")]),t._v(" 是持久化的条目。Kubernetes 使用这些条目去表示整个集群的状态。特别地，它们描述了如下信息：")]),t._v(" "),a("ul",[a("li",[t._v("什么容器化应用在运行（以及在哪个 Node 上）")]),t._v(" "),a("li",[t._v("可以被应用使用的资源")]),t._v(" "),a("li",[t._v("关于应用如何表现的策略，比如重启策略、升级策略，以及容错策略")])]),t._v(" "),a("p",[t._v("Kubernetes 对象是 “目标性记录” —— 一旦创建对象，Kubernetes 系统将持续工作以确保对象存在。通过创建对象，可以有效地告知 Kubernetes 系统，所需要的集群工作负载看起来是什么样子的，这就是 Kubernetes 集群的 "),a("strong",[t._v("期望状态")]),t._v("。")]),t._v(" "),a("p",[t._v("与 Kubernetes 对象工作 —— 是否创建、修改，或者删除 —— 需要使用 "),a("a",{attrs:{href:"https://git.k8s.io/community/contributors/devel/api-conventions.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes API"),a("OutboundLink")],1),t._v("。当使用 "),a("code",[t._v("kubectl")]),t._v(" 命令行接口时，比如，CLI 会使用必要的 Kubernetes API 调用，也可以在程序中直接使用 Kubernetes API。为了实现该目标，Kubernetes 当前提供了一个 "),a("code",[t._v("golang")]),t._v(" "),a("a",{attrs:{href:"https://github.com/kubernetes/client-go",target:"_blank",rel:"noopener noreferrer"}},[t._v("客户端库"),a("OutboundLink")],1),t._v(" ，其它语言库（例如"),a("a",{attrs:{href:"https://github.com/kubernetes-incubator/client-python",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python"),a("OutboundLink")],1),t._v("）也正在开发中。")]),t._v(" "),a("h3",{attrs:{id:"对象-spec-与状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象-spec-与状态","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象 Spec 与状态")]),t._v(" "),a("p",[t._v("每个 Kubernetes 对象包含两个嵌套的对象字段，它们负责管理对象的配置：对象 "),a("em",[t._v("spec")]),t._v(" 和 对象 "),a("em",[t._v("status")]),t._v("。"),a("em",[t._v("spec")]),t._v(" 必须提供，它描述了对象的 "),a("em",[t._v("期望状态")]),t._v("—— 希望对象所具有的特征。"),a("em",[t._v("status")]),t._v(" 描述了对象的 "),a("em",[t._v("实际状态")]),t._v("，它是由 Kubernetes 系统提供和更新。在任何时刻，Kubernetes 控制平面一直处于活跃状态，管理着对象的实际状态以与我们所期望的状态相匹配。")]),t._v(" "),a("p",[t._v("例如，Kubernetes Deployment 对象能够表示运行在集群中的应用。当创建 Deployment 时，可能需要设置 Deployment 的 spec，以指定该应用需要有 3 个副本在运行。Kubernetes 系统读取 Deployment spec，启动我们所期望的该应用的 3 个实例 —— 更新状态以与 spec 相匹配。如果那些实例中有失败的（一种状态变更），Kubernetes 系统通过修正来响应 spec 和状态之间的不一致 —— 这种情况，启动一个新的实例来替换。")]),t._v(" "),a("p",[t._v("关于对象 spec、status 和 metadata 更多信息，查看 "),a("a",{attrs:{href:"https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes API Conventions"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"描述-kubernetes-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述-kubernetes-对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 描述 Kubernetes 对象")]),t._v(" "),a("p",[t._v("当创建 Kubernetes 对象时，必须提供对象的 spec，用来描述该对象的期望状态，以及关于对象的一些基本信息（例如，名称）。当使用 Kubernetes API 创建对象时（或者直接创建，或者基于"),a("code",[t._v("kubectl")]),t._v("），API 请求必须在请求体中包含 JSON 格式的信息。"),a("strong",[t._v("更常用的是，需要在 .yaml 文件中为 kubectl 提供这些信息")]),t._v("。 "),a("code",[t._v("kubectl")]),t._v(" 在执行 API 请求时，将这些信息转换成 JSON 格式。")]),t._v(" "),a("p",[t._v("这里有一个 "),a("code",[t._v("nginx-deployment.yaml")]),t._v(" 示例文件，展示了 Kubernetes Deployment 的必需字段和对象 spec：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Deployment\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("deployment\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("replicas")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("1.7.9\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containerPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n")])])]),a("p",[t._v("一种创建 Deployment 的方式，类似上面使用 "),a("code",[t._v(".yaml")]),t._v(" 文件，是使用 "),a("code",[t._v("kubectl")]),t._v(" 命令行接口（CLI）中的 "),a("code",[t._v("kubectl create")]),t._v(" 命令，传递 "),a("code",[t._v(".yaml")]),t._v(" 作为参数。下面是一个示例：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl create -f nginx-deployment.yaml --record\ndeployment "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx-deployment"')]),t._v(" created\n")])])]),a("h3",{attrs:{id:"必需字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#必需字段","aria-hidden":"true"}},[t._v("#")]),t._v(" 必需字段")]),t._v(" "),a("p",[t._v("在想要创建的 Kubernetes 对象对应的 "),a("code",[t._v(".yaml")]),t._v(" 文件中，需要配置如下的字段：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("apiVersion")]),t._v(" - 创建该对象所使用的 Kubernetes API 的版本")]),t._v(" "),a("li",[a("code",[t._v("kind")]),t._v(" - 想要创建的对象的类型")]),t._v(" "),a("li",[a("code",[t._v("metadata")]),t._v(" - 帮助识别对象唯一性的数据，包括一个 "),a("code",[t._v("name")]),t._v(" 字符串、UID 和可选的 "),a("code",[t._v("namespace")])])]),t._v(" "),a("p",[t._v("也需要提供对象的 "),a("code",[t._v("spec")]),t._v(" 字段。对象 "),a("code",[t._v("spec")]),t._v(" 的精确格式对每个 Kubernetes 对象来说是不同的，包含了特定于该对象的嵌套字段。"),a("a",{attrs:{href:"https://kubernetes.io/docs/api/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes API 参考"),a("OutboundLink")],1),t._v("能够帮助我们找到任何我们想创建的对象的 spec 格式。")]),t._v(" "),a("h2",{attrs:{id:"kubernetes-cluster"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-cluster","aria-hidden":"true"}},[t._v("#")]),t._v(" Kubernetes Cluster")]),t._v(" "),a("p",[t._v("Kubernetes将底层的计算资源连接在一起对外体现为一个计算集群，并将资源高度抽象化。部署应用时Kubernetes会以更高效的方式自动的将应用分发到集群内的机器上面，并调度运行。几个Kubernetes集群包含两种类型的资源：")]),t._v(" "),a("ul",[a("li",[t._v("Master节点：协调控制整个集群。")]),t._v(" "),a("li",[t._v("Nodes节点：运行应用的工作节点。")])]),t._v(" "),a("imgLink",{attrs:{src:"date/20190324/001.svg"}}),t._v(" "),a("p",[a("strong",[t._v("Master")]),t._v(" 负责管理集群。 master 协调集群中的所有活动，例如调度应用程序、维护应用程序的所需状态、扩展应用程序和滚动更新。")]),t._v(" "),a("p",[a("strong",[t._v("Node")]),t._v(" 是 Kubernetes 集群中的工作机器，可以是物理机或虚拟机。 每个工作节点都有一个 Kubelet，它是管理 节点 并与 Kubernetes Master 节点进行通信的代理。节点 上还应具有处理容器操作的工作，例如 Docker 或 rkt。一个 Kubernetes 工作集群至少有三个节点。")]),t._v(" "),a("p",[t._v("当部署应用的时候，我们通知Master节点启动应用容器。然后Master会调度这些应用将它们运行在Node节点上面。Node节点和Master节点通过Master节点暴露的Kubernetes API通信。当然我们也可以直接通过这些API和集群交互。")]),t._v(" "),a("h2",{attrs:{id:"节点-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点-node","aria-hidden":"true"}},[t._v("#")]),t._v(" 节点 (Node)")]),t._v(" "),a("p",[t._v("Node是kubernetes集群的工作节点，可以是物理机也可以是虚拟机。")]),t._v(" "),a("p",[t._v("Kubernetes集群中的计算能力由Node提供，最初Node称为服务节点Minion，后来改名为Node。Kubernetes集群中的Node也就等同于Mesos集群中的Slave节点，是所有Pod运行所在的工作主机，可以是物理机也可以是虚拟机。不论是物理机还是虚拟机，工作主机的统一特征是上面要运行kubelet管理节点上运行的容器。")]),t._v(" "),a("h3",{attrs:{id:"node状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node状态","aria-hidden":"true"}},[t._v("#")]),t._v(" Node状态")]),t._v(" "),a("p",[t._v("Node包括如下状态信息：")]),t._v(" "),a("p",[t._v("Node作为集群中的工作节点，运行真正的应用程序，在Node上Kubernetes管理的最小运行单元是Pod。Node上运行着Kubernetes的Kubelet、kube-proxy服务进程，这些服务进程负责Pod的创建、启动、监控、重启、销毁、以及实现软件模式的负载均衡。")]),t._v(" "),a("p",[t._v("Node包含的信息：")]),t._v(" "),a("ul",[a("li",[t._v("Node地址 (Address)：主机的IP地址，或Node ID\n"),a("ul",[a("li",[t._v("HostName：可以被kubelet中的"),a("code",[t._v("--hostname-override")]),t._v("参数替代。")]),t._v(" "),a("li",[t._v("ExternalIP：可以被集群外部路由到的IP地址。")]),t._v(" "),a("li",[t._v("InternalIP：集群内部使用的IP，集群外部无法访问。")])])]),t._v(" "),a("li",[t._v("Condition\n"),a("ul",[a("li",[t._v("OutOfDisk：磁盘空间不足时为"),a("code",[t._v("True")])]),t._v(" "),a("li",[t._v("Ready：Node controller 40秒内没有收到node的状态报告为"),a("code",[t._v("Unknown")]),t._v("，健康为"),a("code",[t._v("True")]),t._v("，否则为"),a("code",[t._v("False")]),t._v("。")]),t._v(" "),a("li",[t._v("MemoryPressure：当node有内存压力时为"),a("code",[t._v("True")]),t._v("，否则为"),a("code",[t._v("False")]),t._v("。")]),t._v(" "),a("li",[t._v("DiskPressure：当node有磁盘压力时为"),a("code",[t._v("True")]),t._v("，否则为"),a("code",[t._v("False")]),t._v("。")])])]),t._v(" "),a("li",[t._v("Node系统容量 (Capacity)：描述Node可用的系统资源，包括CPU、内存、最大可调度Pod数量等")]),t._v(" "),a("li",[t._v("Node的运行状态 (Status)：Pending、Running、Terminated三种状态")]),t._v(" "),a("li",[t._v("Info：节点的一些版本信息，如OS、kubernetes、docker等")]),t._v(" "),a("li",[t._v("其他：内核版本号、Kubernetes版本等。")])]),t._v(" "),a("h3",{attrs:{id:"node管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node管理","aria-hidden":"true"}},[t._v("#")]),t._v(" Node管理")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl get nodes "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取所有节点")]),t._v("\n$ kubectl describe node "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看Node信息")]),t._v("\n$ kubectl cordon "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 禁止pod调度到该节点上")]),t._v("\n$ kubectl drain "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 驱逐该节点上的所有pod")]),t._v("\n")])])]),a("p",[a("code",[t._v("drain")]),t._v(" 命令会删除该节点上的所有Pod（DaemonSet除外），在其他node上重新启动它们，通常该节点需要维护时使用该命令。直接使用该命令会自动调用"),a("code",[t._v("kubectl cordon <node>")]),t._v("命令。当该节点维护完成，启动了kubelet后，再使用"),a("code",[t._v("kubectl uncordon <node>")]),t._v("即可将该节点添加到kubernetes集群中。")]),t._v(" "),a("h2",{attrs:{id:"命名空间-namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名空间-namespace","aria-hidden":"true"}},[t._v("#")]),t._v(" 命名空间 (Namespace)")]),t._v(" "),a("p",[t._v("命名空间为Kubernetes集群提供虚拟的隔离作用。")]),t._v(" "),a("p",[t._v("详见 "),a("a",{attrs:{href:"./Namespace"}},[t._v("Kubernetes 核心概念 - 命名空间 (Namespace)")])]),t._v(" "),a("h2",{attrs:{id:"容器组-pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器组-pod","aria-hidden":"true"}},[t._v("#")]),t._v(" 容器组 (Pod)")]),t._v(" "),a("p",[t._v("Pod直译是豆荚，是Kubernetes最基本的操作单元，包含一个或多个紧密相关的容器。可以把容器想像成豆荚里的豆子，把一个或多个关系紧密的豆子包在一起就是豆荚（一个Pod）。在k8s中我们不会直接操作容器，而是把容器包装成Pod再进行管理。")]),t._v(" "),a("p",[t._v("详见 "),a("a",{attrs:{href:"./Pod"}},[t._v("Kubernetes 核心概念 - 容器组 (Pod)")])]),t._v(" "),a("h2",{attrs:{id:"pod的调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod的调度","aria-hidden":"true"}},[t._v("#")]),t._v(" Pod的调度")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("副本与副本集 (RC、RS)")]),t._v(" 用来管理正常运行Pod数量，系统会根据定义好的副本数来创建Pod数量。在运行过程中，如果Pod数量小于定义的，就会重启停止的或重新分配Pod，反之则杀死多余的")]),t._v(" "),a("li",[a("strong",[t._v("部署 (Deployment)")]),t._v(" 部署表示用户对Kubernetes集群的一次更新操作。部署是一个比RS应用模式更广的API对象，可以是创建一个新的服务，更新一个新的服务，也可以是滚动升级一个服务")]),t._v(" "),a("li",[a("strong",[t._v("守护进程集 (DaemonSet)")]),t._v(" 一个DaemonSet对象能确保其创建的Pod在集群中的每一台（或指定）Node上都运行一个副本")])]),t._v(" "),a("p",[t._v("详见 "),a("a",{attrs:{href:"./Dispatch"}},[t._v("Kubernetes 核心概念 - Pod的调度 (RC、RS、Deploy、DS 等)")])]),t._v(" "),a("h2",{attrs:{id:"暴露服务的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暴露服务的方式","aria-hidden":"true"}},[t._v("#")]),t._v(" 暴露服务的方式")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("服务 (Service)")]),t._v(" 用于对外暴露服务, 使用 NodePort 向外提供端口")]),t._v(" "),a("li",[a("strong",[t._v("访问权 (Ingress)")]),t._v(" 用作反向代理和负载均衡的工具")])]),t._v(" "),a("p",[t._v("详见 "),a("a",{attrs:{href:"./Service"}},[t._v("Kubernetes 核心概念 - 暴露服务的方式 (Service、Ingress)")])]),t._v(" "),a("h2",{attrs:{id:"数据存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据存储","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据存储")]),t._v(" "),a("ul",[a("li",[t._v("存储卷 (Volume)")]),t._v(" "),a("li",[t._v("持久存储卷 (Persistent Volume，PV)")]),t._v(" "),a("li",[t._v("持久存储卷声明 (Persistent Volume Claim，PVC)")])]),t._v(" "),a("p",[t._v("详见 "),a("a",{attrs:{href:"./Storage"}},[t._v("Kubernetes 核心概念 - 数据存储 (PV、PVC)")])]),t._v(" "),a("h2",{attrs:{id:"配置存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置存储","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置存储")]),t._v(" "),a("ul",[a("li",[t._v("配置字典 (ConfigMap)")]),t._v(" "),a("li",[t._v("保密字典 (Secret)")])]),t._v(" "),a("p",[t._v("详见 "),a("a",{attrs:{href:"./Storage"}},[t._v("Kubernetes 核心概念 - 配置存储 (ConfigMap、Secret)")])]),t._v(" "),a("h2",{attrs:{id:"角色的访问控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#角色的访问控制","aria-hidden":"true"}},[t._v("#")]),t._v(" 角色的访问控制")]),t._v(" "),a("ul",[a("li",[t._v("Service Account")]),t._v(" "),a("li",[t._v("Role")]),t._v(" "),a("li",[t._v("RoleBinding")]),t._v(" "),a("li",[t._v("ClusterRoleBinding")])]),t._v(" "),a("p",[t._v("详见 "),a("a",{attrs:{href:"./RBAC"}},[t._v("Kubernetes 核心概念 - 角色的访问控制 (RBAC)")])]),t._v(" "),a("h2",{attrs:{id:"任务与定时任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任务与定时任务","aria-hidden":"true"}},[t._v("#")]),t._v(" 任务与定时任务")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Job")]),t._v(" 负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个Pod成功结束。")]),t._v(" "),a("li",[a("strong",[t._v("Cron Job")]),t._v(" 定时任务")])]),t._v(" "),a("p",[t._v("详见 "),a("a",{attrs:{href:"./Job"}},[t._v("Kubernetes 核心概念 - 任务与定时任务 (Job、Cron)")])]),t._v(" "),a("h2",{attrs:{id:"pod水平自动伸缩-horizontal-pod-autoscaling-hpa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod水平自动伸缩-horizontal-pod-autoscaling-hpa","aria-hidden":"true"}},[t._v("#")]),t._v(" pod水平自动伸缩 (Horizontal Pod Autoscaling, HPA)")]),t._v(" "),a("p",[t._v("应用的资源使用率通常都有高峰和低谷的时候，如何削峰填谷，提高集群的整体资源利用率，让service中的Pod个数自动调整呢？这就有赖于Horizontal Pod Autoscaling了，顾名思义，使Pod水平自动缩放。这个Object（跟Pod、Deployment一样都是API resource）也是最能体现kubernetes之于传统运维价值的地方，不再需要手动扩容了，终于实现自动化了，还可以自定义指标，没准未来还可以通过人工智能自动进化呢！")]),t._v(" "),a("p",[t._v("HPA属于Kubernetes中的"),a("strong",[t._v("autoscaling")]),t._v(" SIG（Special Interest Group），其下有两个feature：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/kubernetes/features/issues/117",target:"_blank",rel:"noopener noreferrer"}},[t._v("Arbitrary/Custom Metrics in the Horizontal Pod Autoscaler#117"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/kubernetes/features/issues/118",target:"_blank",rel:"noopener noreferrer"}},[t._v("Monitoring Pipeline Metrics HPA API #118"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("Kubernetes自1.2版本引入HPA机制，到1.6版本之前一直是通过kubelet来获取监控指标来判断是否需要扩缩容，1.6版本之后必须通过API server、Heapseter或者kube-aggregator来获取监控指标。")]),t._v(" "),a("h2",{attrs:{id:"准入控制器-admission-controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准入控制器-admission-controller","aria-hidden":"true"}},[t._v("#")]),t._v(" 准入控制器 (Admission Controller)")]),t._v(" "),a("p",[t._v("准入控制器（Admission Controller）位于 API Server 中，在对象被持久化之前，准入控制器拦截对 API Server 的请求，一般用来做身份验证和授权。其中包含两个特殊的控制器：MutatingAdmissionWebhook 和 ValidatingAdmissionWebhook。分别作为配置的变异和验证准入控制 webhook。")]),t._v(" "),a("p",[t._v("变更（Mutating）准入控制：修改请求的对象")]),t._v(" "),a("p",[t._v("验证（Validating）准入控制：验证请求的对象")]),t._v(" "),a("p",[t._v("准入控制器是在 API Server 的启动参数重配置的。一个准入控制器可能属于以上两者中的一种，也可能两者都属于。当请求到达 API Server 的时候首先执行变更准入控制，然后再执行验证准入控制。")]),t._v(" "),a("p",[t._v("我们在部署 Kubernetes 集群的时候都会默认开启一系列准入控制器，如果没有设置这些准入控制器的话可以说你的 Kubernetes 集群就是在裸奔，应该只有集群管理员可以修改集群的准入控制器。")]),t._v(" "),a("h2",{attrs:{id:"网络策略-network-policy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络策略-network-policy","aria-hidden":"true"}},[t._v("#")]),t._v(" 网络策略 (Network Policy)")]),t._v(" "),a("p",[t._v("网络策略说明一组 "),a("code",[t._v("Pod")]),t._v(" 之间是如何被允许互相通信，以及如何与其它网络 Endpoint 进行通信。 "),a("code",[t._v("NetworkPolicy")]),t._v(" 资源使用标签来选择 "),a("code",[t._v("Pod")]),t._v("，并定义了一些规则，这些规则指明允许什么流量进入到选中的 "),a("code",[t._v("Pod")]),t._v(" 上。")]),t._v(" "),a("p",[t._v("网络策略通过网络插件来实现，所以必须使用一种支持 NetworkPolicy 的网络方案（如 calico）—— 非 Controller 创建的资源，是不起作用的。")]),t._v(" "),a("h3",{attrs:{id:"隔离的与未隔离的-pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隔离的与未隔离的-pod","aria-hidden":"true"}},[t._v("#")]),t._v(" 隔离的与未隔离的 Pod")]),t._v(" "),a("p",[t._v("默认 Pod 是未隔离的，它们可以从任何的源接收请求。 具有一个可以选择 Pod 的网络策略后，Pod 就会变成隔离的。 一旦 Namespace 中配置的网络策略能够选择一个特定的 Pod，这个 Pod 将拒绝任何该网络策略不允许的连接。（Namespace 中其它未被网络策略选中的 Pod 将继续接收所有流量）")]),t._v(" "),a("h3",{attrs:{id:"networkpolicy-资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#networkpolicy-资源","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("NetworkPolicy")]),t._v(" 资源")]),t._v(" "),a("p",[t._v("下面是一个 "),a("code",[t._v("NetworkPolicy")]),t._v(" 的例子：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" networking.k8s.io/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NetworkPolicy\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("network"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("policy\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" default\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("podSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("matchLabels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("role")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" db\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("policyTypes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Ingress\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Egress\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ingress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ipBlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cidr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 172.17.0.0/16\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("except")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 172.17.1.0/24\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespaceSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("matchLabels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("project")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" myproject\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("podSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("matchLabels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("role")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" frontend\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("protocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TCP\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("egress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("to")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ipBlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cidr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10.0.0.0/24\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("protocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TCP\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5978")]),t._v("\n")])])]),a("p",[a("em",[t._v("将上面配置 POST 到 API Server 将不起任何作用，除非选择的网络方案支持网络策略。")])]),t._v(" "),a("p",[a("strong",[t._v("必选字段")]),t._v("：像所有其它 Kubernetes 配置一样， "),a("code",[t._v("NetworkPolicy")]),t._v(" 需要 "),a("code",[t._v("apiVersion")]),t._v("、"),a("code",[t._v("kind")]),t._v(" 和 "),a("code",[t._v("metadata")]),t._v("这三个字段，关于如何使用配置文件的基本信息，可以查看 "),a("a",{attrs:{href:"https://kubernetes.io/docs/user-guide/configuring-containers",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://kubernetes.io/docs/user-guide/working-with-resources",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("spec")]),t._v("："),a("code",[t._v("NetworkPolicy")]),t._v(" "),a("a",{attrs:{href:"https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",target:"_blank",rel:"noopener noreferrer"}},[t._v("spec"),a("OutboundLink")],1),t._v(" 具有在给定 Namespace 中定义特定网络的全部信息。")]),t._v(" "),a("p",[a("strong",[t._v("podSelector")]),t._v("：每个 "),a("code",[t._v("NetworkPolicy")]),t._v(" 包含一个 "),a("code",[t._v("podSelector")]),t._v("，它可以选择一组应用了网络策略的 Pod。由于 "),a("code",[t._v("NetworkPolicy")]),t._v(" 当前只支持定义 "),a("code",[t._v("ingress")]),t._v(" 规则，这个 "),a("code",[t._v("podSelector")]),t._v(" 实际上为该策略定义了一组 “目标Pod”。示例中的策略选择了标签为 “role=db” 的 Pod。一个空的 "),a("code",[t._v("podSelector")]),t._v(" 选择了该 Namespace 中的所有 Pod。")]),t._v(" "),a("p",[a("strong",[t._v("ingress")]),t._v("：每个"),a("code",[t._v("NetworkPolicy")]),t._v(" 包含了一个白名单 "),a("code",[t._v("ingress")]),t._v(" 规则列表。每个规则只允许能够匹配上 "),a("code",[t._v("from")]),t._v("和 "),a("code",[t._v("ports")]),t._v("配置段的流量。示例策略包含了单个规则，它从这两个源中匹配在单个端口上的流量，第一个是通过"),a("code",[t._v("namespaceSelector")]),t._v(" 指定的，第二个是通过 "),a("code",[t._v("podSelector")]),t._v(" 指定的。")]),t._v(" "),a("p",[a("strong",[t._v("egress")]),t._v("：每个"),a("code",[t._v("NetworkPolicy")]),t._v(" 包含了一个白名单 "),a("code",[t._v("ingress")]),t._v(" 规则列表。每个规则只允许能够匹配上 "),a("code",[t._v("to")]),t._v(" 和 "),a("code",[t._v("ports")]),t._v("配置段的流量。示例策略包含了单个规则，它匹配目的地 "),a("code",[t._v("10.0.0.0/24")]),t._v(" 单个端口的流量。")]),t._v(" "),a("p",[t._v("因此，上面示例的 NetworkPolicy：")]),t._v(" "),a("ol",[a("li",[t._v("在 “default” Namespace中 隔离了标签 “role=db” 的 Pod（如果他们还没有被隔离）")]),t._v(" "),a("li",[t._v("在 “default” Namespace中，允许任何具有 “role=frontend” 的 Pod，IP 范围在 172.17.0.0–172.17.0.255 和 172.17.2.0–172.17.255.255（整个 172.17.0.0/16 段， 172.17.1.0/24 除外）连接到标签为 “role=db” 的 Pod 的 TCP 端口 6379")]),t._v(" "),a("li",[t._v("允许在 Namespace 中任何具有标签 “project=myproject” ，IP范围在10.0.0.0/24段的 Pod，连接到 “default” Namespace 中标签为 “role=db” 的 Pod 的 TCP 端口 5978")])]),t._v(" "),a("h3",{attrs:{id:"默认策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认策略","aria-hidden":"true"}},[t._v("#")]),t._v(" 默认策略")]),t._v(" "),a("p",[t._v("通过创建一个可以选择所有 Pod 但不允许任何流量的 NetworkPolicy，你可以为一个 Namespace 创建一个 “默认的” 隔离策略，如下所示：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" networking.k8s.io/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NetworkPolicy\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("deny\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("podSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n")])])]),a("p",[t._v("这确保了即使是没有被任何 NetworkPolicy 选中的 Pod，将仍然是被隔离的。")]),t._v(" "),a("p",[t._v("可选地，在 Namespace 中，如果你想允许所有的流量进入到所有的 Pod（即使已经添加了某些策略，使一些 Pod 被处理为 “隔离的”），你可以通过创建一个策略来显式地指定允许所有流量：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" networking.k8s.io/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NetworkPolicy\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" allow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("all\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("podSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ingress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])],1)},[],!1,null,null,null);e.default=r.exports}}]);