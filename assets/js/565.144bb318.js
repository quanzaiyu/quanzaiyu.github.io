(window.webpackJsonp=window.webpackJsonp||[]).push([[565],{769:function(e,t,r){"use strict";r.r(t);var a=r(1),s=Object(a.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"kubernetes-核心概念-服务-service"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-核心概念-服务-service","aria-hidden":"true"}},[e._v("#")]),e._v(" Kubernetes 核心概念 - 服务 (Service)")]),e._v(" "),r("p",[e._v("在Kubernetes的世界里，虽然每个Pod都会被分配一个单独的IP地址，但这个IP地址会随着Pod的销毁而消失，这就引出一个问题：如果有一组Pod组成一个集群来提供服务，那么如何来访问它呢？Service！")]),e._v(" "),r("p",[e._v("一个Service可以看作一组提供相同服务的Pod的对外访问接口，Service作用于哪些Pod是通过Label Selector来定义的。")]),e._v(" "),r("ul",[r("li",[e._v("拥有一个指定的名字（比如my-mysql-server）；")]),e._v(" "),r("li",[e._v("拥有一个虚拟IP（ClusterIP、ServiceIP或VIP）和端口号，销毁之前不会改变，只能内网访问；")]),e._v(" "),r("li",[e._v("能够提供某种远程服务能力；")]),e._v(" "),r("li",[e._v("被映射到了提供这种服务能力的一组容器应用上；")])]),e._v(" "),r("p",[e._v("如果Service要提供外网服务，需指定公共IP和NodePort，或外部负载均衡器；")]),e._v(" "),r("h2",{attrs:{id:"服务中的3个端口详解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务中的3个端口详解","aria-hidden":"true"}},[e._v("#")]),e._v(" 服务中的3个端口详解")]),e._v(" "),r("h3",{attrs:{id:"port"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#port","aria-hidden":"true"}},[e._v("#")]),e._v(" port")]),e._v(" "),r("p",[e._v("这里的port表示：service暴露在 cluster ip 上的端口，"),r("code",[e._v("<cluster ip>:port")]),e._v(" 是提供给集群内部客户访问service的入口。")]),e._v(" "),r("h3",{attrs:{id:"nodeport"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nodeport","aria-hidden":"true"}},[e._v("#")]),e._v(" nodePort")]),e._v(" "),r("p",[e._v("nodePort是kubernetes提供给集群外部客户访问service入口的一种方式（另一种方式是LoadBalancer），所以，"),r("code",[e._v("<nodeIP>:nodePort")]),e._v(" 是提供给集群外部客户访问service的入口。")]),e._v(" "),r("h3",{attrs:{id:"targetport"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#targetport","aria-hidden":"true"}},[e._v("#")]),e._v(" targetPort")]),e._v(" "),r("p",[e._v("targetPort很好理解，targetPort是pod上的端口，从port和nodePort上到来的数据最终经过kube-proxy流入到后端pod的targetPort上进入容器。")]),e._v(" "),r("h2",{attrs:{id:"定义-service"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#定义-service","aria-hidden":"true"}},[e._v("#")]),e._v(" 定义 Service")]),e._v(" "),r("p",[e._v("一个 "),r("code",[e._v("Service")]),e._v(" 在 Kubernetes 中是一个 REST 对象，和 "),r("code",[e._v("Pod")]),e._v(" 类似。 像所有的 REST 对象一样， "),r("code",[e._v("Service")]),e._v(" 定义可以基于 POST 方式，请求 apiserver 创建新的实例。 例如，假定有一组 "),r("code",[e._v("Pod")]),e._v("，它们对外暴露了 9376 端口，同时还被打上 "),r("code",[e._v('"app=MyApp"')]),e._v(" 标签。")]),e._v(" "),r("div",{staticClass:"language-yaml extra-class"},[r("pre",{pre:!0,attrs:{class:"language-yaml"}},[r("code",[r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kind")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Service\n"),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiVersion")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" v1\n"),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("metadata")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" my"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("service\n"),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("spec")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("selector")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("app")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" MyApp\n  "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("protocol")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" TCP\n      "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("port")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),e._v("\n      "),r("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("targetPort")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("9376")]),e._v("\n")])])]),r("p",[e._v("上述配置将创建一个名称为 “my-service” 的 "),r("code",[e._v("Service")]),e._v(" 对象，它会将请求代理到使用 TCP 端口 9376，并且具有标签 "),r("code",[e._v('"app=MyApp"')]),e._v(" 的 "),r("code",[e._v("Pod")]),e._v(" 上。 这个 "),r("code",[e._v("Service")]),e._v(" 将被指派一个 IP 地址（通常称为 “Cluster IP”），它会被服务的代理使用（见下面）。 该 "),r("code",[e._v("Service")]),e._v(" 的 selector 将会持续评估，处理结果将被 POST 到一个名称为 “my-service” 的 "),r("code",[e._v("Endpoints")]),e._v(" 对象上。")]),e._v(" "),r("p",[e._v("需要注意的是， "),r("code",[e._v("Service")]),e._v(" 能够将一个接收端口映射到任意的 "),r("code",[e._v("targetPort")]),e._v("。 默认情况下，"),r("code",[e._v("targetPort")]),e._v(" 将被设置为与 "),r("code",[e._v("port")]),e._v(" 字段相同的值。 可能更有趣的是，"),r("code",[e._v("targetPort")]),e._v(" 可以是一个字符串，引用了 backend "),r("code",[e._v("Pod")]),e._v(" 的一个端口的名称。 但是，实际指派给该端口名称的端口号，在每个 backend "),r("code",[e._v("Pod")]),e._v(" 中可能并不相同。 对于部署和设计 "),r("code",[e._v("Service")]),e._v(" ，这种方式会提供更大的灵活性。 例如，可以在 backend 软件下一个版本中，修改 Pod 暴露的端口，并不会中断客户端的调用。")]),e._v(" "),r("p",[e._v("Kubernetes "),r("code",[e._v("Service")]),e._v(" 能够支持 "),r("code",[e._v("TCP")]),e._v(" 和 "),r("code",[e._v("UDP")]),e._v(" 协议，默认 "),r("code",[e._v("TCP")]),e._v(" 协议。")]),e._v(" "),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://blog.csdn.net/zll_0405/article/details/85222443",target:"_blank",rel:"noopener noreferrer"}},[e._v("[Kubernetes]yaml文件详解"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://blog.csdn.net/random_w/article/details/80612881",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubernetes（k8s）第七部分之yaml文件详解"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://blog.csdn.net/xinghun_4/article/details/50492041",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubernetes中port、target port、node port的对比分析，以及kube-proxy代理"),r("OutboundLink")],1)])])])},[],!1,null,null,null);t.default=s.exports}}]);