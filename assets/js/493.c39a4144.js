(window.webpackJsonp=window.webpackJsonp||[]).push([[493],{927:function(a,t,e){"use strict";e.r(t);var s=e(1),r=Object(s.a)({},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"容器技术-docker-的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器技术-docker-的使用","aria-hidden":"true"}},[a._v("#")]),a._v(" 容器技术 Docker 的使用")]),a._v(" "),e("h2",{attrs:{id:"docker-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-简介","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 简介")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://www.docker.com",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker"),e("OutboundLink")],1),a._v(" 提供了一个可以运行你的运行程序的封套（envelope），或者说容器。它最初是用Go语言编写的，它就相当于是加在LXC（Linux Containers）上的管道，允许开发者在更高层次的概念上工作。")]),a._v(" "),e("p",[a._v("Docker 也是一个云计算平台，它利用 Linux 的 LXC、AUFU、Go语言、cgroup实现了资源的独立，可以很轻松地实现文件、资源、网络等隔离，其最终的目标是实现类似 PaaS 平台的应用隔离。")]),a._v(" "),e("p",[a._v("Docker 会像一个可移植引擎那样工作。它把应用程序以及所有应用程序的依赖环境打包到一个虚拟容器中，这个虚拟容器可以运行在任何一种Linux服务器上。这大大地提高了程序运行的灵活性和可移植性，无论需不需要许可、是在公共云还是私密云、是不是裸机环境等等。")]),a._v(" "),e("ul",[e("li",[a._v("一种虚拟化解决方案")]),a._v(" "),e("li",[a._v("操作系统级别的虚拟化")]),a._v(" "),e("li",[a._v("只能运行相同或类似内核的操作系统")]),a._v(" "),e("li",[a._v("依赖于Linux内核特性：Namespace和Cgroups（Control Group）")])]),a._v(" "),e("hr"),a._v(" "),e("ul",[e("li",[a._v("中文社区："),e("a",{attrs:{href:"http://www.docker.org.cn",target:"_blank",rel:"noopener noreferrer"}},[a._v("www.docker.org.cn"),e("OutboundLink")],1)]),a._v(" "),e("li",[a._v("Docker Hub："),e("a",{attrs:{href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer"}},[a._v("hub.docker.com"),e("OutboundLink")],1)]),a._v(" "),e("li",[a._v("Document："),e("a",{attrs:{href:"https://docs.docker.com",target:"_blank",rel:"noopener noreferrer"}},[a._v("docs.docker.com"),e("OutboundLink")],1)]),a._v(" "),e("li",[a._v("GitHub："),e("a",{attrs:{href:"https://github.com/docker/docker",target:"_blank",rel:"noopener noreferrer"}},[a._v("github.com/docker/docker"),e("OutboundLink")],1)])]),a._v(" "),e("h3",{attrs:{id:"docker-的诞生"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-的诞生","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 的诞生")]),a._v(" "),e("p",[a._v("Docker 是 Docker.Inc（前身dotCloud）公司开源的一个基于 LXC 技术之上构建的 Container 容器引擎，它原本是dotCloud启动的一个业余项目，源代码托管在 GitHub 上，基于 Go 语言并遵从 Apache2.0 协议，于2013年3月27日作为 public 项目发布。它吸引了大量的关注和讨论，导致 dotCloud 把它重命名到 Docker Inc。")]),a._v(" "),e("p",[a._v("Docker 是通过内核虚拟化技术（namespaces 及 cgroup等）来提供容器的资源隔离与安全保障等，由于 Docker 通过操作系统层的虚拟化实现隔离，所以 Docker 所以 Docker 容器在运行时，不需要类似虚拟机（VM）额外的操作系统开销，提高资源利用率。")]),a._v(" "),e("h3",{attrs:{id:"docker-可以做什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-可以做什么","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 可以做什么")]),a._v(" "),e("p",[a._v("Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。")]),a._v(" "),e("ul",[e("li",[a._v("Docker 是一个开源的软件部署解决方案")]),a._v(" "),e("li",[a._v("Docker 是一个轻量级的应用容器框架")]),a._v(" "),e("li",[a._v("Docker 可以打包、发布、运行任何应用")]),a._v(" "),e("li",[a._v("build once，run anywhere")])]),a._v(" "),e("h3",{attrs:{id:"docker-与虚拟机的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-与虚拟机的区别","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 与虚拟机的区别")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("传统虚拟机")]),a._v(" "),e("th",[a._v("Docker")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("依赖物理CPU和内存，是硬件级别的。")]),a._v(" "),e("td",[a._v("在操作系统上，利用操作系统的containerization（集装箱化）技术，可以在虚拟机上运行。")])]),a._v(" "),e("tr",[e("td",[a._v("一般都是指操作系统镜像，比较复杂。")]),a._v(" "),e("td",[a._v("docker开源而且轻量，成为“容器”，单个容器适合部署少量应用。")])]),a._v(" "),e("tr",[e("td",[a._v("使用快照来保存状态。")]),a._v(" "),e("td",[a._v("引入了类似源代码管理机制，将容器的快照历史版本一一记录。")])]),a._v(" "),e("tr",[e("td",[a._v("在构建系统的时候较为复杂，需要大量的人力。")]),a._v(" "),e("td",[a._v("docker可以通过Dockfile来构建整个容器，重启和构建速度很快，更重要的是Dockfile可以手动编写，这样应用程序开发人员可以通过发布Dockfile来指导系统环境和依赖，这样对于持续交付十分有利。")])])])]),a._v(" "),e("p",[a._v("传统虚拟机与Docker的区别图：")]),a._v(" "),e("imgLink",{attrs:{src:"date/20181013/virtualization.png"}}),a._v(" "),e("imgLink",{attrs:{src:"date/20181013/docker.png"}}),a._v(" "),e("h3",{attrs:{id:"docker-使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-使用场景","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 使用场景")]),a._v(" "),e("ul",[e("li",[a._v("使用Docker容器开发、测试、部署服务")]),a._v(" "),e("li",[a._v("创建隔离的运行环境")]),a._v(" "),e("li",[a._v("搭建测试环境")]),a._v(" "),e("li",[a._v("构建多用户的平台即服务（PaaS）基础设施")]),a._v(" "),e("li",[a._v("提供软件即服务（SaaS）应用程序")]),a._v(" "),e("li",[a._v("高性能、超大规模的宿主机部署")])]),a._v(" "),e("h3",{attrs:{id:"docker-特性与能力"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-特性与能力","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 特性与能力")]),a._v(" "),e("ol",[e("li",[e("strong",[a._v("文件系统隔离")]),a._v(" 每个进程容器运行在完全独立的根（root）文件系统里")]),a._v(" "),e("li",[e("strong",[a._v("进程隔离")]),a._v(" 每个容器都运行在自己的进程环境中")]),a._v(" "),e("li",[e("strong",[a._v("资源隔离和分组")]),a._v(" 可以使用 cgroup 为每个进程容器分配不同的系统资源，例如 CPU 和内存")]),a._v(" "),e("li",[e("strong",[a._v("网络隔离")]),a._v(" 每个进程容器运行在自己的网络命名空间里，拥有自己的虚拟接口和IP地址")]),a._v(" "),e("li",[e("strong",[a._v("写时复制")]),a._v(" 采用写时复制创建根文件系统，这让部署变得极其快捷，并且节省内存和硬盘空间")]),a._v(" "),e("li",[e("strong",[a._v("日志记录")]),a._v(" Docker 将会搜集和记录没跟进程容器的标准流（stdout、stderr、stdin），用于实时检索或批量检索")]),a._v(" "),e("li",[e("strong",[a._v("变更管理")]),a._v(" 容器文件系统的变更可以提交到新的映像中，并可重复使用以创建更多的容器，无需使用模板或手动配置")]),a._v(" "),e("li",[e("strong",[a._v("交互式shell")]),a._v(" Docker 可以分配一个虚拟终端并关联到任何容器的标准输入上，例如运行一个一次性交互shell")])]),a._v(" "),e("h3",{attrs:{id:"docker-工作原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-工作原理","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 工作原理")]),a._v(" "),e("p",[a._v("Docker 使用客户端-服务器（C/S）架构模式。Docker客户端会与Docker守护进程进行通讯。Docker守护进程会处理复杂繁重的任务，例如建立、运行、发布你的Docker容器。Docker客户端和守护进程可以运行在同一个系统上，当然你也可以使用Docker客户端去连接一个远程的Docker守护进程。Docker客户端和守护进程之间通过socket或者RESTful API进行通信。")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("Docker守护进程")]),a._v(" Docker守护进程运行在一台主机上。用户并不直接和守护进程进行交互，而是通过Docker客户端简介和其通信。")]),a._v(" "),e("li",[e("strong",[a._v("Docker客户端")]),a._v(" Docker客户端实际上是Docker的二进制程序，是主要的用户与Docker交互方式。它接收用户指令并且与背后的Docker守护进程通讯，如此来回往复。")])]),a._v(" "),e("imgLink",{attrs:{src:"date/20181014/001.png"}}),a._v(" "),e("h2",{attrs:{id:"docker-核心概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-核心概念","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 核心概念")]),a._v(" "),e("h3",{attrs:{id:"docker-镜像-docker-image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像-docker-image","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 镜像 (Docker Image)")]),a._v(" "),e("p",[a._v("我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu 16.04 最小系统的 root 文件系统。")]),a._v(" "),e("p",[a._v("Docker 镜像是Docker容器运行时的只读模板，每一个镜像有一些列的层（layers）组成。Docker使用UnionFS来将这些层联合到单独的镜像中。UnionFS允许独立于文件系统中的文件和文件夹（称之为分支）被透明覆盖，形成一个单独连贯的文件系统。正因为有了这些层的存在，Docker是如此的轻量。")]),a._v(" "),e("imgLink",{attrs:{src:"date/20181013/001.png"}}),a._v(" "),e("p",[a._v("当你改变了一个Docker镜像，比如升级到某个程序到新的版本，一个新的层就会被创建。因此，不用替换整个原先的镜像或者重新建立（在使用虚拟机的时候你可能会这么做），只是一个新的层被添加或者升级了。现在你不用重新发布整个镜像，只需要升级，层使得分发Docker镜像变得简单和快速。")]),a._v(" "),e("p",[a._v("在 Docker Store 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 nginx、redis、mongo、mysql、httpd、php、tomcat 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 node、openjdk、python、ruby、golang 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。")]),a._v(" "),e("p",[a._v("如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 ubuntu、debian、centos、fedora、alpine 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。")]),a._v(" "),e("p",[a._v("除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。")]),a._v(" "),e("h3",{attrs:{id:"docker-容器-docker-containers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-容器-docker-containers","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 容器 (Docker Containers)")]),a._v(" "),e("p",[a._v("Docker容器和文件夹很类似，一个Docker容器包含了所有的某个应用运行所需要的环境。每一个Docker容器都是从Docker镜像创建的。Docker容器可以运行、开始、停止、移动和删除。每一个Docker容器都是单独和安全的应用平台，Docker容器是Docker的运行部分。")]),a._v(" "),e("p",[a._v("镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")]),a._v(" "),e("p",[a._v("容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。")]),a._v(" "),e("p",[a._v("每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。")]),a._v(" "),e("p",[a._v("容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。")]),a._v(" "),e("imgLink",{attrs:{src:"date/20181013/002.png"}}),a._v(" "),e("p",[a._v("要点：容器 = 镜像 + 读写层。并且容器的定义并没有提及是否要运行容器。")]),a._v(" "),e("p",[e("strong",[a._v("运行态容器")])]),a._v(" "),e("p",[a._v("一个运行态容器（running container）被定义为一个可读写的统一文件系统加上隔离的进程空间和包含其中的进程。")]),a._v(" "),e("imgLink",{attrs:{src:"date/20181013/003.png"}}),a._v(" "),e("h3",{attrs:{id:"docker-仓库-docker-registeries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-仓库-docker-registeries","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 仓库 (Docker Registeries)")]),a._v(" "),e("p",[a._v("镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker 仓库就是这样的服务。")]),a._v(" "),e("p",[a._v("Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker仓库也有公有和私有的概念。共有的Docker仓库名字是Docker Hub。Docker Hub提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker仓库是Docker的分发部分。")]),a._v(" "),e("p",[a._v("一个 Docker 仓库中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。")]),a._v(" "),e("h2",{attrs:{id:"docker-换源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-换源","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 换源")]),a._v(" "),e("h3",{attrs:{id:"全局修改镜像源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局修改镜像源","aria-hidden":"true"}},[a._v("#")]),a._v(" 全局修改镜像源")]),a._v(" "),e("p",[a._v("一些国内镜像源：")]),a._v(" "),e("ul",[e("li",[a._v("Docker 官方中国区: https://registry.docker-cn.com")]),a._v(" "),e("li",[a._v("网易: http://hub-mirror.c.163.com")]),a._v(" "),e("li",[a._v("ustc: https://docker.mirrors.ustc.edu.cn")])]),a._v(" "),e("p",[a._v("修改docker 配置文件："),e("code",[a._v("/etc/docker/daemon.json")]),a._v(" 即可：")]),a._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[a._v('"registry-mirrors"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"http://hub-mirror.c.163.com"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("h3",{attrs:{id:"注册-daocloud-加速"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注册-daocloud-加速","aria-hidden":"true"}},[a._v("#")]),a._v(" 注册 DaoCloud 加速")]),a._v(" "),e("p",[a._v("注册地址："),e("a",{attrs:{href:"https://www.daocloud.io/mirror",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.daocloud.io/mirror"),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("使用以下命令即可将加速域名简单注册到本地Docker配置文件。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" -sSL https://get.daocloud.io/daotools/set_mirror.sh "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" sh -s http://f1361db2.m.daocloud.io\n")])])]),e("p",[a._v("注册之后，重启docker即可：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ systemctl restart docker\n")])])]),e("h2",{attrs:{id:"docker-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 安装")]),a._v(" "),e("h3",{attrs:{id:"centos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#centos","aria-hidden":"true"}},[a._v("#")]),a._v(" CentOS")]),a._v(" "),e("p",[a._v("参考 "),e("a",{attrs:{href:"https://docs.docker.com/v1.13/engine/installation/linux/centos/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Get Docker for CentOS"),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("在 CentOS7 中安装 Dokcer：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ yum "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" docker -y\n")])])]),e("p",[a._v("或者使用 curl 拉取 shell 脚本安装")]),a._v(" "),e("p",[a._v("shell 脚本地址：https://get.docker.com")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" https://get.docker.com "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" sh\n")])])]),e("p",[a._v("启动和设置开机自启：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ systemctl start docker "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 启动 Docker")]),a._v("\n$ systemctl stop docker "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 关闭 Docker")]),a._v("\n$ systemctl "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("enable")]),a._v(" docker "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 开机启动")]),a._v("\nCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\n$ docker info "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看关于 Docker 的一些信息")]),a._v("\n")])])]),e("p",[a._v("查看docker是否启动")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" aux "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" docker\n$ systemctl status docker\n")])])]),e("p",[a._v("Docker 信息")]),a._v(" "),e("ul",[e("li",[a._v("Docker 镜像存储位置："),e("code",[a._v("/var/lib/docker/containers")])]),a._v(" "),e("li",[a._v("Docker 默认卷存放位置 "),e("code",[a._v("/var/lib/docker/volumes")])])]),a._v(" "),e("h3",{attrs:{id:"windows"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#windows","aria-hidden":"true"}},[a._v("#")]),a._v(" Windows")]),a._v(" "),e("h4",{attrs:{id:"使用-hyper-v-开启-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-hyper-v-开启-docker","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用 Hyper-v 开启 Docker")]),a._v(" "),e("h4",{attrs:{id:"使用-wsl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-wsl","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用 WSL")]),a._v(" "),e("h2",{attrs:{id:"镜像相关概念及相关操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像相关概念及相关操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 镜像相关概念及相关操作")]),a._v(" "),e("h3",{attrs:{id:"基本操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 基本操作")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker search "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("keyword"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 搜索镜像")]),a._v("\n$ docker pull "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("repo/container"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(":"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("tag"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 下载镜像, tag可以不指定，默认使用 latest，代表最新版, docker pull centos 相当于 docker pull centos:latest")]),a._v("\n$ docker images "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出所有镜像")]),a._v("\n$ docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出所有镜像")]),a._v("\n$ docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" ubuntu "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出 ubuntu 相关的镜像")]),a._v("\n$ docker rmi "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(". "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除镜像")]),a._v("\n$ docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(". "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除镜像")]),a._v("\n$ docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" -f "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(". "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 强制删除镜像")]),a._v("\n$ docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -q redis"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 批量删除redis相关的镜像")]),a._v("\n$ docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -q -f before"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("mongo:3.2"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 批量删除mongo3.2版本之前的镜像")]),a._v("\n$ docker system "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("df")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看镜像、容器、数据卷所占用的空间")]),a._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("history")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image:tag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看历史镜像")]),a._v("\n")])])]),e("h3",{attrs:{id:"虚悬镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚悬镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 虚悬镜像")]),a._v(" "),e("p",[a._v("在镜像列表中，还可能看到一些特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 "),e("code",[a._v("<none>")]),a._v("。")]),a._v(" "),e("p",[a._v("这个镜像原本是有镜像名和标签的，原来为 mongo:3.2，随着官方镜像维护，发布了新版本后，重新 docker pull mongo:3.2 时，mongo:3.2 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 "),e("code",[a._v("<none>")]),a._v("。除了 docker pull 可能导致这种情况，docker build 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 "),e("code",[a._v("<none>")]),a._v(" 的镜像。这类无标签镜像也被称为 虚悬镜像(dangling image) ，可以用下面的命令专门显示这类镜像：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -f dangling"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("none"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("              "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("none"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("              00285df0df87        5 days ago          342 MB\n")])])]),e("p",[a._v("一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker image prune\n")])])]),e("h3",{attrs:{id:"中间层镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#中间层镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 中间层镜像")]),a._v(" "),e("p",[a._v("为了加速镜像构建、重复利用资源，Docker 会利用 中间层镜像。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 docker image ls 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 -a 参数。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -a\n")])])]),e("p",[a._v("这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。")]),a._v(" "),e("h2",{attrs:{id:"容器相关概念及基本操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器相关概念及基本操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 容器相关概念及基本操作")]),a._v(" "),e("h3",{attrs:{id:"创建容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 创建容器")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker run -it --name "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("containerName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("command"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建交互式容器, 在运行结束后会退出容器")]),a._v("\n$ docker run -d --name "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("containerName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("command"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建守护式容器")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 示例")]),a._v("\n\n$ docker run -it --name server centos /bin/bash "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用镜像centos创建一个名为server的容器, 并使用/bin/bash解释器")]),a._v("\n$ docker run --name nginx -d -p 80:80 -v ~/nginx/html:/usr/share/nginx/html nginx "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建容器并映射端口、挂载卷")]),a._v("\n")])])]),e("ul",[e("li",[e("code",[a._v("-i")]),a._v(" "),e("code",[a._v("--interactive=true|false")]),a._v(" 可进入交互式操作")]),a._v(" "),e("li",[e("code",[a._v("-t")]),a._v(" "),e("code",[a._v("--tty=true|false")]),a._v(" 指定使用哪个终端进行交互")]),a._v(" "),e("li",[e("code",[a._v("-d")]),a._v(" 在后台创建容器")]),a._v(" "),e("li",[e("code",[a._v("-v")]),a._v(" 挂载卷")]),a._v(" "),e("li",[e("code",[a._v("-p")]),a._v(" 映射端口")]),a._v(" "),e("li",[e("code",[a._v("-u")]),a._v(" 使用某用户权限创建")]),a._v(" "),e("li",[e("code",[a._v("--name")]),a._v(" 指定容器名称")]),a._v(" "),e("li",[a._v("在运行交互式容器的时候，使用 "),e("code",[a._v("Ctrl + P + Q")]),a._v(" 或 "),e("code",[a._v("exit")]),a._v(" 命令退出容器")]),a._v(" "),e("li",[e("code",[a._v("containerName")]),a._v("可以写为"),e("code",[a._v("containerID")])])]),a._v(" "),e("h3",{attrs:{id:"连接容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连接容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 连接容器")]),a._v(" "),e("p",[a._v("可以将一个容器简单理解为一个虚拟机，要进入一个运行中的容器，也就是连接容器，需要使用以下命令：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),a._v(" nginx "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 进入容器nginx")]),a._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),a._v(" -it jenkins "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用bash解释器进入容器jenkins")]),a._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),a._v(" server "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello world"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 进入容器server并执行命令")]),a._v("\n")])])]),e("h3",{attrs:{id:"其他基本操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他基本操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 其他基本操作")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker start "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 启动容器")]),a._v("\n$ docker stop "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 停止容器")]),a._v("\n$ docker restart "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 重启容器")]),a._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("kill")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 杀死容器")]),a._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出正在运行的容器")]),a._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -a "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出所有容器")]),a._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除一个容器")]),a._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" -f "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 强制删除一个正在运行的容器")]),a._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -aq"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除所有容器")]),a._v("\n$ docker stop "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -q"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 停止所有正在运行中的容器")]),a._v("\n$ docker stop "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -q"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -aq"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 停用并删除所有容器")]),a._v("\n")])])]),e("h2",{attrs:{id:"版本控制与镜像上传"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本控制与镜像上传","aria-hidden":"true"}},[a._v("#")]),a._v(" 版本控制与镜像上传")]),a._v(" "),e("p",[a._v("docker版本控制操作跟git版本控制类似")]),a._v(" "),e("h3",{attrs:{id:"登录-dockerhub"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#登录-dockerhub","aria-hidden":"true"}},[a._v("#")]),a._v(" 登录 dockerHub")]),a._v(" "),e("p",[a._v("上传镜像之前，需要先登录docker:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker login -u "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("user"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" -p "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("password"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("h3",{attrs:{id:"将容器保存为镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将容器保存为镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 将容器保存为镜像")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker commit "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image:tag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 例如")]),a._v("\n$ docker commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"change"')]),a._v(" -a "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"quanzaiyu"')]),a._v(" server 731734107/test\n")])])]),e("imgLink",{attrs:{src:"date/20181012/002.png"}}),a._v(" "),e("p",[a._v("以上命令, 将容器 server 以 quanzaiyu 为作者提交, 并保存为镜像 731734107/test")]),a._v(" "),e("p",[a._v("选项:")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("-m")]),a._v(" "),e("code",[a._v("--message")]),a._v(" 提交内容")]),a._v(" "),e("li",[e("code",[a._v("-a")]),a._v(" "),e("code",[a._v("--author")]),a._v(" 作者")])]),a._v(" "),e("h3",{attrs:{id:"给已有的镜像打标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#给已有的镜像打标签","aria-hidden":"true"}},[a._v("#")]),a._v(" 给已有的镜像打标签")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker tag "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image:tag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("repo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("/"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image:tag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 例如")]),a._v("\n$ docker tag centos 731734107/test\n")])])]),e("h3",{attrs:{id:"上传镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#上传镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 上传镜像")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker push 731734107/test\n")])])]),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),e("p",[a._v("需要上传的镜像名需要以自己的用户名开头")])]),a._v(" "),e("p",[a._v("搜索镜像，发现已经有咯:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker search 731734107\nINDEX       NAME                       DESCRIPTION   STARS     OFFICIAL   AUTOMATED\ndocker.io   docker.io/731734107/test                 0\n")])])]),e("h3",{attrs:{id:"查看容器文件的变动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看容器文件的变动","aria-hidden":"true"}},[a._v("#")]),a._v(" 查看容器文件的变动")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("diff")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("p",[a._v("可以看到文件的变更情况，其中：")]),a._v(" "),e("ul",[e("li",[a._v("A 添加的文件")]),a._v(" "),e("li",[a._v("C 修改的文件")]),a._v(" "),e("li",[a._v("D 删除的文件")])]),a._v(" "),e("h2",{attrs:{id:"docker-私有仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-私有仓库","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 私有仓库")]),a._v(" "),e("h3",{attrs:{id:"docker注册服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker注册服务器","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker注册服务器")]),a._v(" "),e("p",[a._v("下载 registry 镜像, 并创建容器")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker pull registry "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 下载Docker注册服务器镜像")]),a._v("\n$ docker run -d \\\n  -p 5000:5000 \\\n  --name server-registry \\\n  -v /tmp/registry:/tmp/registry \\\n  registry "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 运行Docker注册服务器")]),a._v("\n")])])]),e("h3",{attrs:{id:"将私有仓库上传到docker注册服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将私有仓库上传到docker注册服务器","aria-hidden":"true"}},[a._v("#")]),a._v(" 将私有仓库上传到Docker注册服务器")]),a._v(" "),e("p",[a._v("首先，得对需要上传的镜像打标签，并指定Docker注册服务器的地址")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[root@node1 ~]# docker tag centos:latest localhost:5000/centos:1.0\n")])])]),e("p",[a._v("然后，将打了标签的镜像上传到Docker注册服务器：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[root@node1 ~]# docker push localhost:5000/centos:1.0\nThe push refers to a repository [localhost:5000/centos]\nf972d139738d: Pushed\n1.0: digest: sha256:dc29e2bcceac52af0f01300402f5e756cc8c44a310867f6b94f5f7271d4f3fec size: 529\n")])])]),e("p",[a._v("注意，这里由于是在一台机子上演示的，所以意义不大，通常我们会在另一台机器上开一个Docker注册服务器。将镜像上传到另一个机器上, 这里的 localhost:5000 就是另一台机器的镜像仓库地址。")]),a._v(" "),e("h3",{attrs:{id:"拉取私有仓库镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拉取私有仓库镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 拉取私有仓库镜像")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[root@node1 ~]# docker pull localhost:5000/centos:1.0\nTrying to pull repository localhost:5000/centos ...\n1.0: Pulling from localhost:5000/centos\nDigest: sha256:dc29e2bcceac52af0f01300402f5e756cc8c44a310867f6b94f5f7271d4f3fec\nStatus: Image is up to date for localhost:5000/centos:1.0\n\n# 如果没有指定标签，而指定镜像又没有latest标签，则报错\n\n[root@node1 ~]# docker pull localhost:5000/centos\nUsing default tag: latest\nTrying to pull repository localhost:5000/centos ...\nPulling repository localhost:5000/centos\nError: image centos:latest not found\n")])])]),e("h2",{attrs:{id:"docker-其他命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-其他命令","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 其他命令")]),a._v(" "),e("p",[a._v("要查看某个命令的帮助文档，跟上 "),e("code",[a._v("--help")]),a._v(" 即可。比如 "),e("code",[a._v("docker search --help")])]),a._v(" "),e("h3",{attrs:{id:"查看docker是否运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看docker是否运行","aria-hidden":"true"}},[a._v("#")]),a._v(" 查看Docker是否运行")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -ef "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" docker\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# or")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" aux "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" docker\n")])])]),e("h3",{attrs:{id:"复制容器内文件到本地"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复制容器内文件到本地","aria-hidden":"true"}},[a._v("#")]),a._v(" 复制容器内文件到本地")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container:path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("loaclPath"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 从容器中复制文件到宿主机")]),a._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("loaclPath"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container:path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 从宿主机中复制文件到容器")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 示例")]),a._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" server1:/etc/hosts ./ "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 从容器中复制文件到宿主机")]),a._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" ./hosts server1:/opt "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 从宿主机中复制文件到容器")]),a._v("\n")])])]),e("h3",{attrs:{id:"查看镜像或容器详细信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看镜像或容器详细信息","aria-hidden":"true"}},[a._v("#")]),a._v(" 查看镜像或容器详细信息")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker inspect "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image:tag or container"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("p",[a._v("可以使用管道过滤出有用的信息，如：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker inspect server "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" IPAddress\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"SecondaryIPAddresses"')]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v(":")]),a._v(" null,\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"IPAddress"')]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"172.17.0.2"')]),a._v(",\n            "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"IPAddress"')]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"172.17.0.2"')]),a._v(",\n")])])]),e("h3",{attrs:{id:"查看容器内进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看容器内进程","aria-hidden":"true"}},[a._v("#")]),a._v(" 查看容器内进程")]),a._v(" "),e("p",[a._v("使用 "),e("code",[a._v("docker top [container]")]),a._v(" 命令查看容器内进程：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("top")]),a._v(" server\nUID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD\nroot                4932                4917                0                   00:28               ?                   00:00:00            /bin/sh -c "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("echo")]),a._v(" Hello world"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),a._v(" 1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("done")]),a._v("\nroot                5708                4932                0                   00:38               ?                   00:00:00            "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),a._v(" 1\n")])])]),e("h3",{attrs:{id:"查看日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看日志","aria-hidden":"true"}},[a._v("#")]),a._v(" 查看日志")]),a._v(" "),e("p",[a._v("使用 logs 命令可以查看容器运行日志")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker logs -f -t --tail "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("ul",[e("li",[a._v("-f: --follows=true|false 默认false，一直跟踪log的变化并返回结果")]),a._v(" "),e("li",[a._v("-t: --timestamps=true|false 在返回的日志中添加时间戳")]),a._v(" "),e("li",[a._v('--tail="all" 默认all，返回结尾处多少数量的日志')])]),a._v(" "),e("p",[a._v("直接使用，打印出当前时间点之前的日志，比如运行一个每隔一秒输出一段话的脚本：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker run --name server1 -d ubuntu /bin/sh -c "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"while true; do echo Hello world; sleep 1;done"')]),a._v("\ne1306e60672a152de4a38d2541279124c98347a13c2e612c386694c442db0708\n$ docker logs server1\nHello world\nHello world\nHello world\n")])])]),e("p",[a._v("以下日志会不断更新：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker logs server2 --tail 10 -tf\n2018-10-14T16:35:38.188534000Z Hello world\n2018-10-14T16:35:39.189464000Z Hello world\n2018-10-14T16:35:40.191417000Z Hello world\n")])])]),e("h2",{attrs:{id:"端口映射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#端口映射","aria-hidden":"true"}},[a._v("#")]),a._v(" 端口映射")]),a._v(" "),e("p",[a._v("在创建容器的时候, 可以指定容器到宿主机的端口映射, 使用 "),e("code",[a._v("-p")]),a._v(" 参数指定, 有四种格式:")]),a._v(" "),e("ol",[e("li",[a._v("containerPort")])]),a._v(" "),e("p",[a._v("只指定容器中的端口，将自动分配宿主机的映射端口")]),a._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[a._v("hostPort:containerPort")])]),a._v(" "),e("p",[a._v("明确指定宿主机端口与容器端口之间的映射关系")]),a._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[a._v("ip::containerPort")])]),a._v(" "),e("p",[a._v("指定宿主机端口，将容器中端口映射到宿主机相同端口")]),a._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[a._v("ip:hostPort:containerPort")])]),a._v(" "),e("p",[a._v("指定宿主机端口和容器端口，将容器中端口映射到宿主机指定端口")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker run -p 80 -it --name server ubuntu /bin/bash\n$ docker run -p 8080:80 -it --name server ubuntu /bin/bash\n$ docker run -p 0.0.0.0:80 -it --name server ubuntu /bin/bash\n$ docker run -p 0.0.0.0:8080:80 -it --name server ubuntu /bin/bash\n")])])]),e("ul",[e("li",[a._v("使用 -P 将容器暴露的所有端口进行映射")]),a._v(" "),e("li",[a._v("使用 -p 将容器中指定端口进行映射")])]),a._v(" "),e("h3",{attrs:{id:"查看容器与宿主机端口映射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看容器与宿主机端口映射","aria-hidden":"true"}},[a._v("#")]),a._v(" 查看容器与宿主机端口映射")]),a._v(" "),e("p",[a._v("使用 "),e("code",[a._v("docker port [container]")]),a._v(" 命令可以查看容器与宿主机的端口映射：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker port nginx_server\n80/tcp -"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 0.0.0.0:8080\n")])])]),e("h2",{attrs:{id:"数据管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据管理","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据管理")]),a._v(" "),e("h3",{attrs:{id:"数据卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据卷","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据卷")]),a._v(" "),e("p",[a._v("数据卷（Data Volume）是一个经过特殊设计的目录，可以绕过联合文件系统（UFS），为一个或多个容器提供访问。")]),a._v(" "),e("p",[a._v("数据卷设计的目的，在于数据的永久化，它完全独立于容器的生存周期，因此，Docker 不会再容器删除时删除其挂载的数据卷，也不会存在类似的垃圾回收机制对容器应用的数据卷进行删除处理。")]),a._v(" "),e("imgLink",{attrs:{src:"date/20181026/004.png"}}),a._v(" "),e("p",[a._v("数据卷的特点：")]),a._v(" "),e("ul",[e("li",[a._v("数据卷在容器启动时初始化，如果容器使用的镜像在挂载点包含了数据，这些数据会拷贝到新初始化的数据卷中")]),a._v(" "),e("li",[a._v("数据卷存在于宿主机中，可宿主机与容器进行共享")]),a._v(" "),e("li",[a._v("数据卷可以在容器间共享和重用")]),a._v(" "),e("li",[a._v("可以对数据卷里的内容直接进行修改")]),a._v(" "),e("li",[a._v("数据卷的变化不会影响镜像的更新")]),a._v(" "),e("li",[a._v("卷会一直存在，即使挂载数据卷的容器已经被删除")])]),a._v(" "),e("h3",{attrs:{id:"添加数据卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加数据卷","aria-hidden":"true"}},[a._v("#")]),a._v(" 添加数据卷")]),a._v(" "),e("p",[a._v("使用 -v（--volume） 选项为容器添加数据卷：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker run --name server -v ~/data_volume:/data -it ubuntu /bin/bash\n")])])]),e("p",[a._v("其中 "),e("code",[a._v("~/data_volume")]),a._v(" 为宿主机上的目录，"),e("code",[a._v("/data")]),a._v(" 为容器中映射的目录。")]),a._v(" "),e("h3",{attrs:{id:"指定访问权限"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指定访问权限","aria-hidden":"true"}},[a._v("#")]),a._v(" 指定访问权限")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker run --name server -v ~/data_volume:/data:ro -it ubuntu /bin/bash\n")])])]),e("p",[a._v("在创建容器的时候，可以在数据卷映射参数后面加上访问权限，比如上面的 "),e("code",[a._v("ro")]),a._v("，是只读权限。")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("ro")]),a._v(" read only")]),a._v(" "),e("li",[e("code",[a._v("rw")]),a._v(" read write")])]),a._v(" "),e("h3",{attrs:{id:"dockerfile-配置数据卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-配置数据卷","aria-hidden":"true"}},[a._v("#")]),a._v(" Dockerfile 配置数据卷")]),a._v(" "),e("p",[a._v("在使用 Dockerfile 构建包含数据卷的镜像：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('VOLUME["volumePath1"]\n')])])]),e("p",[a._v("::: 注意\n使用 VOLUME 指令需要提供一个数组，指定的都是容器中的路径，在容器启动时不需要添加 -v 指令，系统会自动分配一个宿主机的目录映射到指定的数据卷目录。\n:::")]),a._v(" "),e("h3",{attrs:{id:"数据卷容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据卷容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据卷容器")]),a._v(" "),e("p",[a._v("命名的容器挂载数据卷，其他容器通过挂载这个容器实现数据共享，挂载数据卷的容器就叫做数据卷容器。")]),a._v(" "),e("imgLink",{attrs:{src:"date/20181026/005.png"}}),a._v(" "),e("p",[a._v("挂载数据卷容器的方法：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker run --volumes-from "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("CONTAINER NAME"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("p",[a._v("通过数据卷容器，可以在不暴露宿主机映射目录的情况下，使用已知容器创建的数据卷。")]),a._v(" "),e("h3",{attrs:{id:"删除数据卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除数据卷","aria-hidden":"true"}},[a._v("#")]),a._v(" 删除数据卷")]),a._v(" "),e("p",[a._v("默认情况下，删除挂载了数据卷的容器并不会删除数据卷，但可以使用以下命令来达到删除容器的同时并删除数据卷的目的：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ docker rm -v [container name]\n")])])]),e("h3",{attrs:{id:"数据卷备份还原"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据卷备份还原","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据卷备份还原")]),a._v(" "),e("p",[a._v("通过以下命令进行数据卷备份：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker run \\\n  --volumes-from "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" \\\n  -v "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("pwd")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(":/backup \\\n  ubuntu \\\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" cvf /backup/backup.tar "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container data volume"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("imgLink",{attrs:{src:"date/20181026/006.png"}}),a._v(" "),e("p",[a._v("比如：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker run \\\n  --volumes-from container \\\n  -v ~/backup:/backup \\\n  ubuntu \\\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" cvf /backup/backup.tar /data_volume\n")])])]),e("p",[a._v("以上命令，将使用 "),e("code",[a._v("tar cvf")]),a._v(" 命令将数据卷目录 "),e("code",[a._v("/data_volume")]),a._v(" 打包到 "),e("code",[a._v("/backup/backup.tar")]),a._v("，并使容器中 "),e("code",[a._v("/backup")]),a._v(" 目录与 "),e("code",[a._v("~/backup")]),a._v(" 目录进行关联，达到备份的目的。")]),a._v(" "),e("p",[a._v("同样地，也可以使用 "),e("code",[a._v("tar xvf")]),a._v(" 命令以相同的格式还原一个数据卷：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker run \\\n  --volumes-from "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" \\\n  -v "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("pwd")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(":/backup \\\n  ubuntu \\\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" xvf /backup/backup.tar "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container data volume"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("h2",{attrs:{id:"dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile","aria-hidden":"true"}},[a._v("#")]),a._v(" Dockerfile")]),a._v(" "),e("h3",{attrs:{id:"文件格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件格式","aria-hidden":"true"}},[a._v("#")]),a._v(" 文件格式")]),a._v(" "),e("ul",[e("li",[a._v("注释: 以 # 开头的是注释语句")]),a._v(" "),e("li",[a._v("指令: "),e("code",[a._v("INSTRUCTION argument")])])]),a._v(" "),e("h3",{attrs:{id:"常用指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用指令","aria-hidden":"true"}},[a._v("#")]),a._v(" 常用指令")]),a._v(" "),e("h4",{attrs:{id:"from"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#from","aria-hidden":"true"}},[a._v("#")]),a._v(" FROM")]),a._v(" "),e("p",[a._v("指定基础镜像。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("FROM [image]\nFROM [image:tag]\n")])])]),e("ul",[e("li",[a._v("必须是已经存在的基础镜像")]),a._v(" "),e("li",[a._v("必须是第一条非注释指令")])]),a._v(" "),e("h4",{attrs:{id:"maintainer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maintainer","aria-hidden":"true"}},[a._v("#")]),a._v(" MAINTAINER")]),a._v(" "),e("p",[a._v("指定镜像的作者信息，包括镜像的所有者和联系信息。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("MAINTAINER [name]\n")])])]),e("h4",{attrs:{id:"run"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run","aria-hidden":"true"}},[a._v("#")]),a._v(" RUN")]),a._v(" "),e("p",[a._v("指定当前镜像中运行的命令。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('RUN [command] # shell 模式\nRUN ["executable", "param1", "param2"] # exec 模式\n')])])]),e("p",[a._v("在 shell 模式下，是以 "),e("code",[a._v("/bin/sh -c command")]),a._v(" 开始执行命令")]),a._v(" "),e("p",[a._v("比如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("RUN echo hello\n")])])]),e("p",[a._v("在 exec 模式下，可以使用其他的 shell 执行命令")]),a._v(" "),e("p",[a._v("每个 RUN 命令都会在当前镜像上层创建一个新的镜像来运行命令。")]),a._v(" "),e("p",[a._v("所以，不要过多书写 RUN 指令，尽量将多个命令合并。")]),a._v(" "),e("h4",{attrs:{id:"expose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expose","aria-hidden":"true"}},[a._v("#")]),a._v(" EXPOSE")]),a._v(" "),e("p",[a._v("指定运行该镜像的容器使用的端口。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("EXPOSE [port1] [port2] ...\n")])])]),e("p",[a._v("但是运行时Docker并不会自动开启对应服务，还需要手动开启对应的服务并添加端口的映射指令，比如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('$ docker run --name nginx-server -p 80 -d ubuntu:latest nginx -g "daemon off;"\n')])])]),e("h4",{attrs:{id:"cmd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cmd","aria-hidden":"true"}},[a._v("#")]),a._v(" CMD")]),a._v(" "),e("p",[a._v("跟 RUN 命令使用方法类似，也是运行一个指令：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('CMD [command] # shell 模式\nCMD ["executable", "param1", "param2"] # exec 模式\nCMD ["param1", "param2"] # 作为 ENTRYPOINT 指令的默认参数\n')])])]),e("p",[a._v("与 RUN 命令的区别：")]),a._v(" "),e("ul",[e("li",[a._v("RUN 命令时在镜像构建时运行")]),a._v(" "),e("li",[a._v("CMD 命令是在容器启动时运行")])]),a._v(" "),e("p",[a._v("比如:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("CMD ['/usr/sbin/nginx', '-g', 'deamon off;']\n")])])]),e("p",[a._v("指定 CMD 命令之后，运行容器的时候就不需要在后面加上运行参数了，不过还是得指定端口映射：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ docker run --name nginx-server -p 80 -d ubuntu:latest\n")])])]),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),e("p",[a._v("如果在启动一个容器时，指定了运行时命令，则 CMD 中的命令会被覆盖。")])]),a._v(" "),e("h4",{attrs:{id:"entrypoint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint","aria-hidden":"true"}},[a._v("#")]),a._v(" ENTRYPOINT")]),a._v(" "),e("p",[a._v("也是运行一个命令，与 RUN 不同的是，ENTRYPOINT 中的指令不会被运行容器时覆盖。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('ENTRYPOINT [command] # shell 模式\nENTRYPOINT ["executable", "param1", "param2"] # exec 模式\n')])])]),e("p",[a._v("运行容器时如果必须覆盖 ENTRYPOINT 中的命令，需要使用")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run -- entrypoint [command]\n")])])]),e("p",[a._v("进行覆盖。")]),a._v(" "),e("h4",{attrs:{id:"add-和-copy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-和-copy","aria-hidden":"true"}},[a._v("#")]),a._v(" ADD 和 COPY")]),a._v(" "),e("p",[a._v("ADD 和 COPY 都是复制文件。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('ADD [src]...  [dest]\nADD ["src"... "dest"] # 适用于文件路径中有空格的情况\n\nCOPY [src]...  [dest]\nCOPY ["src"... "dest"] # 适用于文件路径中有空格的情况\n')])])]),e("p",[a._v("区别为：ADD 包含了类似 tar 的解压功能")]),a._v(" "),e("p",[a._v("如果只是简单的复制文件，推荐使用 COPY。")]),a._v(" "),e("h4",{attrs:{id:"volume"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volume","aria-hidden":"true"}},[a._v("#")]),a._v(" VOLUME")]),a._v(" "),e("p",[a._v("用来向基于镜像创建的容器添加卷。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('VOLUME ["/data"]\n')])])]),e("h4",{attrs:{id:"workdir"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#workdir","aria-hidden":"true"}},[a._v("#")]),a._v(" WORKDIR")]),a._v(" "),e("p",[a._v("设置工作目录，即创建容器后进入的目录，CMD 和 ENTRYPOINT 命令都会在这个目录下执行。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("WORKDIR /path/to/dir\n")])])]),e("h4",{attrs:{id:"env"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#env","aria-hidden":"true"}},[a._v("#")]),a._v(" ENV")]),a._v(" "),e("p",[a._v("设置环境变量。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ENV [key] [value]\nENV [key]=[value]\n")])])]),e("h4",{attrs:{id:"user"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#user","aria-hidden":"true"}},[a._v("#")]),a._v(" USER")]),a._v(" "),e("p",[a._v("指定容器为哪个用户运行，可以使用uid（用户）和gid（用户组），以及其组合。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("USER daemon\n")])])]),e("p",[a._v("有以下几种组合：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("USER user\nUSER user:group\nUSER user:gid\nUSER uid\nUSER uid:group\nUSER uid:gid\n")])])]),e("p",[a._v("默认使用 root 用户。")]),a._v(" "),e("h4",{attrs:{id:"onbuild"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#onbuild","aria-hidden":"true"}},[a._v("#")]),a._v(" ONBUILD")]),a._v(" "),e("p",[a._v("ONBUILD 是一个镜像触发器。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ONBUILD [INSTRUCTION]\n")])])]),e("p",[a._v("当一个镜像被其他镜像作为基础镜像时执行，会在构建过程中插入指令。")]),a._v(" "),e("h3",{attrs:{id:"dockerfile-示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-示例","aria-hidden":"true"}},[a._v("#")]),a._v(" Dockerfile 示例")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# My First Dockerfile\nFROM ubuntu:14.04\nMAINTAINER quanzaiyu \"quanzaiyu@163.com\"\nENV REFERSH_DATE 2015-04-01\nRUN apt-get update && apt-get install -y nginx\nCOPY index.html /usr/share/nginx/html # 将宿主机的文件覆盖到容器中\nEXPOSE 80\nENTRYPOINT ['/usr/sbin/nginx', '-g', 'deamon off;']\nCMD echo 'created'\n")])])]),e("p",[a._v("为 CentOS 安装常用工具")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("FROM centos:latest\nRUN yum update -y && yum install net-tools.x86_64 -y\nEXPOSE 80\nCMD /bin/bash\n")])])]),e("h3",{attrs:{id:"使用-dockerfile-构建镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-dockerfile-构建镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用 Dockerfile 构建镜像")]),a._v(" "),e("p",[a._v("使用 docker build 构建镜像的格式:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ docker build "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" PATH "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" URL "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" -\n")])])]),e("p",[a._v("其中 OPTIONS 包括：")]),a._v(" "),e("ul",[e("li",[a._v("--force-rm=false")]),a._v(" "),e("li",[a._v("--no-cache=false")]),a._v(" "),e("li",[a._v("--pull=false")]),a._v(" "),e("li",[a._v("-q, --quiet-false")]),a._v(" "),e("li",[a._v("--rm=true")]),a._v(" "),e("li",[a._v('-t, --tag="" 为镜像取个名字（打标签）')])]),a._v(" "),e("p",[a._v("如果 Docker 文件就在当前目录，则：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('$ docker build -t "731734107/test" .\n')])])]),e("h3",{attrs:{id:"dockerfile-构建过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-构建过程","aria-hidden":"true"}},[a._v("#")]),a._v(" Dockerfile 构建过程")]),a._v(" "),e("ol",[e("li",[a._v("从基础镜像运行一个容器")]),a._v(" "),e("li",[a._v("执行一条指令，对容器做出修改")]),a._v(" "),e("li",[a._v("执行类似 docker commit 的操作，提交一个新的镜像层")]),a._v(" "),e("li",[a._v("再基于刚提交的镜像运行一个新容器")]),a._v(" "),e("li",[a._v("执行 Dockerfile 中的下一条指令，直至所有指令执行完毕")])]),a._v(" "),e("p",[a._v("构建过程中，会生成一些中间层镜像，可以使用中间层镜像进行调试，便于定位错误的位置。")]),a._v(" "),e("p",[a._v("正常情况下，构建镜像会用到缓存，这样可以提升构建速度，但有的时候不想用缓存，可以在构建命令中加入 "),e("code",[a._v("--no-cache")]),a._v(" 选项。")]),a._v(" "),e("p",[a._v("另外，修改环境变量也可以刷新缓存，比如上面的 Dockerfile 示例中，改变 REFERSH_DATE 的值即可。")]),a._v(" "),e("p",[a._v("可以使用 "),e("code",[a._v("docker history")]),a._v(" 命令查看镜像的构建过程。")]),a._v(" "),e("h2",{attrs:{id:"docker-依赖的相关技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-依赖的相关技术","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker 依赖的相关技术")]),a._v(" "),e("h3",{attrs:{id:"namespaces-命名空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#namespaces-命名空间","aria-hidden":"true"}},[a._v("#")]),a._v(" Namespaces 命名空间")]),a._v(" "),e("ul",[e("li",[a._v("PID（Process ID） 进程隔离")]),a._v(" "),e("li",[a._v("NET（Network） 管理网络接口")]),a._v(" "),e("li",[a._v("IPC（InterProcess Communication） 管理跨进程通信的访问")]),a._v(" "),e("li",[a._v("MNT（Mount） 管理挂载点")]),a._v(" "),e("li",[a._v("UTS（Unix Timesharing System） 隔离内核和版本标识")])]),a._v(" "),e("h3",{attrs:{id:"control-groups-控制组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#control-groups-控制组","aria-hidden":"true"}},[a._v("#")]),a._v(" Control Groups 控制组")]),a._v(" "),e("p",[a._v("Control Groups 用来分配资源，此技术来源于 Google，在2007年整合进 Linux Kernel 2.6.24 。")]),a._v(" "),e("p",[a._v("Control Groups 有以下作用：")]),a._v(" "),e("ul",[e("li",[a._v("资源限制")]),a._v(" "),e("li",[a._v("优先级设定")]),a._v(" "),e("li",[a._v("资源计量")]),a._v(" "),e("li",[a._v("资源控制")])]),a._v(" "),e("h3",{attrs:{id:"c-s-模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-s-模式","aria-hidden":"true"}},[a._v("#")]),a._v(" C/S 模式")]),a._v(" "),e("imgLink",{attrs:{src:"date/20181014/002.png"}}),a._v(" "),e("h4",{attrs:{id:"remote-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remote-api","aria-hidden":"true"}},[a._v("#")]),a._v(" Remote API")]),a._v(" "),e("h4",{attrs:{id:"连接方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连接方式","aria-hidden":"true"}},[a._v("#")]),a._v(" 连接方式")]),a._v(" "),e("ul",[e("li",[a._v("unix://var/run/docker.sock")]),a._v(" "),e("li",[a._v("tcp://host:port")]),a._v(" "),e("li",[a._v("fd://socketfd")])]),a._v(" "),e("h2",{attrs:{id:"解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决方案","aria-hidden":"true"}},[a._v("#")]),a._v(" 解决方案")]),a._v(" "),e("h3",{attrs:{id:"在-vmware-中提示-vm-与-device-credential-guard-不兼容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-vmware-中提示-vm-与-device-credential-guard-不兼容","aria-hidden":"true"}},[a._v("#")]),a._v(" 在 VMWare 中提示 VM 与 Device/Credential Guard 不兼容")]),a._v(" "),e("p",[a._v("如果开启虚拟机的时候提示：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("VM 与 Device/Credential Guard 不兼容。在禁用 Device/Credential Guard 后，可以运行 VM。\n")])])]),e("p",[a._v("这说明本机中同时开启了 Hyper-v 服务，解决步骤如下：")]),a._v(" "),e("ol",[e("li",[a._v("禁用Device Guard或Credential Guard")])]),a._v(" "),e("p",[a._v("运行 "),e("code",[a._v("gpedit.msc")]),a._v(" 本地组策略编辑器。")]),a._v(" "),e("p",[a._v("转至 "),e("code",[a._v("本地计算机策略 > 计算机配置 > 管理模板 > 系统 > Device Guard（或者是： 设备防护） > 打开基于虚拟化的安全性")]),a._v("。 选择已禁用。")]),a._v(" "),e("imgLink",{attrs:{src:"date/20181012/001.png"}}),a._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[a._v("通过命令关闭Hyper-V（控制面板关闭Hyper-V起不到决定性作用，要彻底关闭Hyper-V）")])]),a._v(" "),e("p",[a._v("以管理员身份运行Windows Powershell (管理员)（Windows键+X），运行下面命令并重启电脑：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("bcdedit /set hypervisorlaunchtype off\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("重启电脑即可")])]),a._v(" "),e("p",[a._v("参考："),e("a",{attrs:{href:"https://blog.csdn.net/qq_36761831/article/details/81175736",target:"_blank",rel:"noopener noreferrer"}},[a._v("解决VM 与 Device/Credential Guard 不兼容。在禁用 Device/Credential Guard 后，可以运行 VM 的方法"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"docker-warning-ipv4-forwarding-is-disabled"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-warning-ipv4-forwarding-is-disabled","aria-hidden":"true"}},[a._v("#")]),a._v(" docker WARNING: IPv4 forwarding is disabled.")]),a._v(" "),e("p",[a._v("连不上网，连不上网，连不上网，那叫一个郁闷，查了资料，发现解决方案其实很简单：")]),a._v(" "),e("p",[a._v("在宿主机上运行：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ echo net.ipv4.ip_forward=1 >> /usr/lib/sysctl.d/00-system.conf\n$ systemctl restart network && systemctl restart docker\n")])])]),e("p",[a._v("即可解决。")]),a._v(" "),e("p",[a._v("参考："),e("a",{attrs:{href:"http://blog.51cto.com/11804445/2055911",target:"_blank",rel:"noopener noreferrer"}},[a._v("docker WARNING: IPv4 forwarding is disabled. 解决方法"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"ubuntu-unable-to-locate-package"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu-unable-to-locate-package","aria-hidden":"true"}},[a._v("#")]),a._v(" ubuntu: Unable to locate package")]),a._v(" "),e("p",[a._v("在装了一个 Ubuntu 的 Docker 镜像后，attach 进入后使用 "),e("code",[a._v("apt-get install")]),a._v(" 提示："),e("code",[a._v("Unable to locate package")]),a._v("，解决方法很简单：")]),a._v(" "),e("p",[a._v("先执行 "),e("code",[a._v("apt-get install")]),a._v(" 即可。")]),a._v(" "),e("p",[a._v("参考："),e("a",{attrs:{href:"https://blog.csdn.net/xiaogugood/article/details/18400669",target:"_blank",rel:"noopener noreferrer"}},[a._v("Linux新手入门：Unable to locate package错误解决办法"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"在容器内-permission-denied"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在容器内-permission-denied","aria-hidden":"true"}},[a._v("#")]),a._v(" 在容器内 Permission denied")]),a._v(" "),e("p",[a._v("进入容器后, 查看当前目录提示 "),e("code",[a._v("Permission denied")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("root@30cecd834d78:/usr/share/nginx/html# ls\nls: cannot open directory '.': Permission denied\n")])])]),e("p",[a._v("解决方案有以下三种")]),a._v(" "),e("ol",[e("li",[a._v("在宿主机中执行 "),e("code",[a._v("setenforce 0")])]),a._v(" "),e("li",[a._v("运行时添加 "),e("code",[a._v("--privileged=true")])]),a._v(" "),e("li",[a._v("添加linux规则，把要挂载的目录添加到selinux白名单")])]),a._v(" "),e("p",[a._v("更改安全性文本的格式如下")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ chcon "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-R"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-t type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-u user"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-r role"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" 文件或者目录\n")])])]),e("p",[a._v("参数")]),a._v(" "),e("ul",[e("li",[a._v("-R  ：该目录下的所有目录也同时修改；")]),a._v(" "),e("li",[a._v("-t  ：后面接安全性本文的类型字段，例如 httpd_sys_content_t ；")]),a._v(" "),e("li",[a._v("-u  ：后面接身份识别，例如 system_u；")]),a._v(" "),e("li",[a._v("-r  ：后面街觇色，例如 system_r")])]),a._v(" "),e("p",[a._v("例如")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ chcon -Rt svirt_sandbox_file_t ~/nginx/html\n")])])]),e("p",[a._v("参考: "),e("a",{attrs:{href:"https://blog.csdn.net/u012326462/article/details/81038446",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker -v 对挂载的目录没有权限 Permission denied"),e("OutboundLink")],1)]),a._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[a._v("#")]),a._v(" 参考资料")]),a._v(" "),e("p",[a._v("镜像")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://mirrors.aliyun.com/docker-toolbox/",target:"_blank",rel:"noopener noreferrer"}},[a._v("FTP: docker-toolbox"),e("OutboundLink")],1)])]),a._v(" "),e("p",[a._v("教程")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://www.runoob.com/docker/docker-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker 教程 - runoob"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://legacy.gitbook.com/book/yeasy/docker_practice/details",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker —— 从入门到实践 - GitBook"),e("OutboundLink")],1),a._v("、"),e("a",{attrs:{href:"https://yeasy.gitbooks.io/docker_practice/content/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker — 从入门到实践"),e("OutboundLink")],1)])]),a._v(" "),e("p",[a._v("应用")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://blog.csdn.net/u013948858/article/details/79974796",target:"_blank",rel:"noopener noreferrer"}},[a._v("daemon.json的作用"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"http://dockone.io/article/783",target:"_blank",rel:"noopener noreferrer"}},[a._v("10张图带你深入理解Docker容器和镜像"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://www.jianshu.com/p/4e60cf1cf4b8",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker中修改镜像、容器的存放目录"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://blog.csdn.net/yhjay88/article/details/73790487",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker 修改镜像源地址"),e("OutboundLink")],1)])]),a._v(" "),e("p",[a._v("端口")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.jb51.net/article/127630.htm",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker 给运行中的容器设置端口映射的方法"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://blog.csdn.net/ztguang/article/details/51404112",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker 动态映射运行的container端口"),e("OutboundLink")],1)])])],1)},[],!1,null,null,null);t.default=r.exports}}]);