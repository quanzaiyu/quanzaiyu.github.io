(window.webpackJsonp=window.webpackJsonp||[]).push([[528],{929:function(e,t,s){"use strict";s.r(t);var a=s(1),n=Object(a.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"使用-kubeadm-搭建-kubernetes-集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-kubeadm-搭建-kubernetes-集群","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用 Kubeadm 搭建 Kubernetes 集群")]),e._v(" "),s("h2",{attrs:{id:"准备工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备工作","aria-hidden":"true"}},[e._v("#")]),e._v(" 准备工作")]),e._v(" "),s("ul",[s("li",[e._v("BIOS中开启VT-X (如果是虚拟机注意设置)")]),e._v(" "),s("li",[e._v("科学上网 (由于GFW)")])]),e._v(" "),s("p",[e._v("配置三台CentOS虚拟机, 分别为:")]),e._v(" "),s("ul",[s("li",[e._v("192.168.126.129 k8s-master")]),e._v(" "),s("li",[e._v("192.168.126.130 k8s-node1")]),e._v(" "),s("li",[e._v("192.168.126.131 k8s-node2")])]),e._v(" "),s("h3",{attrs:{id:"关闭防火墙"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关闭防火墙","aria-hidden":"true"}},[e._v("#")]),e._v(" 关闭防火墙")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ systemctl stop firewalld\n$ systemctl disable firewalld\n")])])]),s("h3",{attrs:{id:"禁用selinux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#禁用selinux","aria-hidden":"true"}},[e._v("#")]),e._v(" 禁用SELinux")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ setenforce 0\n")])])]),s("p",[e._v("编辑文件 "),s("code",[e._v("/etc/selinux/config")]),e._v("，将SELINUX修改为disabled，如下：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s/SELINUX=permissive/SELINUX=disabled/'")]),e._v(" /etc/sysconfig/selinux\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#SELINUX=disabled")]),e._v("\n")])])]),s("h3",{attrs:{id:"关闭系统swap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关闭系统swap","aria-hidden":"true"}},[e._v("#")]),e._v(" 关闭系统Swap")]),e._v(" "),s("p",[e._v("Kubernetes 1.8开始要求关闭系统的Swap，如果不关闭，默认配置下kubelet将无法启动。方法一,通过kubelet的启动参数–fail-swap-on=false更改这个限制。方法二,关闭系统的Swap。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ swapoff -a\n")])])]),s("p",[e._v("修改 "),s("code",[e._v("/etc/fstab")]),e._v(" 文件，注释掉SWAP的自动挂载，使用 "),s("code",[e._v("free -m")]),e._v(" 确认swap已经关闭。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#注释掉swap分区")]),e._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s/.*swap.*/#&/'")]),e._v(" /etc/fstab\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /etc/fstab\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#/dev/mapper/centos-swap swap                    swap    defaults        0 0")]),e._v("\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("free")]),e._v(" -m\n              total        used        "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("free")]),e._v("      shared  buff/cache   available\nMem:            962         154         446           6         361         612\nSwap:             0           0           0\n")])])]),s("h2",{attrs:{id:"kubeadm-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kubeadm-简介","aria-hidden":"true"}},[e._v("#")]),e._v(" Kubeadm 简介")]),e._v(" "),s("p",[e._v("Kubeadm 是一个工具，它提供了 kubeadm init 以及 kubeadm join 这两个命令作为快速创建 kubernetes 集群的最佳实践。")]),e._v(" "),s("p",[e._v("kubeadm 通过执行必要的操作来启动和运行一个最小可用的集群。它被故意设计为只关心启动集群，而不是之前的节点准备工作。同样的，诸如安装各种各样值得拥有的插件，例如 Kubernetes Dashboard、监控解决方案以及特定云提供商的插件，这些都不在它负责的范围。")]),e._v(" "),s("p",[e._v("相反，我们期望由一个基于 kubeadm 从更高层设计的更加合适的工具来做这些事情；并且，理想情况下，使用 kubeadm 作为所有部署的基础将会使得创建一个符合期望的集群变得容易。")]),e._v(" "),s("h3",{attrs:{id:"与-minikube-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#与-minikube-的区别","aria-hidden":"true"}},[e._v("#")]),e._v(" 与 minikube 的区别")]),e._v(" "),s("p",[e._v("minikube基本上你可以认为是一个实验室工具，只能单机部署，里面整合了 k8s 最主要的组件，无法真正搭建集群，且由于程序做死无法安装各种扩展插件（比如网络插件、dns插件、ingress插件等等），主要作用是给你了解 k8s 用的。而 kudeadm 搭建出来是一个真正的 k8s 集群，可用于生产环境（HA需要自己做），和二进制搭建出来的集群几乎没有区别。")]),e._v(" "),s("h2",{attrs:{id:"设置源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置源","aria-hidden":"true"}},[e._v("#")]),e._v(" 设置源")]),e._v(" "),s("p",[e._v("在开始之前, 我们先对系统进行一整套的换源操作, 以保证后续操作能正常进行")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mv")]),e._v(" /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 备份")]),e._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -o /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v("EOF "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/yum.repos.d/kubernetes.repo\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("kubernetes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nname"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Kubernetes\nbaseurl"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("1\ngpgcheck"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("1\nrepo_gpgcheck"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("1\ngpgkey"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n")])])]),s("p",[e._v("执行下列命令刷新yum源缓存")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ yum clean all\n$ yum makecache\n$ yum repolist\n")])])]),s("p",[e._v("执行那么多命令也很烦, 我的习惯是写一个 shell 脚本, 然后直接执行即可:")]),e._v(" "),s("p",[s("code",[e._v("set-origin.sh")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("touch")]),e._v(" set-origin.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" 744 set-origin.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" set-origin.sh\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mv")]),e._v(" /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -o /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v("EOF "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/yum.repos.d/kubernetes.repo\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("kubernetes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nname"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Kubernetes\nbaseurl"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("1\ngpgcheck"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("1\nrepo_gpgcheck"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("1\ngpgkey"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\nyum clean all\nyum makecache\nyum repolist\n")])])]),s("h2",{attrs:{id:"安装必要的软件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装必要的软件","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装必要的软件")]),e._v(" "),s("h3",{attrs:{id:"docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker","aria-hidden":"true"}},[e._v("#")]),e._v(" docker")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 设置源(如果没有设置过的话)")]),e._v("\n$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n$ yum makecache fast\n\n$ yum "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y docker-ce\n")])])]),s("p",[s("strong",[e._v("docker基本操作")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ systemctl start docker "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 启动")]),e._v("\n$ systemctl stop docker "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 关闭")]),e._v("\n$ systemctl "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("enable")]),e._v(" docker "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 开机自启")]),e._v("\n$ systemctl restart docker "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 重启")]),e._v("\n")])])]),s("p",[s("strong",[e._v("docker基本信息")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ docker info "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 基本信息")]),e._v("\nContainers: 27\n Running: 18\n Paused: 0\n Stopped: 9\nImages: 15\nServer Version: 18.09.4\nStorage Driver: overlay2\n Backing Filesystem: xfs\n Supports d_type: "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n Native Overlay Diff: "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: bridge "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("host")]),e._v(" macvlan null overlay\n Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\nSwarm: inactive\nRuntimes: runc\nDefault Runtime: runc\nInit Binary: docker-init\ncontainerd version: bb71b10fd8f58240ca47fbb579b9d1028eea7c84\nrunc version: 2b18fe1d885ee5083ef9f0838fee39b62d653e30\ninit version: fec3683\nSecurity Options:\n seccomp\n  Profile: default\nKernel Version: 3.10.0-862.el7.x86_64\nOperating System: CentOS Linux 7 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Core"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nOSType: linux\nArchitecture: x86_64\nCPUs: 4\nTotal Memory: 7.779GiB\nName: k8s-master\nID: DMFG:BXV2:Q6FO:7MJZ:HE2I:GSUJ:VWER:J7KR:PUVX:32Q2:UXXM:5FQP\nDocker Root Dir: /var/lib/docker\nDebug Mode "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(": "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\nDebug Mode "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(": "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\nRegistry: https://index.docker.io/v1/\nLabels:\nExperimental: "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\nInsecure Registries:\n 127.0.0.0/8\nLive Restore Enabled: "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\nProduct License: Community Engine\n")])])]),s("h3",{attrs:{id:"kubeadm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kubeadm","aria-hidden":"true"}},[e._v("#")]),e._v(" kubeadm")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ yum "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y kubeadm\n")])])]),s("p",[e._v("系统会帮我们自动安装最新版的kubeadm，一共会安装 kubelet、kubeadm、kubectl、kubernetes-cni 这四个程序。")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("kubeadm")]),e._v(": k8s集群的一键部署工具，通过把k8s的各类核心组件和插件以pod的方式部署来简化安装过程")]),e._v(" "),s("li",[s("strong",[e._v("kubelet")]),e._v(": 运行在每个节点上的node agent，k8s集群通过kubelet真正的去操作每个节点上的容器，由于需要直接操作宿主机的各类资源，所以没有放在pod里面，还是通过服务的形式装在系统里面")]),e._v(" "),s("li",[s("strong",[e._v("kubectl")]),e._v(": kubernetes的命令行工具，通过连接api-server完成对于k8s的各类操作")]),e._v(" "),s("li",[s("strong",[e._v("kubernetes-cni")]),e._v(": k8s的虚拟网络设备，通过在宿主机上虚拟一个cni0网桥，来完成pod之间的网络通讯，作用和docker0类似。")])]),e._v(" "),s("h2",{attrs:{id:"初始化-kubeadm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化-kubeadm","aria-hidden":"true"}},[e._v("#")]),e._v(" 初始化 kubeadm")]),e._v(" "),s("p",[e._v("执行 "),s("code",[e._v("kubeadm init")]),e._v(" 开始master节点的初始化工作")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubeadm init --pod-network-cidr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("10.244.0.0/16\n")])])]),s("p",[e._v("注意这边的 "),s("code",[e._v("--pod-network-cidr=10.244.0.0/16")]),e._v("，是k8s的网络插件所需要用到的配置信息，用来给node分配子网段，我这边用到的网络插件是 "),s("a",{attrs:{href:"https://github.com/coreos/flannel/blob/master/Documentation/kubernetes.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("flannel"),s("OutboundLink")],1),e._v("，就是这么配，其他的插件也有相应的配法，官网上都有详细的说明，具体参考"),s("a",{attrs:{href:"https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/",target:"_blank",rel:"noopener noreferrer"}},[e._v("这个网页"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"初始化检测"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化检测","aria-hidden":"true"}},[e._v("#")]),e._v(" 初始化检测")]),e._v(" "),s("p",[e._v("初始化的时候kubeadm会做一系列的校验，以检测你的服务器是否符合kubernetes的安装条件，检测结果分为[WARNING]和[ERROR]两种，类似如下的信息:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("CGROUPS_MEMORY: enabled\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("WARNING Hostname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("hostname")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"k8s-master"')]),e._v(" could not be reached\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("WARNING Hostname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("hostname")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"k8s-master"')]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(":")]),e._v(" lookup k8s-master on 192.168.126.2:53: no such "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("host")]),e._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("WARNING Service-Kubelet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": kubelet "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" is not enabled, please run "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'systemctl enable kubelet.service'")]),e._v("\nerror execution phase preflight: "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("preflight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Some fatal errors occurred:\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ERROR CRI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": container runtime is not running: output: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n, error: "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("exit")]),e._v(" status 1\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ERROR Service-Docker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": docker "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" is not active, please run "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'systemctl start docker.service'")]),e._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": /proc/sys/net/bridge/bridge-nf-call-iptables does not exist\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ERROR FileContent--proc-sys-net-ipv4-ip_forward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": /proc/sys/net/ipv4/ip_forward contents are not "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("set")]),e._v(" to 1\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ERROR Swap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": running with swap on is not supported. Please disable swap\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ERROR SystemVerification"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": failed to get docker info: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("preflight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" If you know what you are doing, you can "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" a check non-fatal with "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("--ignore-preflight-errors"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("."),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n")])])]),s("ul",[s("li",[s("code",[e._v("[WARNING]")]),e._v(" 的有比如docker服务没设置成自动启动啦，docker版本不符合兼容性要求啦，hostname设置不规范之类，这些一般问题不大，不影响安装，当然尽量你按照它提示的要求能改掉是最好。")]),e._v(" "),s("li",[s("code",[e._v("[ERROR]")]),e._v(" 的话就要重视，虽然可以通过 "),s("code",[e._v("--ignore-preflight-errors")]),e._v(" 忽略错误强制安装，但为了不出各种奇怪的毛病，所以强烈建议error的问题一定要解决了再继续执行下去。")])]),e._v(" "),s("h2",{attrs:{id:"启动时常见错误修复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动时常见错误修复","aria-hidden":"true"}},[e._v("#")]),e._v(" 启动时常见错误修复")]),e._v(" "),s("h3",{attrs:{id:"error-swap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#error-swap","aria-hidden":"true"}},[e._v("#")]),e._v(" ERROR Swap")]),e._v(" "),s("p",[e._v("完整错误:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[ERROR Swap]: running with swap on is not supported. Please disable swap\n")])])]),s("p",[e._v("解决方案: 关闭swap, 执行: "),s("code",[e._v("swapoff -a")])]),e._v(" "),s("h3",{attrs:{id:"error-filecontent-proc-sys-net-bridge-bridge-nf-call-iptables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#error-filecontent-proc-sys-net-bridge-bridge-nf-call-iptables","aria-hidden":"true"}},[e._v("#")]),e._v(" ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables")]),e._v(" "),s("p",[e._v("完整错误:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]\n")])])]),s("p",[e._v("解决方案: 执行 "),s("code",[e._v("echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables")])]),e._v(" "),s("h3",{attrs:{id:"error-filecontent-proc-sys-net-ipv4-ip-forward"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#error-filecontent-proc-sys-net-ipv4-ip-forward","aria-hidden":"true"}},[e._v("#")]),e._v(" ERROR FileContent--proc-sys-net-ipv4-ip_forward")]),e._v(" "),s("p",[e._v("完整错误:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[ERROR FileContent--proc-sys-net-ipv4-ip_forward]\n")])])]),s("p",[e._v("解决方案: 执行 "),s("code",[e._v("echo 1 > /proc/sys/net/ipv4/ip_forward")])]),e._v(" "),s("h3",{attrs:{id:"error-service-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#error-service-docker","aria-hidden":"true"}},[e._v("#")]),e._v(" ERROR Service-Docker")]),e._v(" "),s("p",[e._v("完整错误")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[ERROR Service-Docker]\n[ERROR CRI]\n[ERROR SystemVerification]\n[WARNING Service-Docker]: docker service is not enabled, please run 'systemctl enable docker.service'\n")])])]),s("p",[e._v("解决方案: 启动 Docker, 并设置其开机自启")]),e._v(" "),s("ul",[s("li",[e._v("启动Docker: "),s("code",[e._v("systemctl start docker")])]),e._v(" "),s("li",[e._v("开机启动Docker: "),s("code",[e._v("systemctl enable docker")])])]),e._v(" "),s("h3",{attrs:{id:"error-diravailable-var-lib-etcd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#error-diravailable-var-lib-etcd","aria-hidden":"true"}},[e._v("#")]),e._v(" ERROR DirAvailable--var-lib-etcd")]),e._v(" "),s("p",[e._v("完整错误")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[ERROR DirAvailable--var-lib-etcd]\n")])])]),s("p",[e._v("解决方案: 删除文件夹, 执行 "),s("code",[e._v("rm -rf /var/lib/etcd")])]),e._v(" "),s("h3",{attrs:{id:"error-fileavailable-etc-kubernetes-manifests-kube-xxx-yaml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#error-fileavailable-etc-kubernetes-manifests-kube-xxx-yaml","aria-hidden":"true"}},[e._v("#")]),e._v(" ERROR FileAvailable--etc-kubernetes-manifests-kube-xxx.yaml")]),e._v(" "),s("p",[e._v("完整错误")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[ERROR FileAvailable--etc-kubernetes-manifests-kube-xxx.yaml]\n")])])]),s("p",[e._v("其中xxx为具体文件名称")]),e._v(" "),s("p",[e._v("解决方案: 删除文件夹: "),s("code",[e._v("rm -rf /etc/kubernetes/manifests")])]),e._v(" "),s("h3",{attrs:{id:"warning-firewalld"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#warning-firewalld","aria-hidden":"true"}},[e._v("#")]),e._v(" WARNING Firewalld")]),e._v(" "),s("p",[e._v("完整错误")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[WARNING Firewalld]\n")])])]),s("p",[e._v("解决方案: 直接关闭防火墙, 执行 "),s("code",[e._v("systemctl stop firewalld")])]),e._v(" "),s("h3",{attrs:{id:"warning-hostname"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#warning-hostname","aria-hidden":"true"}},[e._v("#")]),e._v(" WARNING Hostname")]),e._v(" "),s("p",[e._v("完整错误")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[WARNING Hostname]\n")])])]),s("p",[e._v("解决方案: 在 "),s("code",[e._v("/etc/hosts")]),e._v(" 中映射本机域名, 比如 "),s("code",[e._v("127.0.0.1 k8s-master")])]),e._v(" "),s("h3",{attrs:{id:"warning-service-kubelet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#warning-service-kubelet","aria-hidden":"true"}},[e._v("#")]),e._v(" WARNING Service-Kubelet")]),e._v(" "),s("p",[e._v("完整错误")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[WARNING Service-Kubelet]\n")])])]),s("p",[e._v("解决方案: 开机启动kubelet, 执行 "),s("code",[e._v("systemctl enable kubelet.service")])]),e._v(" "),s("h3",{attrs:{id:"error-imagepull"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#error-imagepull","aria-hidden":"true"}},[e._v("#")]),e._v(" ERROR ImagePull")]),e._v(" "),s("p",[e._v("拉取镜像出错, 一般是由于 GFW 的缘故, 解决方案是换源拉取相关镜像, 再重新取tag")]),e._v(" "),s("p",[e._v("可以创建一个 "),s("code",[e._v("pull-images.sh")]),e._v(" 脚本:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("touch")]),e._v(" pull-images.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" 744 pull-images.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" pull-images.sh\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 从阿里云拉取容器")]),e._v("\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.14.0\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.14.0\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.14.0\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.14.0\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.3.10\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.3.1\ndocker pull registry.cn-shenzhen.aliyuncs.com/cp_m/flannel:v0.10.0-amd64\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.1\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 将阿里云拉取的容器打标签")]),e._v("\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.14.0 k8s.gcr.io/kube-apiserver:v1.14.0\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.14.0 k8s.gcr.io/kube-controller-manager:v1.14.0\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.14.0 k8s.gcr.io/kube-scheduler:v1.14.0\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.14.0 k8s.gcr.io/kube-proxy:v1.14.0\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 k8s.gcr.io/pause:3.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.3.10 k8s.gcr.io/etcd:3.3.10\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.3.1 k8s.gcr.io/coredns:1.3.1\ndocker tag registry.cn-shenzhen.aliyuncs.com/cp_m/flannel:v0.10.0-amd64 quay.io/coreos/flannel:v0.10.0-amd64\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.1 k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 删除阿里云拉取的容器")]),e._v("\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.14.0\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.14.0\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.14.0\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.14.0\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.3.10\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.3.1\ndocker rmi registry.cn-shenzhen.aliyuncs.com/cp_m/flannel:v0.10.0-amd64\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.1\n")])])]),s("p",[e._v("以上操作的目的是: 先从国内可访问的阿里镜像源中拉取相关的镜像, 然后修改其tag, 使其骗过docker已经拉取了官方镜像。")]),e._v(" "),s("h2",{attrs:{id:"初始化成功"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化成功","aria-hidden":"true"}},[e._v("#")]),e._v(" 初始化成功")]),e._v(" "),s("p",[e._v("重新执行 "),s("code",[e._v("kubeadm init")]),e._v(", 初始化成功后, 会提示")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('$ kubeadm init --pod-network-cidr=10.244.0.0/16\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun "kubectl apply -f [podnetwork].yaml" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.126.129:6443 --token wyotbp.oni1wbnrctsqrxx8 \\\n    --discovery-token-ca-cert-hash sha256:e0b9865ce6c197c26dc7580229f953e256c817ff7a2336030d106511566f2000\n')])])]),s("p",[e._v("可以看到终于初始化成功了，kudeadm帮你做了大量的工作，包括kubelet配置、各类证书配置、kubeconfig配置、插件安装等等（这些东西自己搞不知道要搞多久，反正估计用过kubeadm没人会再愿意手工安装了）。注意最后一行，kubeadm提示你，其他节点需要加入集群的话，只需要执行这条命令就行了，里面包含了加入集群所需要的token。同时kubeadm还提醒你，要完成全部安装，还需要安装一个网络插件 "),s("code",[e._v("kubectl apply -f [podnetwork].yaml")]),e._v("。")]),e._v(" "),s("p",[e._v("同时也提示你，需要执行")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$HOME")]),e._v("/.kube\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" -i /etc/kubernetes/admin.conf "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$HOME")]),e._v("/.kube/config\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chown")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -u"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -g"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$HOME")]),e._v("/.kube/config\n")])])]),s("p",[e._v("把相关配置信息拷贝入.kube的目录，这个是用来配置kubectl和api-server之间的认证，其他node节点的话需要将此配置信息拷贝入node节点的对应目录。此时我们执行一下:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kubectl get node\nNAME         STATUS     ROLES    AGE    VERSION\nk8s-master   NotReady   master   9m8s   v1.13.4\n")])])]),s("p",[e._v("显示目前节点是notready状态。")]),e._v(" "),s("p",[e._v("同样地, 操作很繁琐, 将基本的命令封装成一个脚本:")]),e._v(" "),s("p",[s("code",[e._v("start-k8s.sh")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("touch")]),e._v(" start-k8s.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" 744 start-k8s.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" start-k8s.sh\nsystemctl "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("enable")]),e._v(" docker\nsystemctl start docker\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf /etc/kubernetes/manifests\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf /var/lib/etcd\nsystemctl stop firewalld\nswapoff -a\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("echo")]),e._v(" 1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /proc/sys/net/bridge/bridge-nf-call-iptables\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("echo")]),e._v(" 1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /proc/sys/net/ipv4/ip_forward\nkubeadm init --pod-network-cidr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("10.244.0.0/16\n")])])]),s("p",[e._v("初始化后的操作也可封装为一个脚本:")]),e._v(" "),s("p",[s("code",[e._v("k8s-init.sh")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("touch")]),e._v(" k8s-init.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" 744 k8s-init.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" k8s-init.sh\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$HOME")]),e._v("/.kube\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" -i /etc/kubernetes/admin.conf "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$HOME")]),e._v("/.kube/config\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chown")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -u"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -g"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$HOME")]),e._v("/.kube/config\n")])])]),s("p",[e._v("如果初始化过程出现问题，使用如下命令重置：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubeadm reset\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf /var/lib/cni/ "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$HOME")]),e._v("/.kube/config\n")])])]),s("h2",{attrs:{id:"k8s核心组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#k8s核心组件","aria-hidden":"true"}},[e._v("#")]),e._v(" k8s核心组件")]),e._v(" "),s("p",[e._v("前面介绍过，kudeadm的思路，是通过把k8s主要的组件容器化，来简化安装过程。这时候你可能就有一个疑问，这时候k8s集群还没起来，如何来部署pod？难道直接执行docker run？当然是没有那么low，其实在kubelet的运行规则中，有一种特殊的启动方法叫做“静态pod”（static pod），只要把pod定义的yaml文件放在指定目录下，当这个节点的kubelet启动时，就会自动启动yaml文件中定义的pod。从这个机制你也可以发现，为什么叫做static pod，因为这些pod是不能调度的，只能在这个节点上启动，并且pod的ip地址直接就是宿主机的地址。在k8s中，放这些预先定义yaml文件的位置是 "),s("code",[e._v("/etc/kubernetes/manifests")]),e._v("，我们来看一下:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ ll\n总用量 16\n-rw-------. 1 root root 1999 1月  12 01:35 etcd.yaml\n-rw-------. 1 root root 2674 1月  12 01:35 kube-apiserver.yaml\n-rw-------. 1 root root 2547 1月  12 01:35 kube-controller-manager.yaml\n-rw-------. 1 root root 1051 1月  12 01:35 kube-scheduler.yaml\n")])])]),s("p",[e._v("以下四个就是k8s的核心组件了，以静态pod的方式运行在当前节点上")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("etc")]),e._v(": k8s的数据库，所有的集群配置信息、密钥、证书等等都是放在这个里面，所以生产上面一般都会做集群，挂了不是开玩笑的")]),e._v(" "),s("li",[s("strong",[e._v("kube-apiserver")]),e._v(": 提供了HTTP restful api接口的关键服务进程, 是kubernetes里所有资源的增删改查等操作的唯一入口, 也是集群的入口进程，所有其他的组件都是通过apiserver来操作kubernetes的各类资源")]),e._v(" "),s("li",[s("strong",[e._v("kube-controller-manager")]),e._v(': 负责管理容器pod的生命周期, kubernetes 里的所有资源对象的自动化控制中心, 可以理解为资源对象的"大总管"')]),e._v(" "),s("li",[s("strong",[e._v("kube-scheduler")]),e._v(': 负责pod在集群中的调度, 相当于公交公司的"调度室"')])]),e._v(" "),s("p",[e._v("具体操作来说，在之前的文章中已经介绍过，docker架构调整后，已经拆分出containerd组件，所以现在是kubelet直接通过cri-containerd来调用containerd进行容器的创建（不走docker daemon了），从进程信息里面可以看出")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v(" -ef "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" containerd\nroot      3075     1  0 00:29 ?        00:00:55 /usr/bin/containerd\nroot      4740  3075  0 01:35 ?        00:00:01 containerd-shim -namespace moby -workdir /var/lib/containerd/io.containerd.runtime.v1.linux/moby/ec93247aeb737218908557f825344b33dd58f0c098bd750c71da1bc0ec9a49b0 -address /run/containerd/containerd.sock -containerd-binary /usr/bin/containerd -runtime-root /var/run/docker/runtime-runc\nroot      4754  3075  0 01:35 ?        00:00:01 containerd-shim -namespace moby -workdir /var/lib/containerd/io.containerd.runtime.v1.linux/moby/f738d56f65b9191a63243a1b239bac9c3924b5a2c7c98e725414c247fcffbb8f -address /run/containerd/containerd.sock -containerd-binary /usr/bin/containerd -runtime-root /var/run/docker/runtime-runc\nroot      4757  3\n")])])]),s("p",[e._v("其中3075这个进程就是由docker服务启动时带起来的containerd daemon，4740和4754是由containerd进程创建的cotainerd-shim子进程，用来真正的管理容器进程。多说一句，之前的docker版本这几个进程名字分别叫docker-containerd，docker-cotainerd-shim，docker-runc, 现在的进程名字里面已经完全看不到docker的影子了，去docker化越来越明显了。")]),e._v(" "),s("h2",{attrs:{id:"k8s插件-addon"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#k8s插件-addon","aria-hidden":"true"}},[e._v("#")]),e._v(" k8s插件(addon)")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("CoreDNS")]),e._v(": cncf项目，主要是用来做服务发现，目前已经取代kube-dns作为k8默认的服务发现组件")]),e._v(" "),s("li",[s("strong",[e._v("kube-proxy")]),e._v(": 基于iptables来做的负载均衡，service会用到，这个性能不咋地，知道一下就好")])]),e._v(" "),s("p",[e._v("我们执行一下")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubectl get pods -n kube-system\nNAME                                      READY   STATUS    RESTARTS   AGE\ncoredns-86c58d9df4-284kz                  0/1     Pending   0          5m28s\ncoredns-86c58d9df4-mlxjl                  0/1     Pending   0          5m28s\netcd-miwifi-r1cm-srv                      1/1     Running   0          4m40s\nkube-apiserver-miwifi-r1cm-srv            1/1     Running   0          4m52s\nkube-controller-manager-miwifi-r1cm-srv   1/1     Running   0          5m3s\nkube-proxy-fcjtg                          1/1     Running   0          5m28s\nkube-scheduler-miwifi-r1cm-srv            1/1     Running   0          4m45s\n")])])]),s("p",[e._v("可以看到kubeadm帮我们安装的，就是我上面提到的那些组件，并且都是以pod的形式安装。同时你也应该注意到了，coredns的两个pod都是pending状态，这是因为网络插件还没有安装。我们根据前面提到的官方页面的说明安装网络插件，这边我用到的是flannel，安装方式也很简单，标准的k8s式的安装")]),e._v(" "),s("h3",{attrs:{id:"网络插件-kube-flannel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络插件-kube-flannel","aria-hidden":"true"}},[e._v("#")]),e._v(" 网络插件 kube-flannel")]),e._v(" "),s("p",[e._v("安装 kube-flannel")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml\n")])])]),s("p",[e._v("安装完之后我们再看一下pod的状态")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubectl get pods -n kube-system\nNAME                                 READY   STATUS    RESTARTS   AGE\ncoredns-86c58d9df4-284kz             1/1     Running   0          24m\ncoredns-86c58d9df4-mlxjl             1/1     Running   0          24m\netcd-k8s-master                      1/1     Running   0          23m\nkube-apiserver-k8s-master            1/1     Running   0          23m\nkube-controller-manager-k8s-master   1/1     Running   0          23m\nkube-flannel-ds-amd64-d4bbn          1/1     Running   0          24m\nkube-proxy-fcjtg                     1/1     Running   0          24m\nkube-scheduler-k8s-master            1/1     Running   0          23m\n")])])]),s("p",[e._v("可以看到coredns的两个pod都已经启动，同时还多了一个 kube-flannel-ds-amd64-d4bbn，这正是我们刚才安装的网络插件flannel。")]),e._v(" "),s("p",[e._v("::: warning 注意\n如果 kube-flannel-ds-amd64-d4bbn 的状态为 "),s("code",[e._v("ImagePullBackOff")]),e._v(', 则说明拉取镜像失败, 需要换源拉取, 参看前面的 "ERROR ImagePull" 错误解决\n:::')]),e._v(" "),s("p",[e._v("这时候我们再来看一下核心组件的状态")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubectl get componentstatus\nNAME                 STATUS    MESSAGE              ERROR\nscheduler            Healthy   ok\ncontroller-manager   Healthy   ok\netcd-0               Healthy   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"health"')]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"true"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("可以看到组件的状态都已经ok了，我们再看看node的状态")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubectl get node\nNAME         STATUS   ROLES    AGE   VERSION\nk8s-master   Ready    master   32m   v1.13.4\n")])])]),s("p",[e._v("node的状态是Ready，说明我们的master安装成功，至此大功告成！")]),e._v(" "),s("p",[e._v("默认的master节点是不能调度应用pod的，所以我们还需要给master节点打一个污点标记")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubectl taint nodes --all node-role.kubernetes.io/master-\n")])])]),s("p",[e._v("如果在配置过程中有任何错误, 比如 "),s("code",[e._v("kube-flannel-ds-amd64-d4bbn")]),e._v(" 出错, 可以使用以下命令查看错误 (比如会有拉取镜像错误):")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubectl describe pod kube-flannel-ds-amd64-d4bbn --namespace"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("kube-system\n")])])]),s("h2",{attrs:{id:"安装-dashboard"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-dashboard","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装 DashBoard")]),e._v(" "),s("p",[e._v("Kubernetes Dashboard就是k8s集群的webui，集合了所有命令行可以操作的所有命令。")]),e._v(" "),s("p",[e._v("安装方式如下:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml\n")])])]),s("p",[e._v("::: tip 小技巧\n由于后面的操作都是在 kube-system 名称空间中进行，可以设置个别名 ksys=kubectl -n kube-system 这样就可以使用ksys操作该名称空间了\n命令："),s("code",[e._v("alias ksys='kubectl -n kube-system'")]),e._v(", 重启后无效\n或者修改 "),s("code",[e._v("~/.bashrc")]),e._v(", 加入 "),s("code",[e._v("alias ksys='kubectl -n kube-system'")]),e._v(", 然后 "),s("code",[e._v("source ~/.bashrc")]),e._v(" 使其生效, 这样重启后仍然有效\n:::")]),e._v(" "),s("p",[e._v("安装完后查看pod信息")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ ksys get po "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# `kubectl --namespace kube-system get pods` 的缩写")]),e._v("\nNAME                                      READY   STATUS    RESTARTS   AGE\ncoredns-86c58d9df4-gbgzx                  1/1     Running   0          4h45m\ncoredns-86c58d9df4-kzljk                  1/1     Running   0          4h45m\netcd-miwifi-r1cm-srv                      1/1     Running   0          4h44m\nkube-apiserver-miwifi-r1cm-srv            1/1     Running   0          4h44m\nkube-controller-manager-miwifi-r1cm-srv   1/1     Running   0          4h44m\nkube-flannel-ds-amd64-kwx59               1/1     Running   0          4h34m\nkube-proxy-9c8cs                          1/1     Running   0          4h45m\nkube-scheduler-miwifi-r1cm-srv            1/1     Running   0          4h44m\nkubernetes-dashboard-57df4db6b-5j2gv      1/1     Running   0          4h8m\n")])])]),s("p",[e._v("可以看到多了一个kubernetes-dashboard-57df4db6b-bn5vn，并且已经正常启动。")]),e._v(" "),s("p",[e._v("如果 kubernetes-dashboard-57df4db6b-5j2gv 状态为 "),s("code",[e._v("ImagePullBackOff")]),e._v(", 查看错误具体原因:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubectl describe pod kubernetes-dashboard-57df4db6b-5j2gv --namespace"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("kube-system\n")])])]),s("p",[e._v("不出意外又是拉取镜像出错, 仍然使用换源拉取的方式解决。")]),e._v(" "),s("p",[e._v("但出于安全性考虑，dashboard是不提供外部访问的，所以我们这边需要添加一个service，并且指定为NodePort类型，以供外部访问")]),e._v(" "),s("p",[e._v("先执行")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml\n$ kubectl delete -f ./kubernetes-dashboard.yaml\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" ./kubernetes-dashboard.yaml\n")])])]),s("p",[e._v("service配置如下")]),e._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ------------------- Dashboard Service ------------------- #")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Service\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" v1\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("metadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("labels")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("k8s-app")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" kubernetes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("dashboard\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" kubernetes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("dashboard\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("namespace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" kube"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("system\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("spec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("443")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("targetPort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8443")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("nodePort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("30443")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" NodePort\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("selector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("k8s-app")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" kubernetes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("dashboard\n")])])]),s("p",[e._v("重新加载配置:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubectl apply -f kubernetes-dashboard.yaml\n")])])]),s("p",[e._v("dashboard应用的默认端口是8443，这边我们指定一个30443端口进行映射，提供外部访问入口。这时候我们就可以通过 https://host-ip:30443 来访问dashboard了。")]),e._v(" "),s("p",[e._v("注意, 直接使用官方的yaml, 证书将不可用, 在 Firefox 中可以看到证书的实效不对:")]),e._v(" "),s("imgLink",{attrs:{src:"date/20190325/003.png"}}),e._v(" "),s("p",[e._v("目前也只能在 Firefox 中可以忽略此错误, 其他浏览器直接打不开, 我们在火狐中选择继续")]),e._v(" "),s("imgLink",{attrs:{src:"date/20190325/004.png"}}),e._v(" "),s("p",[e._v("用官方的yaml创建出来的servcieaccount登陆的话，是啥权限都没有的，全部是forbidden，因为官方的给了一个minimal的role。我们这边为了测试方便，直接创建一个超级管理员的账号，配置如下")]),e._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[e._v("$ vim kube"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("dashboard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("admin.yml\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ------------------- Dashboard Service Account ------------------- #")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" v1\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" ServiceAccount\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("metadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" dashboard\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("namespace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" kube"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("system\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("---")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" ClusterRoleBinding\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" rbac.authorization.k8s.io/v1beta1\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("metadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" dashboard\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("subjects")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" ServiceAccount\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" dashboard\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("namespace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" kube"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("system\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("roleRef")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" ClusterRole\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" cluster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("admin\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiGroup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" rbac.authorization.k8s.io\n")])])]),s("p",[e._v("创建完了之后，系统会自动创建该用户的secret，通过如下命令获取secret")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubectl apply -f kube-dashboard-admin.yml\n$ kubectl describe secret dashboard -n kube-system\nName:         dashboard-token-s9hqc\nNamespace:    kube-system\nLabels:       "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nAnnotations:  kubernetes.io/service-account.name: dashboard\n              kubernetes.io/service-account.uid: 63c43e1e-15d6-11e9-bb65-08002726d64d\n\nType:  kubernetes.io/service-account-token\n\nData\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v("\nca.crt:     1025 bytes\nnamespace:  11 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtdG9rZW4tczlocWMiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkIiwia3Vi\n")])])]),s("p",[e._v("将该token填入登陆界面中的token位置，即可登陆，并具有全部权限。")]),e._v(" "),s("imgLink",{attrs:{src:"date/20190325/005.png"}}),e._v(" "),s("p",[e._v("登录成功:")]),e._v(" "),s("imgLink",{attrs:{src:"date/20190325/006.png"}}),e._v(" "),s("h2",{attrs:{id:"获取集群信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取集群信息","aria-hidden":"true"}},[e._v("#")]),e._v(" 获取集群信息")]),e._v(" "),s("p",[e._v("仍然使用 "),s("code",[e._v("ksys")]),e._v(" 命令作为 "),s("code",[e._v("kubectl -n kube-system")]),e._v(" 的缩写")]),e._v(" "),s("p",[e._v("查看集群信息")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ ksys cluster-info\nKubernetes master is running at https://192.168.126.129:6443\nKubeDNS is running at https://192.168.126.129:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n\nTo further debug and diagnose cluster problems, use "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'kubectl cluster-info dump'")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(".")]),e._v("\n")])])]),s("p",[e._v("查看当前可用的Node")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ ksys get nodes\nNAME         STATUS   ROLES    AGE     VERSION\nk8s-master   Ready    master   3h29m   v1.14.0\n")])])]),s("p",[e._v("查看服务")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ ksys get svc "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 或 `ksys get service`")]),e._v("\nNAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("S"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("                  AGE\nkube-dns               ClusterIP   10.96.0.10      "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("        53/UDP,53/TCP,9153/TCP   3h27m\nkubernetes-dashboard   NodePort    10.100.16.166   "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("        443:30443/TCP            3h26m\n")])])]),s("p",[e._v("查看pods")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ ksys get po "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 或 `ksys get pods`")]),e._v("\nNAME                                    READY   STATUS    RESTARTS   AGE\ncoredns-fb8b8dccf-5cxfw                 1/1     Running   0          3h32m\ncoredns-fb8b8dccf-dbzbf                 1/1     Running   0          3h32m\netcd-k8s-master                         1/1     Running   5          3h31m\nkube-apiserver-k8s-master               1/1     Running   5          3h31m\nkube-controller-manager-k8s-master      1/1     Running   4          3h31m\nkube-flannel-ds-amd64-bq94z             1/1     Running   0          3h31m\nkube-proxy-w4b6r                        1/1     Running   0          3h32m\nkube-scheduler-k8s-master               1/1     Running   5          3h31m\nkubernetes-dashboard-5f7b999d65-gw8tc   1/1     Running   0          3h31m\n")])])]),s("p",[e._v("查看某一个pod的信息")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ ksys describe pods etcd-k8s-master\nName:               etcd-k8s-master\nNamespace:          kube-system\nPriority:           2000000000\nPriorityClassName:  system-cluster-critical\nNode:               k8s-master/192.168.126.129\nStart Time:         Sun, 31 Mar 2019 15:07:17 +0800\nLabels:             component"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("etcd\n                    tier"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("control-plane\nAnnotations:        kubernetes.io/config.hash: 783c7b37e5d9d9e5bf6d4b5fe18a4bc4\n                    kubernetes.io/config.mirror: 783c7b37e5d9d9e5bf6d4b5fe18a4bc4\n                    kubernetes.io/config.seen: 2019-03-31T15:07:17.623010149+08:00\n                    kubernetes.io/config.source: "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v("\nStatus:             Running\nIP:                 192.168.126.129\nContainers:\n  etcd:\n    Container ID:  docker://c25a8845bf0f773feeae78520e609bfa36dd30cdbca2fda6b6ff1101e4d1c582\n    Image:         k8s.gcr.io/etcd:3.3.10\n    Image ID:      docker://sha256:2c4adeb21b4ff8ed3309d0e42b6b4ae39872399f7b37e0856e673b13c4aba13d\n    Port:          "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n    Host Port:     "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n    Command:\n      etcd\n      --advertise-client-urls"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://192.168.126.129:2379\n      --cert-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/etc/kubernetes/pki/etcd/server.crt\n      --client-cert-auth"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true\n      --data-dir"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/var/lib/etcd\n      --initial-advertise-peer-urls"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://192.168.126.129:2380\n      --initial-cluster"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("k8s-master"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://192.168.126.129:2380\n      --key-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/etc/kubernetes/pki/etcd/server.key\n      --listen-client-urls"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://127.0.0.1:2379,https://192.168.126.129:2379\n      --listen-peer-urls"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://192.168.126.129:2380\n      --name"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("k8s-master\n      --peer-cert-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/etc/kubernetes/pki/etcd/peer.crt\n      --peer-client-cert-auth"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true\n      --peer-key-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/etc/kubernetes/pki/etcd/peer.key\n      --peer-trusted-ca-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/etc/kubernetes/pki/etcd/ca.crt\n      --snapshot-count"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("10000\n      --trusted-ca-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/etc/kubernetes/pki/etcd/ca.crt\n    State:          Running\n      Started:      Sun, 31 Mar 2019 15:07:19 +0800\n    Last State:     Terminated\n      Reason:       Completed\n      Exit Code:    0\n      Started:      Sat, 30 Mar 2019 18:37:15 +0800\n      Finished:     Sat, 30 Mar 2019 22:50:41 +0800\n    Ready:          True\n    Restart Count:  5\n    Liveness:       "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("exec")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("/bin/sh -ec ETCDCTL_API"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("3 etcdctl --endpoints"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(":2379 --cacert"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/etc/kubernetes/pki/etcd/ca.crt --cert"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/etc/kubernetes/pki/etcd/healthcheck-client.crt --key"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/etc/kubernetes/pki/etcd/healthcheck-client.key get foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" delay"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("15s timeout"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("15s period"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("10s "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#success=1 #failure=8")]),e._v("\n    Environment:    "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n    Mounts:\n      /etc/kubernetes/pki/etcd from etcd-certs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("rw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n      /var/lib/etcd from etcd-data "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("rw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nConditions:\n  Type              Status\n  Initialized       True\n  Ready             True\n  ContainersReady   True\n  PodScheduled      True\nVolumes:\n  etcd-certs:\n    Type:          HostPath "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("bare "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("host")]),e._v(" directory volume"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    Path:          /etc/kubernetes/pki/etcd\n    HostPathType:  DirectoryOrCreate\n  etcd-data:\n    Type:          HostPath "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("bare "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("host")]),e._v(" directory volume"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    Path:          /var/lib/etcd\n    HostPathType:  DirectoryOrCreate\nQoS Class:         BestEffort\nNode-Selectors:    "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nTolerations:       :NoExecute\nEvents:            "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),s("h2",{attrs:{id:"集群常用操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集群常用操作","aria-hidden":"true"}},[e._v("#")]),e._v(" 集群常用操作")]),e._v(" "),s("p",[e._v("删除某个pod (比如某个pod发生错误的情况)")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ ksys delete pod kubernetes-dashboard-5f7b999d65-gw8tc\n")])])]),s("h2",{attrs:{id:"部署其他节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#部署其他节点","aria-hidden":"true"}},[e._v("#")]),e._v(" 部署其他节点")]),e._v(" "),s("p",[e._v("其他节点同样地安装 "),s("code",[e._v("docker-ce")]),e._v(" 与 "),s("code",[e._v("kubeadm")]),e._v(", 并执行 "),s("code",[e._v("kubeadm join 192.168.126.129:6443 --token zhjlw2.zr9s8o8mcwhgyvwz --discovery-token-ca-cert-hash sha256:e0b9865ce6c197c26dc7580229f953e256c817ff7a2336030d106511566f2000")]),e._v(" ("),s("code",[e._v("k8s-master")]),e._v(" 中 "),s("code",[e._v("kubeadm init")]),e._v(" 的时候可以看到) 即可加入到 "),s("code",[e._v("k8s-master")]),e._v(" 所在的集群中")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("root@k8s-node1 ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# kubeadm join 192.168.126.129:6443 --token zhjlw2.zr9s8o8mcwhgyvwz \\")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("     --discovery-token-ca-cert-hash sha256:e0b9865ce6c197c26dc7580229f953e256c817ff7a2336030d106511566f2000\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("preflight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Running pre-flight checks\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("WARNING IsDockerSystemdCheck"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": detected "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"cgroupfs"')]),e._v(" as the Docker cgroup driver. The recommended driver is "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"systemd"')]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(".")]),e._v(" Please follow the guide at https://kubernetes.io/docs/setup/cri/\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("WARNING Service-Kubelet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": kubelet "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" is not enabled, please run "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'systemctl enable kubelet.service'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("preflight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Reading configuration from the cluster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("preflight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" FYI: You can "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("look")]),e._v(" at this config "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" with "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'kubectl -n kube-system get cm kubeadm-config -oyaml'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("kubelet-start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Downloading configuration "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" the kubelet from the "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"kubelet-config-1.14"')]),e._v(" ConfigMap "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" the kube-system namespace\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("kubelet-start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Writing kubelet configuration to "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/var/lib/kubelet/config.yaml"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("kubelet-start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Writing kubelet environment "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" with flags to "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/var/lib/kubelet/kubeadm-flags.env"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("kubelet-start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Activating the kubelet "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("kubelet-start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Waiting "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" the kubelet to perform the TLS Bootstrap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n\nThis node has joined the cluster:\n* Certificate signing request was sent to apiserver and a response was received.\n* The Kubelet was informed of the new secure connection details.\n\nRun "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'kubectl get nodes'")]),e._v(" on the control-plane to see this node "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),e._v(" the cluster.\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("root@k8s-node2 ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# kubeadm join 192.168.126.129:6443 --token zhjlw2.zr9s8o8mcwhgyvwz \\")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("     --discovery-token-ca-cert-hash sha256:e0b9865ce6c197c26dc7580229f953e256c817ff7a2336030d106511566f2000\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("preflight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Running pre-flight checks\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("WARNING IsDockerSystemdCheck"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": detected "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"cgroupfs"')]),e._v(" as the Docker cgroup driver. The recommended driver is "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"systemd"')]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(".")]),e._v(" Please follow the guide at https://kubernetes.io/docs/setup/cri/\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("WARNING Service-Kubelet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": kubelet "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" is not enabled, please run "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'systemctl enable kubelet.service'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("preflight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Reading configuration from the cluster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("preflight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" FYI: You can "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("look")]),e._v(" at this config "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" with "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'kubectl -n kube-system get cm kubeadm-config -oyaml'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("kubelet-start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Downloading configuration "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" the kubelet from the "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"kubelet-config-1.14"')]),e._v(" ConfigMap "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" the kube-system namespace\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("kubelet-start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Writing kubelet configuration to "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/var/lib/kubelet/config.yaml"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("kubelet-start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Writing kubelet environment "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" with flags to "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/var/lib/kubelet/kubeadm-flags.env"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("kubelet-start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Activating the kubelet "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("kubelet-start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Waiting "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" the kubelet to perform the TLS Bootstrap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n\nThis node has joined the cluster:\n* Certificate signing request was sent to apiserver and a response was received.\n* The Kubelet was informed of the new secure connection details.\n\nRun "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'kubectl get nodes'")]),e._v(" on the control-plane to see this node "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),e._v(" the cluster.\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("root@k8s-master ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ksys get nodes")]),e._v("\nNAME         STATUS   ROLES    AGE     VERSION\nk8s-master   Ready    master   4h5m    v1.14.0\nk8s-node1    Ready    "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("   3m45s   v1.14.0\nk8s-node2    Ready    "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("   4m8s    v1.14.0\n")])])]),s("p",[e._v("在 dashboard 中查看")]),e._v(" "),s("imgLink",{attrs:{src:"date/20190331/001.png"}}),e._v(" "),s("h2",{attrs:{id:"部署应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#部署应用","aria-hidden":"true"}},[e._v("#")]),e._v(" 部署应用")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ kubectl expose deployment/kubernetes-bootcamp --type"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"NodePort"')]),e._v(" --port 8080\nservice/kubernetes-bootcamp exposed\n$ kubectl get services\nNAME                  TYPE        CLUSTER-IP     EXTERNAL-IP   PORT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("S"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("          AGE\nkubernetes            ClusterIP   10.96.0.1      "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("        443/TCP          78s\nkubernetes-bootcamp   NodePort    10.98.21.250   "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("        8080:31539/TCP   10s\n$ kubectl describe services/kubernetes-bootcamp\nName:                     kubernetes-bootcamp\nNamespace:                default\nLabels:                   run"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("kubernetes-bootcamp\nAnnotations:              "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nSelector:                 run"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("kubernetes-bootcamp\nType:                     NodePort\nIP:                       10.98.21.250\nPort:                     "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("unset"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("  8080/TCP\nTargetPort:               8080/TCP\nNodePort:                 "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("unset"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("  31539/TCP\nEndpoints:                172.18.0.3:8080\nSession Affinity:         None\nExternal Traffic Policy:  Cluster\nEvents:                   "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("export")]),e._v(" NODE_PORT"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("kubectl get services/kubernetes-bootcamp -o go-template"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("'"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("index .spec.ports 0"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(".nodePort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("'"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n$ "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("echo")]),e._v(" NODE_PORT"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$NODE_PORT")]),e._v("\nNODE_PORT"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("31539\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("minikube "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ip")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$NODE_PORT")]),e._v("\nHello Kubernetes bootcamp"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" Running on: kubernetes-bootcamp-6bf84cb898-nhf4z "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" v"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("1\n")])])]),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://kubernetes.io/zh/docs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubeadm 概述"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.kubernetes.org.cn/4058.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes-DashBoard 用户界面"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://jimmysong.io/kubernetes-handbook/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes Handbook——Kubernetes中文指南/云原生应用架构实践手册"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://jimmysong.io/istio-handbook/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Istio Handbook——Istio 服务网格进阶实战"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.bookstack.cn/read/kubernetes-handbook/SUMMARY.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes 中文指南/实践手册 - bookstack"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/qq1083062043/article/details/84949924",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes1.13 安装 kubernetes-dashboard 及遇到的坑 - CSDN"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/hongdada/p/9761336.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用kubeadm 安装 kubernetes 1.12.0 - cnblogs"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.jianshu.com/p/70efa1b853f5",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用kubeadm 快速搭建单机kubernetes 1.13集群 - 简书"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.jianshu.com/p/c6d560d12d50",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes Dashboard的安装与坑 - 简书"),s("OutboundLink")],1)])])],1)},[],!1,null,null,null);t.default=n.exports}}]);