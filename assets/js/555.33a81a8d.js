(window.webpackJsonp=window.webpackJsonp||[]).push([[555],{963:function(t,a,s){"use strict";s.r(a);var e=s(1),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"kubernetes-核心概念-角色的访问控制-rbac"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-核心概念-角色的访问控制-rbac","aria-hidden":"true"}},[t._v("#")]),t._v(" Kubernetes 核心概念 - 角色的访问控制 (RBAC)")]),t._v(" "),s("p",[t._v("RBAC 使用 rbac.authorization.k8s.io API Group 来实现授权决策，允许管理员通过 Kubernetes API 动态配置策略，要启用 RBAC ，需要在 apiserver 中添加参数 --authorization-mode=RBAC ，如果使用的 kubeadm 安装的集群，1.6 版本以上的都默认开启了 RBAC ，可以通过查看 Master 节点上 apiserver 的静态 Pod 定义文件：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /etc/kubernetes/manifests/kube-apiserver.yaml "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" authorization-mode\n    - --authorization-mode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Node,RBAC\n")])])]),s("p",[t._v("如果是二进制的方式搭建的集群，添加这个参数过后，记得要重启 apiserver 服务。")]),t._v(" "),s("h2",{attrs:{id:"rbac-api-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rbac-api-对象","aria-hidden":"true"}},[t._v("#")]),t._v(" RBAC API 对象")]),t._v(" "),s("p",[s("code",[t._v("Kubernetes")]),t._v(" 有一个很基本的特性就是它的 "),s("a",{attrs:{href:"https://www.colabug.com/goto/aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd29ya2luZy13aXRoLW9iamVjdHMva3ViZXJuZXRlcy1vYmplY3RzLw==",target:"_blank",rel:"noopener noreferrer"}},[t._v("所有资源对象都是模型化的 API 对象"),s("OutboundLink")],1),t._v(" ，允许执行 CRUD(Create、Read、Update、Delete)操作(也就是我们常说的增、删、改、查操作)，比如下面的这下资源：")]),t._v(" "),s("ul",[s("li",[t._v("Pods")]),t._v(" "),s("li",[t._v("ConfigMaps")]),t._v(" "),s("li",[t._v("Deployments")]),t._v(" "),s("li",[t._v("Nodes")]),t._v(" "),s("li",[t._v("Secrets")]),t._v(" "),s("li",[t._v("Namespaces")])]),t._v(" "),s("p",[t._v("上面这些资源对象的可能存在的操作有：")]),t._v(" "),s("ul",[s("li",[t._v("create")]),t._v(" "),s("li",[t._v("get")]),t._v(" "),s("li",[t._v("delete")]),t._v(" "),s("li",[t._v("list")]),t._v(" "),s("li",[t._v("update")]),t._v(" "),s("li",[t._v("edit")]),t._v(" "),s("li",[t._v("watch")]),t._v(" "),s("li",[t._v("exec")])]),t._v(" "),s("p",[t._v("在更上层，这些资源和 API Group 进行关联，比如 "),s("code",[t._v("Pods")]),t._v(" 属于 Core API Group，而 "),s("code",[t._v("Deployements")]),t._v(" 属于 apps API Group，要在 "),s("code",[t._v("Kubernetes")]),t._v(" 中进行 "),s("code",[t._v("RBAC")]),t._v(" 的管理，除了上面的这些资源和操作以外，我们还需要另外的一些对象：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Rule")]),t._v("：规则，规则是一组属于不同 API Group 资源上的一组操作的集合")]),t._v(" "),s("li",[s("strong",[t._v("Role 和 ClusterRole")]),t._v("：角色和集群角色，这两个对象都包含上面的 Rules 元素，二者的区别在于，在 Role 中，定义的规则只适用于单个命名空间，也就是和 namespace 关联的，而 ClusterRole 是集群范围内的，因此定义的规则不受命名空间的约束。另外 Role 和 ClusterRole 在 "),s("code",[t._v("Kubernetes")]),t._v(" 中都被定义为集群内部的 API 资源，和我们前面学习过的 Pod、ConfigMap 这些类似，都是我们集群的资源对象，所以同样的可以使用我们前面的 "),s("code",[t._v("kubectl")]),t._v(" 相关的命令来进行操作")]),t._v(" "),s("li",[s("strong",[t._v("Subject")]),t._v("：主题，对应在集群中尝试操作的对象")]),t._v(" "),s("li",[s("strong",[t._v("RoleBinding 和 ClusterRoleBinding")]),t._v("：角色绑定和集群角色绑定，简单来说就是把声明的 Subject 和我们的 Role 进行绑定的过程(给某个用户绑定上操作的权限)，二者的区别也是作用范围的区别：RoleBinding 只会影响到当前 namespace 下面的资源操作权限，而 ClusterRoleBinding 会影响到所有的 namespace。")])]),t._v(" "),s("h2",{attrs:{id:"创建一个只能访问某个-namespace-的用户"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建一个只能访问某个-namespace-的用户","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建一个只能访问某个 namespace 的用户")]),t._v(" "),s("p",[t._v("我们来创建一个 User Account，只能访问 kube-system 这个命名空间：")]),t._v(" "),s("ul",[s("li",[t._v("username: qzy")]),t._v(" "),s("li",[t._v("group: xiaoyulive")])]),t._v(" "),s("h3",{attrs:{id:"_1-创建用户凭证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建用户凭证","aria-hidden":"true"}},[t._v("#")]),t._v(" 1 创建用户凭证")]),t._v(" "),s("p",[t._v("我们前面已经提到过， "),s("code",[t._v("Kubernetes")]),t._v(" 没有 User Account 的 API 对象，不过要创建一个用户帐号的话也是挺简单的，利用管理员分配给你的一个私钥就可以创建了，这个我们可以参考 "),s("a",{attrs:{href:"https://www.colabug.com/goto/aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvYWRtaW4vYXV0aGVudGljYXRpb24=",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档中的方法"),s("OutboundLink")],1),t._v(" ，这里我们来使用 "),s("code",[t._v("OpenSSL")]),t._v(" 证书来创建一个 User，当然我们也可以使用更简单的 "),s("code",[t._v("cfssl")]),t._v(" 工具来创建：")]),t._v(" "),s("p",[t._v("给用户 qzy 创建一个私钥，命名成 "),s("code",[t._v("qzy.key")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ openssl genrsa -out qzy.key 2048\nGenerating RSA private key, 2048 bit long modulus\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("+++\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("+++\ne is 65537 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0x10001"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("使用我们刚刚创建的私钥创建一个证书签名请求文件 "),s("code",[t._v("qzy.csr")]),t._v("，要注意需要确保在 "),s("code",[t._v("-subj")]),t._v(" 参数中指定用户名和组(CN表示用户名，O表示组)：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ openssl req -new -key qzy.key -out qzy.csr -subj "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/CN=qzy/O=xiaoyulive"')]),t._v("\n")])])]),s("p",[t._v("然后找到我们的 "),s("code",[t._v("Kubernetes")]),t._v(" 集群的 "),s("code",[t._v("CA")]),t._v("，我使用的是 "),s("code",[t._v("kubeadm")]),t._v(" 安装的集群， "),s("code",[t._v("CA")]),t._v(" 相关证书位于 "),s("code",[t._v("/etc/kubernetes/pki/")]),t._v(" 目录下面，如果你是二进制方式搭建的，你应该在最开始搭建集群的时候就已经指定好了 "),s("code",[t._v("CA")]),t._v(" 的目录，我们会利用该目录下面的 "),s("code",[t._v("ca.crt")]),t._v(" 和 "),s("code",[t._v("ca.key")]),t._v(" 两个文件来批准上面的证书请求")]),t._v(" "),s("p",[t._v("生成最终的证书文件，我们这里设置证书的有效期为500天：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ openssl x509 -req -in qzy.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out qzy.crt -days 500\nSignature ok\nsubject"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/CN"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("qzy/O"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xiaoyulive\nGetting CA Private Key\n")])])]),s("p",[t._v("现在查看我们当前文件夹下面是否生成了一个证书文件")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nqzy.crt  qzy.csr  qzy.key\n")])])]),s("p",[t._v("现在我们可以使用刚刚创建的证书文件和私钥文件在集群中创建新的凭证和上下文(Context)")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl config set-credentials qzy --client-certificate"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("qzy.crt  --client-key"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("qzy.key\nUser "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"qzy"')]),t._v(" set.\n")])])]),s("p",[t._v("我们可以看到一个用户 "),s("code",[t._v("qzy")]),t._v(" 创建了，然后为这个用户设置新的 Context:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl config set-context qzy-context --cluster"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("kubernetes --namespace"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("test --user"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("qzy\nContext "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"qzy-context"')]),t._v(" created.\n")])])]),s("p",[t._v("到这里，我们的用户 "),s("code",[t._v("qzy")]),t._v(" 就已经创建成功了，现在我们使用当前的这个配置文件来操作 "),s("code",[t._v("kubectl")]),t._v(" 命令的时候，应该会出现错误，因为我们还没有为该用户定义任何操作的权限呢：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl get pods --context"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("qzy-context\nError from server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Forbidden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": pods is forbidden: User "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"haimaxy"')]),t._v(" cannot list pods "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the namespace "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-创建角色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建角色","aria-hidden":"true"}},[t._v("#")]),t._v(" 2 创建角色")]),t._v(" "),s("p",[t._v("用户创建完成后，接下来就需要给该用户添加操作权限，我们来定义一个 "),s("code",[t._v("YAML")]),t._v(" 文件，创建一个允许用户操作 Deployment、Pod、ReplicaSets 的角色，如下定义")]),t._v(" "),s("p",[s("code",[t._v("qzy-role.yaml")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rbac.authorization.k8s.io/v1\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Role\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" qzy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("role "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 角色名")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命名空间")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rules")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiGroups")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"extensions"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"apps"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# API Group")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("resources")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deployments"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"replicasets"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pods"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 允许访问的资源, 若允许访问全部资源可使用 ["*"]')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("verbs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"list"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"watch"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"create"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"update"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"patch"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"delete"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 允许的访问方式, 也可以使用["*"]')]),t._v("\n")])])]),s("p",[t._v("其中 "),s("code",[t._v("Pod")]),t._v(" 属于 core 这个 API Group，在 "),s("code",[t._v("YAML")]),t._v(" 中用空字符就可以，而 "),s("code",[t._v("Deployment")]),t._v(" 属于 apps 这个 API Group， "),s("code",[t._v("ReplicaSets")]),t._v(" 属于 "),s("code",[t._v("extensions")]),t._v(" 这个 API Group，所以 rules 下面的 apiGroups 就综合了这几个资源的 API Group: "),s("code",[t._v('["", "extensions", "apps"]')]),t._v("，其中 "),s("code",[t._v("verbs")]),t._v(" 就是我们上面提到的可以对这些资源对象执行的操作，我们这里需要所有的操作方法，所以我们也可以使用 "),s("code",[t._v('["*"]')]),t._v(" 来代替。")]),t._v(" "),s("p",[t._v("然后创建这个 "),s("code",[t._v("Role")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl create -f qzy-role.yaml\nrole.rbac.authorization.k8s.io/qzy-role created\n")])])]),s("p",[t._v("注意这里我们没有使用上面的 "),s("code",[t._v("qzy-context")]),t._v(" 这个上下文了，因为木有权限啦")]),t._v(" "),s("h3",{attrs:{id:"_3-创建角色权限绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建角色权限绑定","aria-hidden":"true"}},[t._v("#")]),t._v(" 3 创建角色权限绑定")]),t._v(" "),s("p",[t._v("Role 创建完成了，但是很明显现在我们这个 Role 和我们的用户 qzy 还没有任何关系, 这里我就需要创建一个 "),s("code",[t._v("RoleBinding")]),t._v(" 对象，在 test 这个命名空间下面将上面的 qzy-role 角色和用户 qzy 进行绑定")]),t._v(" "),s("p",[s("code",[t._v("qzy-rolebinding.yaml")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rbac.authorization.k8s.io/v1\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RoleBinding\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" qzy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("rolebinding\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 要绑定的命名空间")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("subjects")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 要绑定的用户")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" User\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" qzy\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiGroup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("roleRef")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 要绑定的角色")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Role\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" qzy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("role\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiGroup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n")])])]),s("p",[t._v("上面的 "),s("code",[t._v("YAML")]),t._v(" 文件中我们看到了 "),s("code",[t._v("subjects")]),t._v(" 关键字，这里就是我们上面提到的用来尝试操作集群的对象，这里对应上面的 User 帐号 qzy，使用 "),s("code",[t._v("kubectl")]),t._v(" 创建上面的资源对象：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl create -f qzy-rolebinding.yaml\nrolebinding.rbac.authorization.k8s.io/qzy-rolebinding created\n")])])]),s("h3",{attrs:{id:"_4-测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-测试","aria-hidden":"true"}},[t._v("#")]),t._v(" 4 测试")]),t._v(" "),s("p",[t._v("现在我们应该可以上面的 "),s("code",[t._v("qzy-context")]),t._v(" 上下文来操作集群了：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl get pods --context"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("qzy-context "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许访问 pods")]),t._v("\nNAME                     READY   STATUS    RESTARTS   AGE\nnginx-test-229g8         1/1     Running   2          4d21h\nnginx-test-hdxfs         1/1     Running   0          4d21h\nnginx-test-ls69t         1/1     Running   1          4d22h\ntest1-567899468c-5lfgd   1/1     Running   0          4d14h\n\n$ kubectl get svc --context"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("qzy-context "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 禁止访问 service")]),t._v("\nError from server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Forbidden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": services is forbidden: User "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"qzy"')]),t._v(" cannot list resource "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"services"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" API group "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the namespace "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),t._v("\n")])])]),s("p",[t._v("我们可以看到我们使用 "),s("code",[t._v("kubectl")]),t._v(" 的使用并没有指定 namespace 了，这是因为我们已经为该用户分配了权限了，如果我们在后面加上一个 "),s("code",[t._v("-n default")]),t._v(" 试看看呢？")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl --context"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("qzy-context get pods --namespace"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("default\nError from server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Forbidden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": pods is forbidden: User "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"haimaxy"')]),t._v(" cannot list pods "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the namespace "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),t._v("\n")])])]),s("p",[t._v("权限不足, 因为该用户并没有 default 这个命名空间的操作权限")]),t._v(" "),s("h2",{attrs:{id:"创建一个只能访问某个-namespace-的-serviceaccount"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建一个只能访问某个-namespace-的-serviceaccount","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建一个只能访问某个 namespace 的 ServiceAccount")]),t._v(" "),s("p",[t._v("上面我们创建了一个只能访问某个命名空间下面的普通用户，我们前面也提到过 subjects 下面还有一个类型的主题资源：ServiceAccount，现在我们来创建一个集群内部的用户只能操作 test 这个命名空间下面的 pods 和 deployments，首先来创建一个 ServiceAccount 对象：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl create sa qzy-sa -n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),t._v("\n")])])]),s("p",[t._v("当然我们也可以定义成 "),s("code",[t._v("YAML")]),t._v(" 文件的形式来创建。")]),t._v(" "),s("p",[t._v("然后新建一个 Role 对象：(qzy-sa-role.yaml)")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rbac.authorization.k8s.io/v1\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Role\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" qzy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("sa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("role\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rules")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiGroups")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("resources")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pods"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("verbs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"watch"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"list"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiGroups")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"apps"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("resources")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deployments"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("verbs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"list"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"watch"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"create"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"update"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"patch"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"delete"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("可以看到我们这里定义的角色没有创建、删除、更新 Pod 的权限，待会我们可以重点测试一下，创建该 Role 对象：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl create -f qzy-sa-role.yaml\n")])])]),s("p",[t._v("然后创建一个 RoleBinding 对象，将上面的 qzy-sa 和角色 qzy-sa-role 进行绑定：(qzy-sa-rolebinding.yaml)")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RoleBinding\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rbac.authorization.k8s.io/v1\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" qzy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("sa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("rolebinding\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 要绑定的命名空间")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("subjects")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 要绑定的 ServiceAccount")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ServiceAccount\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" qzy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("sa\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("roleRef")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 要绑定的角色")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Role\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" qzy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("sa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("role\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiGroup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rbac.authorization.k8s.io\n")])])]),s("p",[t._v("添加这个资源对象：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl create -f qzy-sa-rolebinding.yaml\n")])])]),s("p",[t._v("然后我们怎么去验证这个 ServiceAccount 呢？我们前面的课程中是不是提到过一个 ServiceAccount 会生成一个 Secret 对象和它进行映射，这个 Secret 里面包含一个 token，我们可以利用这个 token 去登录 Dashboard，然后我们就可以在 Dashboard 中来验证我们的功能是否符合预期了：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl get secret -n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" qzy-sa\nqzy-sa-token-nxgqx                  kubernetes.io/service-account-token   3         47m\n\n$ kubectl get secret qzy-sa-token-nxgqx -o jsonpath"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(".data.token"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" -n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" base64 -d\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会生成一串很长的base64后的字符串")]),t._v("\n")])])]),s("p",[t._v("使用这里的 token 去 Dashboard 页面进行登录：")]),t._v(" "),s("imgLink",{attrs:{src:"date/20190422/003.png"}}),t._v(" "),s("p",[t._v("我们可以看到上面的提示信息，这是因为我们登录进来后默认跳转到 default 命名空间，我们切换到 kube-system 命名空间下面就可以了：")]),t._v(" "),s("imgLink",{attrs:{src:"date/20190422/004.png"}}),t._v(" "),s("p",[t._v('我们可以看到可以访问pod列表了，但是也会有一些其他额外的提示：events is forbidden: User “system:serviceaccount:test:qzy-sa” cannot list events in the namespace "test"，这是因为当前登录用只被授权了访问 pod 和 deployment 的权限，同样的，访问下deployment看看可以了吗？')]),t._v(" "),s("p",[t._v("同样的，你可以根据自己的需求来对访问用户的权限进行限制，可以自己通过 Role 定义更加细粒度的权限，也可以使用系统内置的一些权限……")]),t._v(" "),s("h2",{attrs:{id:"创建一个可以访问所有-namespace-的-serviceaccount"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建一个可以访问所有-namespace-的-serviceaccount","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建一个可以访问所有 namespace 的 ServiceAccount")]),t._v(" "),s("p",[t._v("刚刚我们创建的 "),s("code",[t._v("qzy-sa")]),t._v(" 这个 ServiceAccount 和一个 Role 角色进行绑定的，如果我们现在创建一个新的 ServiceAccount，需要他操作的权限作用于所有的 namespace，这个时候我们就需要使用到 ClusterRole 和 ClusterRoleBinding 这两种资源对象了。同样，首先新建一个 ServiceAcount 对象：")]),t._v(" "),s("p",[s("code",[t._v("qzy-sa2.yaml")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ServiceAccount\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" qzy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("sa2\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n")])])]),s("p",[t._v("创建 ServiceAccount：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl create -f qzy-sa2.yaml\n")])])]),s("p",[t._v("然后创建一个 ClusterRoleBinding 对象:")]),t._v(" "),s("p",[s("code",[t._v("qzy-clusterolebinding.yaml")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ClusterRoleBinding\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rbac.authorization.k8s.io/v1beta1\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" qzy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("sa2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("clusterrolebinding\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("subjects")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ServiceAccount\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" qzy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("sa2\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("roleRef")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ClusterRole\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" cluster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("admin\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiGroup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rbac.authorization.k8s.io\n")])])]),s("p",[t._v("从上面我们可以看到我们没有为这个资源对象声明 namespace，因为这是一个 ClusterRoleBinding 资源对象，是作用于整个集群的，我们也没有单独新建一个 ClusterRole 对象，而是使用的 cluster-admin 这个对象，这是 "),s("code",[t._v("Kubernetes")]),t._v(" 集群内置的 ClusterRole 对象，我们可以使用 "),s("code",[t._v("kubectl get clusterrole")]),t._v(" 和 "),s("code",[t._v("kubectl get clusterrolebinding")]),t._v(" 查看系统内置的一些集群角色和集群角色绑定，这里我们使用的 cluster-admin 这个集群角色是拥有最高权限的集群角色，所以一般需要谨慎使用该集群角色。")]),t._v(" "),s("p",[t._v("创建上面集群角色绑定资源对象，创建完成后同样使用 ServiceAccount 对应的 token 去登录 Dashboard 验证下：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl create -f qzy-clusterolebinding.yaml\n$ kubectl get secret -n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" qzy-sa2\nqzy-sa2-token-nxgqx                  kubernetes.io/service-account-token   3         47m\n$ kubectl get secret qzy-sa2-token-nxgqx -o jsonpath"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(".data.token"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" -n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" base64 -d\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会生成一串很长的base64后的字符串")]),t._v("\n")])])]),s("p",[t._v("我们在最开始接触到 "),s("code",[t._v("RBAC")]),t._v(" 认证的时候，可能不太熟悉，特别是不知道应该怎么去编写 "),s("code",[t._v("rules")]),t._v(" 规则，大家可以去分析系统自带的 clusterrole、clusterrolebinding 这些资源对象的编写方法，怎么分析？还是利用 kubectl 的 get、describe、 -o yaml 这些操作，所以 "),s("code",[t._v("kubectl")]),t._v(" 最基本的用户一定要掌握好。")]),t._v(" "),s("h2",{attrs:{id:"service-account"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#service-account","aria-hidden":"true"}},[t._v("#")]),t._v(" Service Account")]),t._v(" "),s("p",[t._v("Service Account (SA) 为 Pod 中的进程提供身份信息。")]),t._v(" "),s("p",[t._v("当您（真人用户）访问集群（例如使用"),s("code",[t._v("kubectl")]),t._v("命令）时，apiserver 会将您认证为一个特定的 User Account（目前通常是"),s("code",[t._v("admin")]),t._v("，除非您的系统管理员自定义了集群配置）。Pod 容器中的进程也可以与 apiserver 联系。当它们在联系 apiserver 的时候，它们会被认证为一个特定的 Service Account（例如"),s("code",[t._v("default")]),t._v("）。")]),t._v(" "),s("h3",{attrs:{id:"使用默认的-serviceaccount-访问-api-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用默认的-serviceaccount-访问-api-server","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用默认的 ServiceAccount 访问 API server")]),t._v(" "),s("p",[t._v("当您创建 pod 的时候，如果您没有指定一个 service account，系统会自动地在与该 pod 相同的 namespace 下为其指派一个"),s("code",[t._v("default")]),t._v(" service account。如果您获取刚创建的 pod 的原始 json 或 yaml 信息（例如使用"),s("code",[t._v("kubectl get pods/podename -o yaml")]),t._v("命令），您将看到"),s("code",[t._v("spec.serviceAccountName")]),t._v("字段已经被设置为 "),s("code",[t._v("default")]),t._v("。")]),t._v(" "),s("p",[t._v("您可以在 pod 中使用自动挂载的 service account 凭证来访问 API，如 "),s("a",{attrs:{href:"https://kubernetes.io/docs/user-guide/accessing-the-cluster/#accessing-the-api-from-a-pod",target:"_blank",rel:"noopener noreferrer"}},[t._v("Accessing the Cluster"),s("OutboundLink")],1),t._v(" 中所描述。")]),t._v(" "),s("p",[t._v("Service account 是否能够取得访问 API 的许可取决于您使用的 "),s("a",{attrs:{href:"https://kubernetes.io/docs/admin/authorization/#a-quick-note-on-service-accounts",target:"_blank",rel:"noopener noreferrer"}},[t._v("授权插件和策略"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("在 1.6 以上版本中，您可以选择取消为 service account 自动挂载 API 凭证，只需在 service account 中设置 "),s("code",[t._v("automountServiceAccountToken: false")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ServiceAccount\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" build"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("robot\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("automountServiceAccountToken")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),s("p",[t._v("在 1.6 以上版本中，您也可以选择只取消单个 pod 的 API 凭证自动挂载：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("pod\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("serviceAccountName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" build"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("robot\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("automountServiceAccountToken")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),s("p",[t._v("如果在 pod 和 service account 中同时设置了 "),s("code",[t._v("automountServiceAccountToken")]),t._v(", pod 设置中的优先级更高。")]),t._v(" "),s("h3",{attrs:{id:"serviceaccount-的常用操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#serviceaccount-的常用操作","aria-hidden":"true"}},[t._v("#")]),t._v(" ServiceAccount 的常用操作")]),t._v(" "),s("h4",{attrs:{id:"创建-serviceaccount"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-serviceaccount","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建 ServiceAccount")]),t._v(" "),s("p",[t._v("通过命令方式创建 ServiceAccount:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl create sa build-robot -n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),t._v("\n")])])]),s("p",[t._v("也可以像这样创建一个 ServiceAccount 对象：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ServiceAccount\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" build"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("robot\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n")])])]),s("h4",{attrs:{id:"获取-serviceaccount-信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取-serviceaccount-信息","aria-hidden":"true"}},[t._v("#")]),t._v(" 获取 ServiceAccount 信息")]),t._v(" "),s("p",[t._v("如果您看到如下的 ServiceAccount 对象的完整输出信息：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl get sa/build-robot -o yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: build-robot-secret\n  annotations:\n    kubernetes.io/service-account.name: build-robot\ntype: kubernetes.io/service-account-token\n")])])]),s("p",[t._v("查看 ServiceAccount 的详细信息, 包括 token:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl describe secrets/build-robot-secret\nName:   build-robot-secret\nNamespace:  default\nLabels:   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nAnnotations:  kubernetes.io/service-account.name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("build-robot,kubernetes.io/service-account.uid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("870ef2a5-35cf-11e5-8d06-005056b45392\n\nType: kubernetes.io/service-account-token\n\nData\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\nca.crt: 1220 bytes\ntoken: "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nnamespace: 7 bytes\n")])])]),s("h4",{attrs:{id:"删除-serviceaccount"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除-serviceaccount","aria-hidden":"true"}},[t._v("#")]),t._v(" 删除 ServiceAccount")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ kubectl delete sa/build-robot -n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),t._v("\n")])])]),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.colabug.com/3271006.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes RBAC 详解"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.kubernetes.org.cn/service-account",target:"_blank",rel:"noopener noreferrer"}},[t._v("名词解释：Service Account - Kubernetes 中文文档"),s("OutboundLink")],1)])])],1)},[],!1,null,null,null);a.default=n.exports}}]);