(window.webpackJsonp=window.webpackJsonp||[]).push([[374],{837:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"nginx-反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-反向代理","aria-hidden":"true"}},[t._v("#")]),t._v(" Nginx 反向代理")]),t._v(" "),s("h2",{attrs:{id:"正向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正向代理","aria-hidden":"true"}},[t._v("#")]),t._v(" 正向代理")]),t._v(" "),s("p",[t._v("在说反向代理之前，先说下什么是代理或者正向代理。")]),t._v(" "),s("p",[t._v("正向代理也就是代理，他的工作原理就像一个跳板，是用于代理客户端的。所谓"),s("code",[t._v("代理")]),t._v("，就是在客户端和服务端之间强行添加了一层，用来实现流量转发的功能，粗略的框图如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("+----------------+         +---------------+        +--------------+\n|                |         |               |        |              |\n|                |         |               |        |              |\n|                |  http   |               | http   |              |\n|    client      <---------\x3e    proxy      <--------\x3e   server     |\n|                |  https  |               | https  |              |\n|                |         |               |        |              |\n|                |         |               |        |              |\n+----------------+         +---------------+        +--------------+\n\n")])])]),s("p",[t._v("举个很简单的例子：你直接在大陆地区访问"),s("code",[t._v("google.com")]),t._v("肯定是访问不了的，原因大家都知道，现在假如你有一台在美国的主机A，并且能够正常访问，那么你可以将浏览器对"),s("code",[t._v("google.com")]),t._v("的请求先转发给服务器A，服务器A收到请求后，扮演客户端的角色，发起对"),s("code",[t._v("google.com")]),t._v("的请求，服务器A收到响应后，又扮演服务端，将此响应原封不动的返回给你，自此，一次正向代理顺利完成。")]),t._v(" "),s("p",[t._v("结论就是，"),s("code",[t._v("正向代理")]),t._v(" 是一个位于客户端和原始服务器(origin server)之间的服务器。为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。")]),t._v(" "),s("p",[t._v("目前代理软件很多，浏览器上的代理就更多了。什么自由门啊，红杏等。")]),t._v(" "),s("h2",{attrs:{id:"反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反向代理","aria-hidden":"true"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),s("p",[s("code",[t._v("反向代理")]),t._v("顾名思义是用来代理服务端的。我们也举个简单的例子来说明：我们知道"),s("code",[t._v("google.com")]),t._v("每秒钟要处理如洪水般的网络请求，这些请求如果仅仅让一台单一的服务器处理，肯定是处理不过来的，我们自然而然的想到让多台服务器来处理这些请求，减少每台服务器的压力。但是现在有一个问题，多个服务器那就产生了多个IP，一般的，"),s("code",[t._v("google.com")]),t._v("只能解析到某个固定的IP（为了方便描述，我们暂且这样认为。实际情况下，通过设置也是可以让同一个域名解析到多个IP的），因为现在存在多个Server，我的一个"),s("code",[t._v("google.com")]),t._v("就不能解析到这些服务器上，而且用多个二级域名比如"),s("code",[t._v("server1.google.com")]),t._v("，"),s("code",[t._v("server2.google.com")]),t._v("等等也给用户造成了使用上的不便（一万台服务器，你咋不上天呢?），那该怎么办呢？通过反向代理可以很好的解决这个问题。为此，我绘制了下面的示意图：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("                                                                   +-------------------+\n                                                                   |                   |\n                                                            +------\x3e   server 1        |\n+-------------+                                             |      |                   |\n|             +----------+                                  |      |                   |\n|  client 1   |          |                                  |      +-------------------+\n|             |          |                                  |\n+-------------+          |                                  |\n                         |         +------------------+     |      +-------------------+\n                         |         |                  |     |      |                   |\n+-------------+          |         |                  |     |      |   server 2        |\n|             |          |         |                  +------------\x3e                   |\n|  clent 2    +--------------------\x3e  reverse proxy   |     |      |                   |\n|             |          |         |                  |     |      +-------------------+\n+-------------+          |         |                  |     |\n                         |         |                  |     |               .\n      .                  |         |                  |     |               .\n      .                  |         +------------------+     |               .\n      .                  |                                  |\n                         |                                  |      +--------------------+\n+-------------+          |                                  |      |                    |\n|             |          |                                  |      |   server m         |\n|  client n   +----------+                                  +------\x3e                    |\n|             |                                                    |                    |\n+-------------+                                                    +--------------------+\n\n\n")])])]),s("p",[t._v("正向代理和反向代理就基本清楚了，那我们就来用nginx来配置一个反向代理。")]),t._v(" "),s("p",[t._v("nginx 使用反向代理，主要是使用location模块下的 "),s("code",[t._v("proxy_pass")]),t._v(" 选项。")]),t._v(" "),s("h2",{attrs:{id:"配置反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置反向代理","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置反向代理")]),t._v(" "),s("ol",[s("li",[t._v("我们利用 node启动一个本地server。")])]),t._v(" "),s("p",[t._v("index.js 中开启3000端口 (node 服务器脚本请查阅相关资料)")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ node index\n")])])]),s("p",[t._v("其中index.js")]),t._v(" "),s("imgLink",{attrs:{src:"date/20181116/01.png"}}),t._v(" "),s("ol",[s("li",[t._v("配置host文件, 在里面添加一条记录")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ vim /etc/hosts\ntest.com  127.0.0.1\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("配置nginx.conf")])]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("http")]),t._v("里面添加：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#本地http-server开启的server，命名为node-server，监听3000端口")]),t._v("\nupstream node-server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  server 127.0.0.1:3000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# NGINX 虚拟主机，监听8880端口")]),t._v("\nserver "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  listen 8880"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  server_name test.com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  access_log /var/log/nginx/node-server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Gzip Compression")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("gzip")]),t._v(" on"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  gzip_comp_level 6"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  gzip_vary on"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  gzip_min_length  1000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  gzip_proxied any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  gzip_buffers 16 8k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 反向代理 node-server")]),t._v("\n  location / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    proxy_set_header X-Real-IP "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$remote_addr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    proxy_set_header X-Forwarded-For "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$proxy_add_x_forwarded_for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    proxy_set_header Host "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$http_host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    proxy_set_header X-NginX-Proxy "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 代理的地址")]),t._v("\n    proxy_pass http://node-server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    proxy_redirect off"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("如果需要转发所有的请求，使用正则表达式，使用~启用正则")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("location ~ .*"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("/ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  proxy_set_header X-Real-IP "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$remote_addr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  proxy_set_header X-Forwarded-For "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$proxy_add_x_forwarded_for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  proxy_set_header Host "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$http_host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  proxy_set_header X-NginX-Proxy "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 代理的地址")]),t._v("\n  proxy_pass http://node-server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  proxy_redirect off"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[s("p",[t._v("重新启动设置 "),s("code",[t._v("nginx -s reload")])])]),t._v(" "),s("li",[s("p",[t._v("测试")])])]),t._v(" "),s("imgLink",{attrs:{src:"date/20181116/02.png"}}),t._v(" "),s("p",[t._v("可以看到，对于用户的请求，我们成功反向代理到"),s("code",[t._v("127.0.0.1:3000")]),t._v("上！")])],1)},[],!1,null,null,null);a.default=e.exports}}]);