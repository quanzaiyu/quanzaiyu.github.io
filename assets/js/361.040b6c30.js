(window.webpackJsonp=window.webpackJsonp||[]).push([[361],{805:function(t,a,s){"use strict";s.r(a);var e={props:["slot-key"],mounted(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},v=s(0),_=Object(v.a)(e,function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.slotKey}},[s("h1",{attrs:{id:"内置函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内置函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 内置函数")]),t._v(" "),s("h2",{attrs:{id:"数学函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数学函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 数学函数")]),t._v(" "),s("p",[t._v("不在"),s("code",[t._v("math")]),t._v(" 下的数学函数:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("abs(num)")]),t._v(" 返回num的绝对值")]),t._v(" "),s("li",[s("code",[t._v("min(nums)")]),t._v(" 返回nums的最小值")]),t._v(" "),s("li",[s("code",[t._v("max(nums)")]),t._v(" 返回nums的最大值")]),t._v(" "),s("li",[s("code",[t._v("round(num)")]),t._v(" 返回num的四舍五入值")])]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[s("code",[t._v("divmod(x,y)")]),t._v("  返回一个元组（x//y, x%y）")])]),t._v(" "),s("p",[t._v("如 divmod(100,10)  返回一个元组（10,0），第一个元素的100/10的商，第二个元素的100/10的余数")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("pow(x,y)")]),t._v("  求次方，返回 x**y 的结果")]),t._v(" "),s("li",[s("code",[t._v("pow(x,y,z)")]),t._v(" 返回 x**y%z 的结果")]),t._v(" "),s("li",[s("code",[t._v("range(num)")]),t._v(" 获取随机数或随机字符 eg. range(10) 从0到10的随机数")])]),t._v(" "),s("h2",{attrs:{id:"转换函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转换函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 转换函数")]),t._v(" "),s("h3",{attrs:{id:"类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("int(x [,base])")]),t._v(" 将x转换为一个整数")]),t._v(" "),s("li",[s("code",[t._v("float(x)")]),t._v(" 将x转换到一个浮点数")]),t._v(" "),s("li",[s("code",[t._v("complex(real [,imag])")]),t._v(" 创建一个复数")])]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[s("code",[t._v("str(x)")]),t._v(" 将对象x转换为字符串")]),t._v(" "),s("li",[s("code",[t._v("bool(x)")]),t._v(" 将其他数据类型的对象转化为布尔值")])]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[s("code",[t._v("list(s)")]),t._v(" 将序列s转换为一个列表")]),t._v(" "),s("li",[s("code",[t._v("tuple(s)")]),t._v(" 将序列s转换为一个元组")]),t._v(" "),s("li",[s("code",[t._v("set(s)")]),t._v(" 将序列s转换为可变集合")]),t._v(" "),s("li",[s("code",[t._v("dict(d)")]),t._v(" 创建一个字典。d 必须是一个序列 (key,value)元组")]),t._v(" "),s("li",[s("code",[t._v("frozenset(s)")]),t._v(" 转换为不可变集合")])]),t._v(" "),s("h3",{attrs:{id:"进制转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进制转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 进制转换")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("bin()")]),t._v(" 将一个整数转换为一个二进制字符串")]),t._v(" "),s("li",[s("code",[t._v("oct()")]),t._v(" 将一个整数转换为一个八进制字符串")]),t._v(" "),s("li",[s("code",[t._v("hex()")]),t._v(" 将一个整数转换为一个十六进制字符串")])]),t._v(" "),s("h3",{attrs:{id:"其它转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其它转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 其它转换")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("ascii()")]),t._v(" 将一个字符转换为它的ascii")]),t._v(" "),s("li",[s("code",[t._v("bytes()")]),t._v(" 将一个字符转换为字节码")]),t._v(" "),s("li",[s("code",[t._v("chr()")]),t._v(" 将一个整数转换为一个字符")]),t._v(" "),s("li",[s("code",[t._v("ord()")]),t._v(" 将一个字符转换为它的整数值")]),t._v(" "),s("li",[s("code",[t._v("unichr(x)")]),t._v(" 将一个整数转换为Unicode字符")])]),t._v(" "),s("h2",{attrs:{id:"集合运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合运算","aria-hidden":"true"}},[t._v("#")]),t._v(" 集合运算")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("all()")]),t._v(" 所有传入参数为真，才为真\n"),s("ul",[s("li",[t._v("all([True,False])返回 False")]),t._v(" "),s("li",[t._v("all([True,True])返回 True")])])]),t._v(" "),s("li",[s("code",[t._v("any()")]),t._v(" 任何一个传入参数为真，就为真\n"),s("ul",[s("li",[t._v("any([True,False])返回 True")]),t._v(" "),s("li",[t._v("any([False,False])返回 False")])])])]),t._v(" "),s("h2",{attrs:{id:"eval"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval","aria-hidden":"true"}},[t._v("#")]),t._v(" eval")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("eval()")]),t._v("  执行python代码，并返回其执行结果。")])]),t._v(" "),s("p",[t._v("如")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{attrs:{class:"token builtin"}},[t._v("eval")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"1+2+3"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token builtin"}},[t._v("eval")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"print(123)"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("在接收用户输入时应避免使用eval，因为别有用心的用户可能借此注入恶意代码")]),t._v(" "),s("h2",{attrs:{id:"exec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exec","aria-hidden":"true"}},[t._v("#")]),t._v(" exec")]),t._v(" "),s("p",[s("code",[t._v("exec()")]),t._v("  执行python代码（可以是编译过的，也可以是未编译的），没有返回结果（返回None）")]),t._v(" "),s("p",[t._v("如")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("exec")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token builtin"}},[t._v("compile")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"print(123)"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token string"}},[t._v('"<string>"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token string"}},[t._v('"exec"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   \n"),s("span",{attrs:{class:"token keyword"}},[t._v("exec")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"print(123)"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"isinstance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#isinstance","aria-hidden":"true"}},[t._v("#")]),t._v(" isinstance")]),t._v(" "),s("p",[s("code",[t._v("isinstance(object, class)")]),t._v(" 判断对象是否是某个类的实例.")]),t._v(" "),s("p",[t._v("如")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{attrs:{class:"token builtin"}},[t._v("isinstance")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token builtin"}},[t._v("list")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"其他函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 其他函数")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("dir()")]),t._v("  接收对象作为参数，返回该对象的所有属性和方法")]),t._v(" "),s("li",[s("code",[t._v("help()")]),t._v(" 接收对象作为参数，更详细地返回该对象的所有属性和方法")]),t._v(" "),s("li",[s("code",[t._v("slice(起始下标，终止下标，步长)")]),t._v("  对序列化类型数据切片，返回一个新的对象，步长默认为1。")]),t._v(" "),s("li",[s("code",[t._v("globals()")]),t._v("  返回一个字典，包括所有的全局变量与它的值所组成的键值对")]),t._v(" "),s("li",[s("code",[t._v("locals()")]),t._v("  返回一个字典，包括所有的局部变量与它的值所组成的键值对")]),t._v(" "),s("li",[s("code",[t._v("compile()")]),t._v("  接收.py文件或字符串作为传入参数，将其编译成python字节码。")]),t._v(" "),s("li",[s("code",[t._v("hash()")]),t._v("  对传入参数取哈希值并返回")]),t._v(" "),s("li",[s("code",[t._v("id()")]),t._v(" 返回内存地址，可用于查看两个变量是否指向相同一块内存地址")]),t._v(" "),s("li",[s("code",[t._v("issubclass(subclass,class)")]),t._v(" 查看这个类是否是另一个类的派生类，如果是返回True，否则返回False")]),t._v(" "),s("li",[s("code",[t._v("memoryview()")]),t._v(" 查看内存地址")]),t._v(" "),s("li",[s("code",[t._v("repr()")]),t._v(" 执行传入对象中的_repr_方法")]),t._v(" "),s("li",[s("code",[t._v("type()")]),t._v(" 返回对象类型")]),t._v(" "),s("li",[s("code",[t._v("staticmethod()")]),t._v(" 返回静态方法")]),t._v(" "),s("li",[s("code",[t._v("super()")]),t._v(" 返回基类")]),t._v(" "),s("li",[s("code",[t._v("vars()")]),t._v(" 返回当前模块中的所有变量")]),t._v(" "),s("li",[s("code",[t._v("next()")])]),t._v(" "),s("li",[s("code",[t._v("iter()")])]),t._v(" "),s("li",[s("code",[t._v("object()")])])]),t._v(" "),s("p",[t._v("参考：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://www.cnblogs.com/huamingao/p/5887887.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("python3内置函数详解"),s("OutboundLink")],1)])])])},[],!1,null,null,null);_.options.__file="Function_Build_In.md";a.default=_.exports}}]);