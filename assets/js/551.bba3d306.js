(window.webpackJsonp=window.webpackJsonp||[]).push([[551],{972:function(e,t,a){"use strict";a.r(t);var s=a(1),r=Object(s.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"kubernetes-核心概念、架构及原理分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-核心概念、架构及原理分析","aria-hidden":"true"}},[e._v("#")]),e._v(" Kubernetes 核心概念、架构及原理分析")]),e._v(" "),a("h2",{attrs:{id:"kubernetes总体架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes总体架构","aria-hidden":"true"}},[e._v("#")]),e._v(" Kubernetes总体架构")]),e._v(" "),a("h3",{attrs:{id:"master和node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master和node","aria-hidden":"true"}},[e._v("#")]),e._v(" Master和Node")]),e._v(" "),a("p",[e._v("Kubernetes将集群中的机器划分为一个Master节点和一群工作节点（Node）。其中，Master节点上运行着集群管理相关的一组进程etcd、API Server、Controller Manager、Scheduler，后三个组件构成了Kubernetes的总控中心，这些进程实现了整个集群的资源管理、Pod调度、弹性伸缩、安全控制、系统监控和纠错等管理功能，并且全都是自动完成。在每个Node上运行Kubelet、Proxy、Docker daemon三个组件，负责对本节点上的Pod的生命周期进行管理，以及实现服务代理的功能。")]),e._v(" "),a("h3",{attrs:{id:"etcd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etcd","aria-hidden":"true"}},[e._v("#")]),e._v(" etcd")]),e._v(" "),a("p",[e._v("用于持久化存储集群中所有的资源对象，如Node、Service、Pod、RC、Namespace等；API Server提供了操作etcd的封装接口API，这些API基本上都是集群中资源对象的增删改查及监听资源变化的接口。")]),e._v(" "),a("h3",{attrs:{id:"api-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-server","aria-hidden":"true"}},[e._v("#")]),e._v(" API Server")]),e._v(" "),a("p",[e._v("提供了资源对象的唯一操作入口，其他所有组件都必须通过它提供的API来操作资源数据，通过对相关的资源数据“全量查询”+“变化监听”，这些组件可以很“实时”地完成相关的业务功能。")]),e._v(" "),a("p",[e._v("API Server内部有一套完备的安全机制，包括认证、授权和准入控制等相关模块")]),e._v(" "),a("h3",{attrs:{id:"controller-manager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#controller-manager","aria-hidden":"true"}},[e._v("#")]),e._v(" Controller Manager")]),e._v(" "),a("p",[e._v("集群内部的管理控制中心，其主要目的是实现Kubernetes集群的故障检测和恢复的自动化工作，比如根据RC的定义完成Pod的复制或移除，以确保Pod实例数符合RC副本的定义；根据Service与Pod的管理关系，完成服务的Endpoints对象的创建和更新；其他诸如Node的发现、管理和状态监控、死亡容器所占磁盘空间及本地缓存的镜像文件的清理等工作也是由Controller Manager完成的。")]),e._v(" "),a("h3",{attrs:{id:"scheduler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scheduler","aria-hidden":"true"}},[e._v("#")]),e._v(" Scheduler")]),e._v(" "),a("p",[e._v("集群中的调度器，负责Pod在集群节点中的调度分配。")]),e._v(" "),a("h3",{attrs:{id:"kubelet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubelet","aria-hidden":"true"}},[e._v("#")]),e._v(" Kubelet")]),e._v(" "),a("p",[e._v("负责本Node节点上的Pod的创建、修改、监控、删除等全生命周期管理，同时Kubelet定时“上报”本Node的状态信息到API Server里。")]),e._v(" "),a("h3",{attrs:{id:"proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy","aria-hidden":"true"}},[e._v("#")]),e._v(" Proxy")]),e._v(" "),a("p",[e._v("实现了Service的代理与软件模式的负载均衡器。")]),e._v(" "),a("p",[e._v("客户端通过Kubectl命令行工具或Kubectl Proxy来访问Kubernetes系统，在Kubernetes集群内部的客户端可以直接使用Kuberctl命令管理集群。Kubectl Proxy是API Server的一个反向代理，在Kubernetes集群外部的客户端可以通过Kubernetes Proxy来访问API Server。")]),e._v(" "),a("h2",{attrs:{id:"资源对象与基本概念解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源对象与基本概念解析","aria-hidden":"true"}},[e._v("#")]),e._v(" 资源对象与基本概念解析")]),e._v(" "),a("p",[e._v("以下列举的内容都是 kubernetes 中的 Object，这些对象都可以在 yaml 文件中作为一种 API 类型来配置。")]),e._v(" "),a("ul",[a("li",[e._v("Pod")]),e._v(" "),a("li",[e._v("Node")]),e._v(" "),a("li",[e._v("Namespace")]),e._v(" "),a("li",[e._v("Service")]),e._v(" "),a("li",[e._v("Volume")]),e._v(" "),a("li",[e._v("PersistentVolume")]),e._v(" "),a("li",[e._v("Deployment")]),e._v(" "),a("li",[e._v("Secret")]),e._v(" "),a("li",[e._v("StatefulSet")]),e._v(" "),a("li",[e._v("DaemonSet")]),e._v(" "),a("li",[e._v("ServiceAccount")]),e._v(" "),a("li",[e._v("ReplicationController")]),e._v(" "),a("li",[e._v("ReplicaSet")]),e._v(" "),a("li",[e._v("Job")]),e._v(" "),a("li",[e._v("CronJob")]),e._v(" "),a("li",[e._v("SecurityContext")]),e._v(" "),a("li",[e._v("ResourceQuota")]),e._v(" "),a("li",[e._v("LimitRange")]),e._v(" "),a("li",[e._v("HorizontalPodAutoscaling")]),e._v(" "),a("li",[e._v("Ingress")]),e._v(" "),a("li",[e._v("ConfigMap")]),e._v(" "),a("li",[e._v("Label")]),e._v(" "),a("li",[e._v("CustomResourceDefinition")]),e._v(" "),a("li",[e._v("Role")]),e._v(" "),a("li",[e._v("ClusterRole")])]),e._v(" "),a("p",[e._v("我将它们简单的分类为以下几种资源对象：")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("类别")]),e._v(" "),a("th",[e._v("名称")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("资源对象")]),e._v(" "),a("td",[e._v("Pod、ReplicaSet、ReplicationController、Deployment、StatefulSet、DaemonSet、Job、CronJob、HorizontalPodAutoscaling、Node、Namespace、Service、Ingress、Label、CustomResourceDefinition")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("存储对象")]),e._v(" "),a("td",[e._v("Volume、PersistentVolume、Secret、ConfigMap")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("策略对象")]),e._v(" "),a("td",[e._v("SecurityContext、ResourceQuota、LimitRange")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("身份对象")]),e._v(" "),a("td",[e._v("ServiceAccount、Role、ClusterRole")])])])]),e._v(" "),a("h3",{attrs:{id:"理解-kubernetes-中的对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解-kubernetes-中的对象","aria-hidden":"true"}},[e._v("#")]),e._v(" 理解 kubernetes 中的对象")]),e._v(" "),a("p",[e._v("在 Kubernetes 系统中，"),a("em",[e._v("Kubernetes 对象")]),e._v(" 是持久化的条目。Kubernetes 使用这些条目去表示整个集群的状态。特别地，它们描述了如下信息：")]),e._v(" "),a("ul",[a("li",[e._v("什么容器化应用在运行（以及在哪个 Node 上）")]),e._v(" "),a("li",[e._v("可以被应用使用的资源")]),e._v(" "),a("li",[e._v("关于应用如何表现的策略，比如重启策略、升级策略，以及容错策略")])]),e._v(" "),a("p",[e._v("Kubernetes 对象是 “目标性记录” —— 一旦创建对象，Kubernetes 系统将持续工作以确保对象存在。通过创建对象，可以有效地告知 Kubernetes 系统，所需要的集群工作负载看起来是什么样子的，这就是 Kubernetes 集群的 "),a("strong",[e._v("期望状态")]),e._v("。")]),e._v(" "),a("p",[e._v("与 Kubernetes 对象工作 —— 是否创建、修改，或者删除 —— 需要使用 "),a("a",{attrs:{href:"https://git.k8s.io/community/contributors/devel/api-conventions.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes API"),a("OutboundLink")],1),e._v("。当使用 "),a("code",[e._v("kubectl")]),e._v(" 命令行接口时，比如，CLI 会使用必要的 Kubernetes API 调用，也可以在程序中直接使用 Kubernetes API。为了实现该目标，Kubernetes 当前提供了一个 "),a("code",[e._v("golang")]),e._v(" "),a("a",{attrs:{href:"https://github.com/kubernetes/client-go",target:"_blank",rel:"noopener noreferrer"}},[e._v("客户端库"),a("OutboundLink")],1),e._v(" ，其它语言库（例如"),a("a",{attrs:{href:"https://github.com/kubernetes-incubator/client-python",target:"_blank",rel:"noopener noreferrer"}},[e._v("Python"),a("OutboundLink")],1),e._v("）也正在开发中。")]),e._v(" "),a("h3",{attrs:{id:"对象-spec-与状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象-spec-与状态","aria-hidden":"true"}},[e._v("#")]),e._v(" 对象 Spec 与状态")]),e._v(" "),a("p",[e._v("每个 Kubernetes 对象包含两个嵌套的对象字段，它们负责管理对象的配置：对象 "),a("em",[e._v("spec")]),e._v(" 和 对象 "),a("em",[e._v("status")]),e._v("。"),a("em",[e._v("spec")]),e._v(" 必须提供，它描述了对象的 "),a("em",[e._v("期望状态")]),e._v("—— 希望对象所具有的特征。"),a("em",[e._v("status")]),e._v(" 描述了对象的 "),a("em",[e._v("实际状态")]),e._v("，它是由 Kubernetes 系统提供和更新。在任何时刻，Kubernetes 控制平面一直处于活跃状态，管理着对象的实际状态以与我们所期望的状态相匹配。")]),e._v(" "),a("p",[e._v("例如，Kubernetes Deployment 对象能够表示运行在集群中的应用。当创建 Deployment 时，可能需要设置 Deployment 的 spec，以指定该应用需要有 3 个副本在运行。Kubernetes 系统读取 Deployment spec，启动我们所期望的该应用的 3 个实例 —— 更新状态以与 spec 相匹配。如果那些实例中有失败的（一种状态变更），Kubernetes 系统通过修正来响应 spec 和状态之间的不一致 —— 这种情况，启动一个新的实例来替换。")]),e._v(" "),a("p",[e._v("关于对象 spec、status 和 metadata 更多信息，查看 "),a("a",{attrs:{href:"https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes API Conventions"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"描述-kubernetes-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述-kubernetes-对象","aria-hidden":"true"}},[e._v("#")]),e._v(" 描述 Kubernetes 对象")]),e._v(" "),a("p",[e._v("当创建 Kubernetes 对象时，必须提供对象的 spec，用来描述该对象的期望状态，以及关于对象的一些基本信息（例如，名称）。当使用 Kubernetes API 创建对象时（或者直接创建，或者基于"),a("code",[e._v("kubectl")]),e._v("），API 请求必须在请求体中包含 JSON 格式的信息。"),a("strong",[e._v("更常用的是，需要在 .yaml 文件中为 kubectl 提供这些信息")]),e._v("。 "),a("code",[e._v("kubectl")]),e._v(" 在执行 API 请求时，将这些信息转换成 JSON 格式。")]),e._v(" "),a("p",[e._v("这里有一个 "),a("code",[e._v("nginx-deployment.yaml")]),e._v(" 示例文件，展示了 Kubernetes Deployment 的必需字段和对象 spec：")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Deployment\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("deployment\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("replicas")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" nginx\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("1.7.9\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("containerPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),e._v("\n")])])]),a("p",[e._v("一种创建 Deployment 的方式，类似上面使用 "),a("code",[e._v(".yaml")]),e._v(" 文件，是使用 "),a("code",[e._v("kubectl")]),e._v(" 命令行接口（CLI）中的 "),a("code",[e._v("kubectl create")]),e._v(" 命令，传递 "),a("code",[e._v(".yaml")]),e._v(" 作为参数。下面是一个示例：")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ kubectl create -f nginx-deployment.yaml --record\ndeployment "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nginx-deployment"')]),e._v(" created\n")])])]),a("h3",{attrs:{id:"必需字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#必需字段","aria-hidden":"true"}},[e._v("#")]),e._v(" 必需字段")]),e._v(" "),a("p",[e._v("在想要创建的 Kubernetes 对象对应的 "),a("code",[e._v(".yaml")]),e._v(" 文件中，需要配置如下的字段：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("apiVersion")]),e._v(" - 创建该对象所使用的 Kubernetes API 的版本")]),e._v(" "),a("li",[a("code",[e._v("kind")]),e._v(" - 想要创建的对象的类型")]),e._v(" "),a("li",[a("code",[e._v("metadata")]),e._v(" - 帮助识别对象唯一性的数据，包括一个 "),a("code",[e._v("name")]),e._v(" 字符串、UID 和可选的 "),a("code",[e._v("namespace")])])]),e._v(" "),a("p",[e._v("也需要提供对象的 "),a("code",[e._v("spec")]),e._v(" 字段。对象 "),a("code",[e._v("spec")]),e._v(" 的精确格式对每个 Kubernetes 对象来说是不同的，包含了特定于该对象的嵌套字段。"),a("a",{attrs:{href:"https://kubernetes.io/docs/api/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes API 参考"),a("OutboundLink")],1),e._v("能够帮助我们找到任何我们想创建的对象的 spec 格式。")]),e._v(" "),a("h2",{attrs:{id:"kubernetes-cluster"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-cluster","aria-hidden":"true"}},[e._v("#")]),e._v(" Kubernetes Cluster")]),e._v(" "),a("p",[e._v("Kubernetes将底层的计算资源连接在一起对外体现为一个计算集群，并将资源高度抽象化。部署应用时Kubernetes会以更高效的方式自动的将应用分发到集群内的机器上面，并调度运行。几个Kubernetes集群包含两种类型的资源：")]),e._v(" "),a("ul",[a("li",[e._v("Master节点：协调控制整个集群。")]),e._v(" "),a("li",[e._v("Nodes节点：运行应用的工作节点。")])]),e._v(" "),a("imgLink",{attrs:{src:"date/20190324/001.svg"}}),e._v(" "),a("p",[a("strong",[e._v("Master")]),e._v(" 负责管理集群。 master 协调集群中的所有活动，例如调度应用程序、维护应用程序的所需状态、扩展应用程序和滚动更新。")]),e._v(" "),a("p",[a("strong",[e._v("Node")]),e._v(" 是 Kubernetes 集群中的工作机器，可以是物理机或虚拟机。 每个工作节点都有一个 Kubelet，它是管理 节点 并与 Kubernetes Master 节点进行通信的代理。节点 上还应具有处理容器操作的工作，例如 Docker 或 rkt。一个 Kubernetes 工作集群至少有三个节点。")]),e._v(" "),a("p",[e._v("当部署应用的时候，我们通知Master节点启动应用容器。然后Master会调度这些应用将它们运行在Node节点上面。Node节点和Master节点通过Master节点暴露的Kubernetes API通信。当然我们也可以直接通过这些API和集群交互。")]),e._v(" "),a("h2",{attrs:{id:"节点-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点-node","aria-hidden":"true"}},[e._v("#")]),e._v(" 节点 (Node)")]),e._v(" "),a("p",[e._v("Node是kubernetes集群的工作节点，可以是物理机也可以是虚拟机。")]),e._v(" "),a("p",[e._v("Kubernetes集群中的计算能力由Node提供，最初Node称为服务节点Minion，后来改名为Node。Kubernetes集群中的Node也就等同于Mesos集群中的Slave节点，是所有Pod运行所在的工作主机，可以是物理机也可以是虚拟机。不论是物理机还是虚拟机，工作主机的统一特征是上面要运行kubelet管理节点上运行的容器。")]),e._v(" "),a("h3",{attrs:{id:"node状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node状态","aria-hidden":"true"}},[e._v("#")]),e._v(" Node状态")]),e._v(" "),a("p",[e._v("Node包括如下状态信息：")]),e._v(" "),a("p",[e._v("Node作为集群中的工作节点，运行真正的应用程序，在Node上Kubernetes管理的最小运行单元是Pod。Node上运行着Kubernetes的Kubelet、kube-proxy服务进程，这些服务进程负责Pod的创建、启动、监控、重启、销毁、以及实现软件模式的负载均衡。")]),e._v(" "),a("p",[e._v("Node包含的信息：")]),e._v(" "),a("ul",[a("li",[e._v("Node地址 (Address)：主机的IP地址，或Node ID\n"),a("ul",[a("li",[e._v("HostName：可以被kubelet中的"),a("code",[e._v("--hostname-override")]),e._v("参数替代。")]),e._v(" "),a("li",[e._v("ExternalIP：可以被集群外部路由到的IP地址。")]),e._v(" "),a("li",[e._v("InternalIP：集群内部使用的IP，集群外部无法访问。")])])]),e._v(" "),a("li",[e._v("Condition\n"),a("ul",[a("li",[e._v("OutOfDisk：磁盘空间不足时为"),a("code",[e._v("True")])]),e._v(" "),a("li",[e._v("Ready：Node controller 40秒内没有收到node的状态报告为"),a("code",[e._v("Unknown")]),e._v("，健康为"),a("code",[e._v("True")]),e._v("，否则为"),a("code",[e._v("False")]),e._v("。")]),e._v(" "),a("li",[e._v("MemoryPressure：当node有内存压力时为"),a("code",[e._v("True")]),e._v("，否则为"),a("code",[e._v("False")]),e._v("。")]),e._v(" "),a("li",[e._v("DiskPressure：当node有磁盘压力时为"),a("code",[e._v("True")]),e._v("，否则为"),a("code",[e._v("False")]),e._v("。")])])]),e._v(" "),a("li",[e._v("Node系统容量 (Capacity)：描述Node可用的系统资源，包括CPU、内存、最大可调度Pod数量等")]),e._v(" "),a("li",[e._v("Node的运行状态 (Status)：Pending、Running、Terminated三种状态")]),e._v(" "),a("li",[e._v("Info：节点的一些版本信息，如OS、kubernetes、docker等")]),e._v(" "),a("li",[e._v("其他：内核版本号、Kubernetes版本等。")])]),e._v(" "),a("h3",{attrs:{id:"node管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node管理","aria-hidden":"true"}},[e._v("#")]),e._v(" Node管理")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ kubectl get nodes "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 获取所有节点")]),e._v("\n$ kubectl describe node "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看Node信息")]),e._v("\n$ kubectl cordon "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("node"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 禁止pod调度到该节点上")]),e._v("\n$ kubectl drain "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("node"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 驱逐该节点上的所有pod")]),e._v("\n")])])]),a("p",[a("code",[e._v("drain")]),e._v(" 命令会删除该节点上的所有Pod（DaemonSet除外），在其他node上重新启动它们，通常该节点需要维护时使用该命令。直接使用该命令会自动调用"),a("code",[e._v("kubectl cordon <node>")]),e._v("命令。当该节点维护完成，启动了kubelet后，再使用"),a("code",[e._v("kubectl uncordon <node>")]),e._v("即可将该节点添加到kubernetes集群中。")]),e._v(" "),a("h2",{attrs:{id:"命名空间-namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名空间-namespace","aria-hidden":"true"}},[e._v("#")]),e._v(" 命名空间 (Namespace)")]),e._v(" "),a("p",[e._v("命名空间为Kubernetes集群提供虚拟的隔离作用。")]),e._v(" "),a("p",[e._v("详见 "),a("a",{attrs:{href:"./Namespace"}},[e._v("Kubernetes 核心概念 - 命名空间")])]),e._v(" "),a("h2",{attrs:{id:"容器组-pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器组-pod","aria-hidden":"true"}},[e._v("#")]),e._v(" 容器组 (Pod)")]),e._v(" "),a("p",[e._v("Pod直译是豆荚，是Kubernetes最基本的操作单元，包含一个或多个紧密相关的容器。可以把容器想像成豆荚里的豆子，把一个或多个关系紧密的豆子包在一起就是豆荚（一个Pod）。在k8s中我们不会直接操作容器，而是把容器包装成Pod再进行管理。")]),e._v(" "),a("p",[e._v("详见 "),a("a",{attrs:{href:"./Pod"}},[e._v("Kubernetes 核心概念 - 容器组")])]),e._v(" "),a("h2",{attrs:{id:"pod的部署与管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod的部署与管理","aria-hidden":"true"}},[e._v("#")]),e._v(" Pod的部署与管理")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("副本与副本集 (RC、RS)")]),e._v(" 用来管理正常运行Pod数量，系统会根据定义好的副本数来创建Pod数量。在运行过程中，如果Pod数量小于定义的，就会重启停止的或重新分配Pod，反之则杀死多余的")]),e._v(" "),a("li",[a("strong",[e._v("部署 (Deployment)")]),e._v(" 部署表示用户对Kubernetes集群的一次更新操作。部署是一个比RS应用模式更广的API对象，可以是创建一个新的服务，更新一个新的服务，也可以是滚动升级一个服务")]),e._v(" "),a("li",[a("strong",[e._v("守护进程集 (DaemonSet)")]),e._v(" 一个DaemonSet对象能确保其创建的Pod在集群中的每一台（或指定）Node上都运行一个副本")])]),e._v(" "),a("p",[e._v("详见 "),a("a",{attrs:{href:"./Deployment"}},[e._v("Kubernetes 核心概念 - Pod的部署与管理")])]),e._v(" "),a("h2",{attrs:{id:"暴露服务的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暴露服务的方式","aria-hidden":"true"}},[e._v("#")]),e._v(" 暴露服务的方式")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("服务 (Service)")]),e._v(" 用于对外暴露服务, 使用 NodePort 向外提供端口")]),e._v(" "),a("li",[a("strong",[e._v("访问权 (Ingress)")]),e._v(" 用作反向代理和负载均衡的工具")])]),e._v(" "),a("p",[e._v("详见 "),a("a",{attrs:{href:"./Service"}},[e._v("Kubernetes 核心概念 - 暴露服务的方式")])]),e._v(" "),a("h2",{attrs:{id:"任务-job"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任务-job","aria-hidden":"true"}},[e._v("#")]),e._v(" 任务 (Job)")]),e._v(" "),a("p",[e._v("Job负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个Pod成功结束。")]),e._v(" "),a("h3",{attrs:{id:"job-spec格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#job-spec格式","aria-hidden":"true"}},[e._v("#")]),e._v(" Job Spec格式")]),e._v(" "),a("ul",[a("li",[e._v("spec.template格式同Pod")]),e._v(" "),a("li",[e._v("RestartPolicy仅支持Never或OnFailure")]),e._v(" "),a("li",[e._v("单个Pod时，默认Pod成功运行后Job即结束")]),e._v(" "),a("li",[a("code",[e._v(".spec.completions")]),e._v("标志Job结束需要成功运行的Pod个数，默认为1")]),e._v(" "),a("li",[a("code",[e._v(".spec.parallelism")]),e._v("标志并行运行的Pod的个数，默认为1")]),e._v(" "),a("li",[a("code",[e._v("spec.activeDeadlineSeconds")]),e._v("标志失败Pod的重试最大时间，超过这个时间不会继续重试")])]),e._v(" "),a("p",[e._v("一个简单的例子：")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" batch/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Job\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" pi\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" pi\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" pi\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" perl\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"perl"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("  "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-Mbignum=bpi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-wle"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"print bpi(2000)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("restartPolicy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Never\n$ kubectl create "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v('f ./job.yaml\njob "pi" created\n$ pods=$(kubectl get pods '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("selector=job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("name=pi "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("output=jsonpath="),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(".items..metadata.name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(")\n$ kubectl logs $pods\n3.141592653589793238462643383279502"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("...")]),e._v("\n")])])]),a("h3",{attrs:{id:"bare-pods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bare-pods","aria-hidden":"true"}},[e._v("#")]),e._v(" Bare Pods")]),e._v(" "),a("p",[e._v("所谓Bare Pods是指直接用PodSpec来创建的Pod（即不在ReplicaSets或者ReplicationController的管理之下的Pods）。这些Pod在Node重启后不会自动重启，但Job则会创建新的Pod继续任务。所以，推荐使用Job来替代Bare Pods，即便是应用只需要一个Pod。")]),e._v(" "),a("h2",{attrs:{id:"定时任务-cronjob"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时任务-cronjob","aria-hidden":"true"}},[e._v("#")]),e._v(" 定时任务 (CronJob)")]),e._v(" "),a("p",[a("em",[e._v("Cron Job")]),e._v(" 管理基于时间的 "),a("a",{attrs:{href:"https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Job"),a("OutboundLink")],1),e._v("，即：")]),e._v(" "),a("ul",[a("li",[e._v("在给定时间点只运行一次")]),e._v(" "),a("li",[e._v("周期性地在给定时间点运行")])]),e._v(" "),a("p",[e._v("一个 CronJob 对象类似于 "),a("em",[e._v("crontab")]),e._v(" （cron table）文件中的一行。它根据指定的预定计划周期性地运行一个 Job，格式可以参考 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cron",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cron"),a("OutboundLink")],1),e._v(" 。")]),e._v(" "),a("h3",{attrs:{id:"前提条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前提条件","aria-hidden":"true"}},[e._v("#")]),e._v(" 前提条件")]),e._v(" "),a("p",[e._v("当前使用的 Kubernetes 集群，版本 >= 1.8（对 CronJob）。对于先前版本的集群，版本 < 1.8，启动 API Server（参考 "),a("a",{attrs:{href:"https://kubernetes.io/docs/admin/cluster-management/#turn-on-or-off-an-api-version-for-your-cluster",target:"_blank",rel:"noopener noreferrer"}},[e._v("为集群开启或关闭 API 版本"),a("OutboundLink")],1),e._v(" 获取更多信息）时，通过传递选项 "),a("code",[e._v("--runtime-config=batch/v2alpha1=true")]),e._v(" 可以开启 batch/v2alpha1 API。")]),e._v(" "),a("p",[e._v("典型的用法如下所示：")]),e._v(" "),a("ul",[a("li",[e._v("在给定的时间点调度 Job 运行")]),e._v(" "),a("li",[e._v("创建周期性运行的 Job，例如：数据库备份、发送邮件。")])]),e._v(" "),a("h3",{attrs:{id:"cronjob-spec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cronjob-spec","aria-hidden":"true"}},[e._v("#")]),e._v(" CronJob Spec")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v(".spec.schedule")]),e._v("："),a("strong",[e._v("调度")]),e._v("，必需字段，指定任务运行周期，格式同 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cron",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cron"),a("OutboundLink")],1)])]),e._v(" "),a("li",[a("p",[a("code",[e._v(".spec.jobTemplate")]),e._v("："),a("strong",[e._v("Job 模板")]),e._v("，必需字段，指定需要运行的任务，格式同 "),a("a",{attrs:{href:"https://jimmysong.io/kubernetes-handbook/concepts/job.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Job"),a("OutboundLink")],1)])]),e._v(" "),a("li",[a("p",[a("code",[e._v(".spec.startingDeadlineSeconds")]),e._v(" ："),a("strong",[e._v("启动 Job 的期限（秒级别）")]),e._v("，该字段是可选的。如果因为任何原因而错过了被调度的时间，那么错过执行时间的 Job 将被认为是失败的。如果没有指定，则没有期限")])]),e._v(" "),a("li",[a("p",[a("code",[e._v(".spec.concurrencyPolicy")]),e._v("："),a("strong",[e._v("并发策略")]),e._v("，该字段也是可选的。它指定了如何处理被 Cron Job 创建的 Job 的并发执行。只允许指定下面策略中的一种：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Allow")]),e._v("（默认）：允许并发运行 Job")]),e._v(" "),a("li",[a("code",[e._v("Forbid")]),e._v("：禁止并发运行，如果前一个还没有完成，则直接跳过下一个")]),e._v(" "),a("li",[a("code",[e._v("Replace")]),e._v("：取消当前正在运行的 Job，用一个新的来替换")])]),e._v(" "),a("p",[e._v("注意，当前策略只能应用于同一个 Cron Job 创建的 Job。如果存在多个 Cron Job，它们创建的 Job 之间总是允许并发运行。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v(".spec.suspend")]),e._v(" ："),a("strong",[e._v("挂起")]),e._v("，该字段也是可选的。如果设置为 "),a("code",[e._v("true")]),e._v("，后续所有执行都会被挂起。它对已经开始执行的 Job 不起作用。默认值为 "),a("code",[e._v("false")]),e._v("。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v(".spec.successfulJobsHistoryLimit")]),e._v(" 和 "),a("code",[e._v(".spec.failedJobsHistoryLimit")]),e._v(" ："),a("strong",[e._v("历史限制")]),e._v("，是可选的字段。它们指定了可以保留多少完成和失败的 Job。")]),e._v(" "),a("p",[e._v("默认情况下，它们分别设置为 "),a("code",[e._v("3")]),e._v(" 和 "),a("code",[e._v("1")]),e._v("。设置限制的值为 "),a("code",[e._v("0")]),e._v("，相关类型的 Job 完成后将不会被保留。")])])]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" batch/v1beta1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" CronJob\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" hello\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("schedule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"*/1 * * * *"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("jobTemplate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" hello\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" busybox\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" /bin/sh\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("c\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" date; echo Hello from the Kubernetes cluster\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("restartPolicy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" OnFailure\n$ kubectl create "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v('f cronjob.yaml\ncronjob "hello" created\n')])])]),a("p",[e._v("当然，也可以用"),a("code",[e._v("kubectl run")]),e._v("来创建一个CronJob：")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl run hello --schedule"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"*/1 * * * *"')]),e._v(" --restart"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("OnFailure --image"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("busybox -- /bin/sh -c "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"date; echo Hello from the Kubernetes cluster"')]),e._v("\n$ kubectl get cronjob\nNAME      SCHEDULE      SUSPEND   ACTIVE    LAST-SCHEDULE\nhello     */1 * * * *   False     0         "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n$ kubectl get "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("jobs")]),e._v("\nNAME               DESIRED   SUCCESSFUL   AGE\nhello-1202039034   1         1            49s\n$ pods"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("kubectl get pods --selector"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("job-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("hello-1202039034 --output"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("jsonpath"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(".items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("metadata.name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n$ kubectl logs "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$pods")]),e._v("\nMon Aug 29 21:34:09 UTC 2016\nHello from the Kubernetes cluster\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 注意，删除 cronjob 的时候不会自动删除 job，这些 job 可以用 kubectl delete job 来删除")]),e._v("\n$ kubectl delete cronjob hello\ncronjob "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello"')]),e._v(" deleted\n")])])]),a("h3",{attrs:{id:"cron-job-限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cron-job-限制","aria-hidden":"true"}},[e._v("#")]),e._v(" Cron Job 限制")]),e._v(" "),a("p",[e._v("Cron Job 在每次调度运行时间内 "),a("em",[e._v("大概")]),e._v(" 会创建一个 Job 对象。我们之所以说 "),a("em",[e._v("大概")]),e._v(" ，是因为在特定的环境下可能会创建两个 Job，或者一个 Job 都没创建。我们尝试少发生这种情况，但却不能完全避免。因此，创建 Job 操作应该是 "),a("em",[e._v("幂等的")]),e._v("。")]),e._v(" "),a("p",[e._v("Job 根据它所创建的 Pod 的并行度，负责重试创建 Pod，并就决定这一组 Pod 的成功或失败。Cron Job 根本就不会去检查 Pod。")]),e._v(" "),a("h3",{attrs:{id:"删除-cron-job"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除-cron-job","aria-hidden":"true"}},[e._v("#")]),e._v(" 删除 Cron Job")]),e._v(" "),a("p",[e._v("一旦不再需要 Cron Job，简单地可以使用 "),a("code",[e._v("kubectl")]),e._v(" 命令删除它：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$ kubectl delete cronjob hello\ncronjob "hello" deleted\n')])])]),a("p",[e._v("这将会终止正在创建的 Job。然而，运行中的 Job 将不会被终止，不会删除 Job 或 它们的 Pod。为了清理那些 Job 和 Pod，需要列出该 Cron Job 创建的全部 Job，然后删除它们：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$ kubectl get jobs\nNAME               DESIRED   SUCCESSFUL   AGE\nhello-1201907962   1         1            11m\nhello-1202039034   1         1            8m\n...\n\n$ kubectl delete jobs hello-1201907962 hello-1202039034 ...\njob "hello-1201907962" deleted\njob "hello-1202039034" deleted\n...\n')])])]),a("p",[e._v("一旦 Job 被删除，由 Job 创建的 Pod 也会被删除。注意，所有由名称为 “hello” 的 Cron Job 创建的 Job 会以前缀字符串 “hello-” 进行命名。如果想要删除当前 Namespace 中的所有 Job，可以通过命令 "),a("code",[e._v("kubectl delete jobs --all")]),e._v(" 立刻删除它们。")]),e._v(" "),a("h2",{attrs:{id:"pod水平自动伸缩-horizontal-pod-autoscaling-hpa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod水平自动伸缩-horizontal-pod-autoscaling-hpa","aria-hidden":"true"}},[e._v("#")]),e._v(" pod水平自动伸缩 (Horizontal Pod Autoscaling, HPA)")]),e._v(" "),a("p",[e._v("应用的资源使用率通常都有高峰和低谷的时候，如何削峰填谷，提高集群的整体资源利用率，让service中的Pod个数自动调整呢？这就有赖于Horizontal Pod Autoscaling了，顾名思义，使Pod水平自动缩放。这个Object（跟Pod、Deployment一样都是API resource）也是最能体现kubernetes之于传统运维价值的地方，不再需要手动扩容了，终于实现自动化了，还可以自定义指标，没准未来还可以通过人工智能自动进化呢！")]),e._v(" "),a("p",[e._v("HPA属于Kubernetes中的"),a("strong",[e._v("autoscaling")]),e._v(" SIG（Special Interest Group），其下有两个feature：")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/kubernetes/features/issues/117",target:"_blank",rel:"noopener noreferrer"}},[e._v("Arbitrary/Custom Metrics in the Horizontal Pod Autoscaler#117"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/kubernetes/features/issues/118",target:"_blank",rel:"noopener noreferrer"}},[e._v("Monitoring Pipeline Metrics HPA API #118"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("Kubernetes自1.2版本引入HPA机制，到1.6版本之前一直是通过kubelet来获取监控指标来判断是否需要扩缩容，1.6版本之后必须通过API server、Heapseter或者kube-aggregator来获取监控指标。")]),e._v(" "),a("h2",{attrs:{id:"准入控制器-admission-controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准入控制器-admission-controller","aria-hidden":"true"}},[e._v("#")]),e._v(" 准入控制器 (Admission Controller)")]),e._v(" "),a("p",[e._v("准入控制器（Admission Controller）位于 API Server 中，在对象被持久化之前，准入控制器拦截对 API Server 的请求，一般用来做身份验证和授权。其中包含两个特殊的控制器：MutatingAdmissionWebhook 和 ValidatingAdmissionWebhook。分别作为配置的变异和验证准入控制 webhook。")]),e._v(" "),a("p",[e._v("变更（Mutating）准入控制：修改请求的对象")]),e._v(" "),a("p",[e._v("验证（Validating）准入控制：验证请求的对象")]),e._v(" "),a("p",[e._v("准入控制器是在 API Server 的启动参数重配置的。一个准入控制器可能属于以上两者中的一种，也可能两者都属于。当请求到达 API Server 的时候首先执行变更准入控制，然后再执行验证准入控制。")]),e._v(" "),a("p",[e._v("我们在部署 Kubernetes 集群的时候都会默认开启一系列准入控制器，如果没有设置这些准入控制器的话可以说你的 Kubernetes 集群就是在裸奔，应该只有集群管理员可以修改集群的准入控制器。")]),e._v(" "),a("h2",{attrs:{id:"service-account"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-account","aria-hidden":"true"}},[e._v("#")]),e._v(" Service Account")]),e._v(" "),a("p",[e._v("Service Account为Pod中的进程提供身份信息。")]),e._v(" "),a("p",[e._v("详见 "),a("a",{attrs:{href:"./Service_Account"}},[e._v("Kubernetes 核心概念 - 身份信息 (Service Account)")])]),e._v(" "),a("h2",{attrs:{id:"网络策略-network-policy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络策略-network-policy","aria-hidden":"true"}},[e._v("#")]),e._v(" 网络策略 (Network Policy)")]),e._v(" "),a("p",[e._v("网络策略说明一组 "),a("code",[e._v("Pod")]),e._v(" 之间是如何被允许互相通信，以及如何与其它网络 Endpoint 进行通信。 "),a("code",[e._v("NetworkPolicy")]),e._v(" 资源使用标签来选择 "),a("code",[e._v("Pod")]),e._v("，并定义了一些规则，这些规则指明允许什么流量进入到选中的 "),a("code",[e._v("Pod")]),e._v(" 上。")]),e._v(" "),a("p",[e._v("网络策略通过网络插件来实现，所以必须使用一种支持 NetworkPolicy 的网络方案（如 calico）—— 非 Controller 创建的资源，是不起作用的。")]),e._v(" "),a("h3",{attrs:{id:"隔离的与未隔离的-pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隔离的与未隔离的-pod","aria-hidden":"true"}},[e._v("#")]),e._v(" 隔离的与未隔离的 Pod")]),e._v(" "),a("p",[e._v("默认 Pod 是未隔离的，它们可以从任何的源接收请求。 具有一个可以选择 Pod 的网络策略后，Pod 就会变成隔离的。 一旦 Namespace 中配置的网络策略能够选择一个特定的 Pod，这个 Pod 将拒绝任何该网络策略不允许的连接。（Namespace 中其它未被网络策略选中的 Pod 将继续接收所有流量）")]),e._v(" "),a("h3",{attrs:{id:"networkpolicy-资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#networkpolicy-资源","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("code",[e._v("NetworkPolicy")]),e._v(" 资源")]),e._v(" "),a("p",[e._v("下面是一个 "),a("code",[e._v("NetworkPolicy")]),e._v(" 的例子：")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" networking.k8s.io/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" NetworkPolicy\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("network"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("policy\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("namespace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" default\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("podSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("matchLabels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("role")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" db\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("policyTypes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" Ingress\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" Egress\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ingress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ipBlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("cidr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 172.17.0.0/16\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("except")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" 172.17.1.0/24\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("namespaceSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("matchLabels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("project")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" myproject\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("podSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("matchLabels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("role")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" frontend\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("protocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" TCP\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("6379")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("egress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("to")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ipBlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("cidr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 10.0.0.0/24\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("protocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" TCP\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("5978")]),e._v("\n")])])]),a("p",[a("em",[e._v("将上面配置 POST 到 API Server 将不起任何作用，除非选择的网络方案支持网络策略。")])]),e._v(" "),a("p",[a("strong",[e._v("必选字段")]),e._v("：像所有其它 Kubernetes 配置一样， "),a("code",[e._v("NetworkPolicy")]),e._v(" 需要 "),a("code",[e._v("apiVersion")]),e._v("、"),a("code",[e._v("kind")]),e._v(" 和 "),a("code",[e._v("metadata")]),e._v("这三个字段，关于如何使用配置文件的基本信息，可以查看 "),a("a",{attrs:{href:"https://kubernetes.io/docs/user-guide/configuring-containers",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),a("OutboundLink")],1),e._v(" 和 "),a("a",{attrs:{href:"https://kubernetes.io/docs/user-guide/working-with-resources",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("p",[a("strong",[e._v("spec")]),e._v("："),a("code",[e._v("NetworkPolicy")]),e._v(" "),a("a",{attrs:{href:"https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",target:"_blank",rel:"noopener noreferrer"}},[e._v("spec"),a("OutboundLink")],1),e._v(" 具有在给定 Namespace 中定义特定网络的全部信息。")]),e._v(" "),a("p",[a("strong",[e._v("podSelector")]),e._v("：每个 "),a("code",[e._v("NetworkPolicy")]),e._v(" 包含一个 "),a("code",[e._v("podSelector")]),e._v("，它可以选择一组应用了网络策略的 Pod。由于 "),a("code",[e._v("NetworkPolicy")]),e._v(" 当前只支持定义 "),a("code",[e._v("ingress")]),e._v(" 规则，这个 "),a("code",[e._v("podSelector")]),e._v(" 实际上为该策略定义了一组 “目标Pod”。示例中的策略选择了标签为 “role=db” 的 Pod。一个空的 "),a("code",[e._v("podSelector")]),e._v(" 选择了该 Namespace 中的所有 Pod。")]),e._v(" "),a("p",[a("strong",[e._v("ingress")]),e._v("：每个"),a("code",[e._v("NetworkPolicy")]),e._v(" 包含了一个白名单 "),a("code",[e._v("ingress")]),e._v(" 规则列表。每个规则只允许能够匹配上 "),a("code",[e._v("from")]),e._v("和 "),a("code",[e._v("ports")]),e._v("配置段的流量。示例策略包含了单个规则，它从这两个源中匹配在单个端口上的流量，第一个是通过"),a("code",[e._v("namespaceSelector")]),e._v(" 指定的，第二个是通过 "),a("code",[e._v("podSelector")]),e._v(" 指定的。")]),e._v(" "),a("p",[a("strong",[e._v("egress")]),e._v("：每个"),a("code",[e._v("NetworkPolicy")]),e._v(" 包含了一个白名单 "),a("code",[e._v("ingress")]),e._v(" 规则列表。每个规则只允许能够匹配上 "),a("code",[e._v("to")]),e._v(" 和 "),a("code",[e._v("ports")]),e._v("配置段的流量。示例策略包含了单个规则，它匹配目的地 "),a("code",[e._v("10.0.0.0/24")]),e._v(" 单个端口的流量。")]),e._v(" "),a("p",[e._v("因此，上面示例的 NetworkPolicy：")]),e._v(" "),a("ol",[a("li",[e._v("在 “default” Namespace中 隔离了标签 “role=db” 的 Pod（如果他们还没有被隔离）")]),e._v(" "),a("li",[e._v("在 “default” Namespace中，允许任何具有 “role=frontend” 的 Pod，IP 范围在 172.17.0.0–172.17.0.255 和 172.17.2.0–172.17.255.255（整个 172.17.0.0/16 段， 172.17.1.0/24 除外）连接到标签为 “role=db” 的 Pod 的 TCP 端口 6379")]),e._v(" "),a("li",[e._v("允许在 Namespace 中任何具有标签 “project=myproject” ，IP范围在10.0.0.0/24段的 Pod，连接到 “default” Namespace 中标签为 “role=db” 的 Pod 的 TCP 端口 5978")])]),e._v(" "),a("h3",{attrs:{id:"默认策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认策略","aria-hidden":"true"}},[e._v("#")]),e._v(" 默认策略")]),e._v(" "),a("p",[e._v("通过创建一个可以选择所有 Pod 但不允许任何流量的 NetworkPolicy，你可以为一个 Namespace 创建一个 “默认的” 隔离策略，如下所示：")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" networking.k8s.io/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" NetworkPolicy\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("deny\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("podSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n")])])]),a("p",[e._v("这确保了即使是没有被任何 NetworkPolicy 选中的 Pod，将仍然是被隔离的。")]),e._v(" "),a("p",[e._v("可选地，在 Namespace 中，如果你想允许所有的流量进入到所有的 Pod（即使已经添加了某些策略，使一些 Pod 被处理为 “隔离的”），你可以通过创建一个策略来显式地指定允许所有流量：")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" networking.k8s.io/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" NetworkPolicy\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" allow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("all\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("podSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ingress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("h2",{attrs:{id:"数据存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据存储","aria-hidden":"true"}},[e._v("#")]),e._v(" 数据存储")]),e._v(" "),a("p",[e._v("存储卷 (Volume)、持久存储卷 (Persistent Volume，PV)、持久存储卷声明 (Persistent Volume Claim，PVC)、密钥对象 (Secret)")]),e._v(" "),a("p",[e._v("详见 "),a("a",{attrs:{href:"./Volume"}},[e._v("Kubernetes 核心概念 - 数据存储")])])],1)},[],!1,null,null,null);t.default=r.exports}}]);