(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{941:function(_,v,t){"use strict";t.r(v);var n=t(1),i=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"面向对象"}},[_._v("面向对象")]),_._v(" "),t("p",[_._v("在面向对象的程序设计（英语：Object-oriented programming，缩写：OOP）中，对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象。")]),_._v(" "),t("h2",{attrs:{id:"对象的主要三个特性："}},[_._v("对象的主要三个特性：")]),_._v(" "),t("ul",[t("li",[_._v("对象的行为：可以对 对象施加那些操作，开灯，关灯就是行为。")]),_._v(" "),t("li",[_._v("对象的形态：当施加那些方法是对象如何响应，颜色，尺寸，外型。")]),_._v(" "),t("li",[_._v("对象的表示：对象的表示就相当于身份证，具体区分在相同的行为与状态下有什么不同。")])]),_._v(" "),t("h2",{attrs:{id:"面向对象内容"}},[_._v("面向对象内容")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("类")]),_._v(" − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。")]),_._v(" "),t("li",[t("strong",[_._v("对象")]),_._v(" − 是类的实例。")]),_._v(" "),t("li",[t("strong",[_._v("成员变量")]),_._v(" − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性。")]),_._v(" "),t("li",[t("strong",[_._v("成员函数")]),_._v(" − 定义在类的内部，可用于访问对象的数据。")]),_._v(" "),t("li",[t("strong",[_._v("父类")]),_._v(" − 一个类被其他类继承，可将该类称为父类，或基类，或超类。")]),_._v(" "),t("li",[t("strong",[_._v("子类")]),_._v(" − 一个类继承其他类称为子类，也可称为派生类。")]),_._v(" "),t("li",[t("strong",[_._v("抽象")]),_._v(" − 抽象是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关。")]),_._v(" "),t("li",[t("strong",[_._v("封装")]),_._v(" − 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。")]),_._v(" "),t("li",[t("strong",[_._v("继承")]),_._v(" − 继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。")]),_._v(" "),t("li",[t("strong",[_._v("多态")]),_._v(" − 多态性是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。")]),_._v(" "),t("li",[t("strong",[_._v("重载")]),_._v(" − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。")]),_._v(" "),t("li",[t("strong",[_._v("构造函数")]),_._v(" − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。")]),_._v(" "),t("li",[t("strong",[_._v("析构函数")]),_._v(' − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做"清理善后" 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。')])])])}],!1,null,null,null);v.default=i.exports}}]);