(window.webpackJsonp=window.webpackJsonp||[]).push([[539],{925:function(e,t,a){"use strict";a.r(t);var s=a(1),n=Object(s.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"使用-kubeadm-搭建-kubernetes-集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-kubeadm-搭建-kubernetes-集群","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用 Kubeadm 搭建 Kubernetes 集群")]),e._v(" "),a("p",[e._v("准备工作:")]),e._v(" "),a("ul",[a("li",[e._v("BIOS中开启VT-X (如果是虚拟机注意设置)")]),e._v(" "),a("li",[e._v("科学上网 (由于GFW)")])]),e._v(" "),a("p",[e._v("配置三台CentOS虚拟机, 分别为:")]),e._v(" "),a("ul",[a("li",[e._v("192.168.126.129 k8s-master")]),e._v(" "),a("li",[e._v("192.168.126.130 k8s-node1")]),e._v(" "),a("li",[e._v("192.168.126.131 k8s-node2")])]),e._v(" "),a("h2",{attrs:{id:"kubeadm-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubeadm-简介","aria-hidden":"true"}},[e._v("#")]),e._v(" Kubeadm 简介")]),e._v(" "),a("p",[e._v("Kubeadm 是一个工具，它提供了 kubeadm init 以及 kubeadm join 这两个命令作为快速创建 kubernetes 集群的最佳实践。")]),e._v(" "),a("p",[e._v("kubeadm 通过执行必要的操作来启动和运行一个最小可用的集群。它被故意设计为只关心启动集群，而不是之前的节点准备工作。同样的，诸如安装各种各样值得拥有的插件，例如 Kubernetes Dashboard、监控解决方案以及特定云提供商的插件，这些都不在它负责的范围。")]),e._v(" "),a("p",[e._v("相反，我们期望由一个基于 kubeadm 从更高层设计的更加合适的工具来做这些事情；并且，理想情况下，使用 kubeadm 作为所有部署的基础将会使得创建一个符合期望的集群变得容易。")]),e._v(" "),a("h3",{attrs:{id:"与-minikube-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与-minikube-的区别","aria-hidden":"true"}},[e._v("#")]),e._v(" 与 minikube 的区别")]),e._v(" "),a("p",[e._v("minikube基本上你可以认为是一个实验室工具，只能单机部署，里面整合了 k8s 最主要的组件，无法真正搭建集群，且由于程序做死无法安装各种扩展插件（比如网络插件、dns插件、ingress插件等等），主要作用是给你了解 k8s 用的。而 kudeadm 搭建出来是一个真正的 k8s 集群，可用于生产环境（HA需要自己做），和二进制搭建出来的集群几乎没有区别。")]),e._v(" "),a("h2",{attrs:{id:"设置源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置源","aria-hidden":"true"}},[e._v("#")]),e._v(" 设置源")]),e._v(" "),a("p",[e._v("在开始之前, 我们先对系统进行一整套的换源操作, 以保证后续操作能正常进行")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mv")]),e._v(" /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 备份")]),e._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -o /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v("EOF "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/yum.repos.d/kubernetes.repo\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("kubernetes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nname"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Kubernetes\nbaseurl"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("1\ngpgcheck"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("1\nrepo_gpgcheck"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("1\ngpgkey"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n")])])]),a("p",[e._v("执行下列命令刷新yum源缓存")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ yum clean all\n$ yum makecache\n$ yum repolist\n")])])]),a("h2",{attrs:{id:"安装-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装 docker")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ yum "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y docker-ce\n")])])]),a("p",[a("strong",[e._v("启动docker")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ systemctl start docker\n$ systemctl "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("enable")]),e._v(" docker\n$ docker info\n")])])]),a("h2",{attrs:{id:"安装-kubeadm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-kubeadm","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装 kubeadm")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ yum "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y kubeadm\n")])])]),a("p",[e._v("系统会帮我们自动安装最新版的kubeadm，一共会安装 kubelet、kubeadm、kubectl、kubernetes-cni 这四个程序。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("kubeadm")]),e._v(": k8s集群的一键部署工具，通过把k8s的各类核心组件和插件以pod的方式部署来简化安装过程")]),e._v(" "),a("li",[a("strong",[e._v("kubelet")]),e._v(": 运行在每个节点上的node agent，k8s集群通过kubelet真正的去操作每个节点上的容器，由于需要直接操作宿主机的各类资源，所以没有放在pod里面，还是通过服务的形式装在系统里面")]),e._v(" "),a("li",[a("strong",[e._v("kubectl")]),e._v(": kubernetes的命令行工具，通过连接api-server完成对于k8s的各类操作")]),e._v(" "),a("li",[a("strong",[e._v("kubernetes-cni")]),e._v(": k8s的虚拟网络设备，通过在宿主机上虚拟一个cni0网桥，来完成pod之间的网络通讯，作用和docker0类似。")])]),e._v(" "),a("h2",{attrs:{id:"初始化-kubeadm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化-kubeadm","aria-hidden":"true"}},[e._v("#")]),e._v(" 初始化 kubeadm")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ kubeadm init --pod-network-cidr"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("10.244.0.0/16\n")])])]),a("p",[e._v("开始master节点的初始化工作，注意这边的 "),a("code",[e._v("--pod-network-cidr=10.244.0.0/16")]),e._v("，是k8s的网络插件所需要用到的配置信息，用来给node分配子网段，我这边用到的网络插件是flannel，就是这么配，其他的插件也有相应的配法，官网上都有详细的说明，具体参考这个网页。")]),e._v(" "),a("p",[e._v("初始化的时候kubeadm会做一系列的校验，以检测你的服务器是否符合kubernetes的安装条件，检测结果分为[WARNING]和[ERROR]两种，类似如下的信息（一般第一次执行都会失败。。）")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("CGROUPS_MEMORY: enabled\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("WARNING Hostname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("hostname")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"k8s-master"')]),e._v(" could not be reached\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("WARNING Hostname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("hostname")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"k8s-master"')]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(":")]),e._v(" lookup k8s-master on 192.168.126.2:53: no such host\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("WARNING Service-Kubelet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": kubelet "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" is not enabled, please run "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'systemctl enable kubelet.service'")]),e._v("\nerror execution phase preflight: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("preflight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Some fatal errors occurred:\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ERROR CRI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": container runtime is not running: output: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n, error: "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("exit")]),e._v(" status 1\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ERROR Service-Docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": docker "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" is not active, please run "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'systemctl start docker.service'")]),e._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": /proc/sys/net/bridge/bridge-nf-call-iptables does not exist\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ERROR FileContent--proc-sys-net-ipv4-ip_forward"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": /proc/sys/net/ipv4/ip_forward contents are not "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("set")]),e._v(" to 1\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ERROR Swap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": running with swap on is not supported. Please disable swap\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ERROR SystemVerification"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": failed to get docker info: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("preflight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" If you know what you are doing, you can "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" a check non-fatal with "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("--ignore-preflight-errors"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("."),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n")])])]),a("ul",[a("li",[a("code",[e._v("[WARNING]")]),e._v(" 的有比如docker服务没设置成自动启动啦，docker版本不符合兼容性要求啦，hostname设置不规范之类，这些一般问题不大，不影响安装，当然尽量你按照它提示的要求能改掉是最好。")]),e._v(" "),a("li",[a("code",[e._v("[ERROR]")]),e._v(" 的话就要重视，虽然可以通过 "),a("code",[e._v("--ignore-preflight-errors")]),e._v(" 忽略错误强制安装，但为了不出各种奇怪的毛病，所以强烈建议error的问题一定要解决了再继续执行下去。")])]),e._v(" "),a("h2",{attrs:{id:"常见错误修复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见错误修复","aria-hidden":"true"}},[e._v("#")]),e._v(" 常见错误修复")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("[ERROR Swap]: running with swap on is not supported. Please disable swap")]),e._v(" "),a("ul",[a("li",[e._v("修复: 关闭swap "),a("code",[e._v("swapoff -a")])])])]),e._v(" "),a("li",[a("code",[e._v("[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]")]),e._v(" "),a("ul",[a("li",[e._v("修复: "),a("code",[e._v("echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables")])])])]),e._v(" "),a("li",[a("code",[e._v("[ERROR FileContent--proc-sys-net-ipv4-ip_forward]")]),e._v(" "),a("ul",[a("li",[e._v("修复: "),a("code",[e._v("echo 1 > /proc/sys/net/ipv4/ip_forward")])])])]),e._v(" "),a("li",[a("code",[e._v("[ERROR CRI]")]),e._v(" and "),a("code",[e._v("[ERROR Service-Docker]")]),e._v(" and "),a("code",[e._v("[ERROR SystemVerification]")]),e._v(" "),a("ul",[a("li",[e._v("修复: 启动Docker "),a("code",[e._v("systemctl start docker")])])])]),e._v(" "),a("li",[a("code",[e._v("[ERROR ImagePull]")]),e._v(" "),a("ul",[a("li",[e._v("修复: 换源拉取后重新取tag")])])]),e._v(" "),a("li",[a("code",[e._v("[WARNING Firewalld]")]),e._v(" "),a("ul",[a("li",[e._v("修复: 直接关闭防火墙 "),a("code",[e._v("systemctl stop firewalld")])])])])]),e._v(" "),a("p",[e._v("一顿修改后，预检全部通过，kubeadm就开始安装了，经过一阵等待，不出意外的话安装会失败-_-，原因自然是众所周知的原因，gcr.io无法访问（谷歌自己的容器镜像仓库），但是错误信息很有价值，我们来看一下")]),e._v(" "),a("h2",{attrs:{id:"换源拉取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#换源拉取","aria-hidden":"true"}},[e._v("#")]),e._v(" 换源拉取")]),e._v(" "),a("p",[e._v("报 "),a("code",[e._v("[ERROR ImagePull]")]),e._v(" 时使用:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.13.4\n$ docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.13.4\n$ docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.13.4\n$ docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.13.4\n$ docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1\n$ docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.2.24\n$ docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.2.6\n\n$ docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.13.4 k8s.gcr.io/kube-apiserver:v1.13.4\n$ docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.13.4 k8s.gcr.io/kube-controller-manager:v1.13.4\n$ docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.13.4 k8s.gcr.io/kube-scheduler:v1.13.4\n$ docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.13.4 k8s.gcr.io/kube-proxy:v1.13.4\n$ docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 k8s.gcr.io/pause:3.1\n$ docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.2.24 k8s.gcr.io/etcd:3.2.24\n$ docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.2.6 k8s.gcr.io/coredns:1.2.6\n")])])]),a("h2",{attrs:{id:"初始化成功"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化成功","aria-hidden":"true"}},[e._v("#")]),e._v(" 初始化成功")]),e._v(" "),a("p",[e._v("初始化成功后, 会提示")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Your Kubernetes master has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun "kubectl apply -f [podnetwork].yaml" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of machines by running the following on each node\nas root:\n\n  kubeadm join 192.168.126.129:6443 --token xf8wmk.cgjlbngcewadymbe --discovery-token-ca-cert-hash sha256:f5eb45f1bb50c90e078884c499087327b92415ff100d9c5676802654e261cd89\n')])])]),a("p",[e._v("可以看到终于初始化成功了，kudeadm帮你做了大量的工作，包括kubelet配置、各类证书配置、kubeconfig配置、插件安装等等（这些东西自己搞不知道要搞多久，反正估计用过kubeadm没人会再愿意手工安装了）。注意最后一行，kubeadm提示你，其他节点需要加入集群的话，只需要执行这条命令就行了，里面包含了加入集群所需要的token。同时kubeadm还提醒你，要完成全部安装，还需要安装一个网络插件 "),a("code",[e._v("kubectl apply -f [podnetwork].yaml")]),e._v("。")]),e._v(" "),a("p",[e._v("同时也提示你，需要执行")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$HOME")]),e._v("/.kube\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" -i /etc/kubernetes/admin.conf "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$HOME")]),e._v("/.kube/config\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("chown")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -u"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -g"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$HOME")]),e._v("/.kube/config\n")])])]),a("p",[e._v("把相关配置信息拷贝入.kube的目录，这个是用来配置kubectl和api-server之间的认证，其他node节点的话需要将此配置信息拷贝入node节点的对应目录。此时我们执行一下:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ kubectl get node\nNAME         STATUS     ROLES    AGE    VERSION\nk8s-master   NotReady   master   9m8s   v1.13.4\n")])])]),a("p",[e._v("显示目前节点是notready状态。")]),e._v(" "),a("h2",{attrs:{id:"集群信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群信息","aria-hidden":"true"}},[e._v("#")]),e._v(" 集群信息")]),e._v(" "),a("p",[e._v("查看集群信息")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ kubectl cluster-info\nKubernetes master is running at https://172.17.0.21:8443\nTo further debug and diagnose cluster problems, use "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'kubectl cluster-info dump'")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(".")]),e._v("\n")])])]),a("p",[e._v("查看当前可用的Node, 使用Minikube创建的cluster只有一个Node节点")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ kubectl get nodes\nNAME       STATUS   ROLES    AGE     VERSION\nminikube   Ready    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("   7m24s   v1.13.3\n")])])]),a("p",[e._v("至此，我们已经用Minikube创建了一个Kubernetes Cluster，下面我们在这个集群上面部署一个应用。")]),e._v(" "),a("h2",{attrs:{id:"部署应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署应用","aria-hidden":"true"}},[e._v("#")]),e._v(" 部署应用")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ kubectl get pods\nNAME                                   READY   STATUS    RESTARTS   AGE\nkubernetes-bootcamp-6bf84cb898-nhf4z   1/1     Running   0          46s\n$ kubectl get services\nNAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("   AGE\nkubernetes   ClusterIP   10.96.0.1    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("        443/TCP   63s\n$ kubectl expose deployment/kubernetes-bootcamp --type"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"NodePort"')]),e._v(" --port 8080\nservice/kubernetes-bootcamp exposed\n$ kubectl get services\nNAME                  TYPE        CLUSTER-IP     EXTERNAL-IP   PORT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("          AGE\nkubernetes            ClusterIP   10.96.0.1      "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("        443/TCP          78s\nkubernetes-bootcamp   NodePort    10.98.21.250   "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("        8080:31539/TCP   10s\n$ kubectl describe services/kubernetes-bootcamp\nName:                     kubernetes-bootcamp\nNamespace:                default\nLabels:                   run"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("kubernetes-bootcamp\nAnnotations:              "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nSelector:                 run"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("kubernetes-bootcamp\nType:                     NodePort\nIP:                       10.98.21.250\nPort:                     "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("unset"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("  8080/TCP\nTargetPort:               8080/TCP\nNodePort:                 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("unset"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("  31539/TCP\nEndpoints:                172.18.0.3:8080\nSession Affinity:         None\nExternal Traffic Policy:  Cluster\nEvents:                   "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("export")]),e._v(" NODE_PORT"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("kubectl get services/kubernetes-bootcamp -o go-template"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("index .spec.ports 0"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(".nodePort"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n$ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("echo")]),e._v(" NODE_PORT"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$NODE_PORT")]),e._v("\nNODE_PORT"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("31539\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("minikube ip"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$NODE_PORT")]),e._v("\nHello Kubernetes bootcamp"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" Running on: kubernetes-bootcamp-6bf84cb898-nhf4z "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" v"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("1\n")])])]),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://kubernetes.io/zh/docs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubeadm 概述"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/70efa1b853f5",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用kubeadm快速搭建单机kubernetes 1.13集群"),a("OutboundLink")],1)])])])},[],!1,null,null,null);t.default=n.exports}}]);