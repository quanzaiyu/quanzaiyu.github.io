(window.webpackJsonp=window.webpackJsonp||[]).push([[437],{1160:function(v,_,p){"use strict";p.r(_);var e=[function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"网站-pwa-化开发记录"}},[v._v("网站 PWA 化开发记录")]),v._v(" "),e("p",[v._v("最近，研究了 PWA，将本站进行了 PWA 化，感觉不错，在此分享一下心得。")]),v._v(" "),e("p",[v._v("添加到桌面图标：")]),v._v(" "),e("figure",[e("img",{attrs:{src:p(700),alt:""}})]),v._v(" "),e("p",[v._v("启动页面：")]),v._v(" "),e("figure",[e("img",{attrs:{src:p(701),alt:""}})]),v._v(" "),e("p",[v._v("全屏显示：")]),v._v(" "),e("figure",[e("img",{attrs:{src:p(702),alt:""}})]),v._v(" "),e("h2",{attrs:{id:"前言"}},[v._v("前言")]),v._v(" "),e("p",[v._v("近年来，Web 应用在整个软件与互联网行业承载的责任越来越重，软件复杂度和维护成本越来越高，Web 技术，尤其是 Web 客户端技术，迎来了爆发式的发展。")]),v._v(" "),e("p",[v._v("包括但不限于基于 Node.js 的前端工程化方案；诸如 Webpack、Rollup 这样的打包工具；Babel、PostCSS 这样的转译工具；TypeScript、Elm 这样转译至 JavaScript 的编程语言；React、Angular、Vue 这样面向现代 web 应用需求的前端框架及其生态，也涌现出了像同构 JavaScript与通用 JavaScript 应用这样将服务器端渲染（Server-side Rendering）与单页面应用模型（Single-page App）结合的 web 应用架构方式，可以说是百花齐放。")]),v._v(" "),e("p",[v._v("但是，Web 应用在移动时代并没有达到其在桌面设备上流行的程度。究其原因，尽管上述的各种方案已经充分利用了现有的 JavaScript 计算能力、CSS 布局能力、HTTP 缓存与浏览器 API 对当代基于 Ajax 与响应式设计的 web 应用模型的性能与体验带来了工程角度的巨大突破，我们仍然无法在不借助原生程序辅助浏览器的前提下突破 web 平台本身对 web 应用固有的桎梏：客户端软件（即网页）需要下载所带来的网络延迟；与 Web 应用依赖浏览器作为入口所带来的体验问题。")]),v._v(" "),e("p",[v._v("在桌面设备上，由于网络条件稳定，屏幕尺寸充分，交互方式趋向于多任务，这两点造成的负面影响对比 web 应用免于安装、随叫随到、无需更新等优点，瑕不掩瑜。但是在移动时代，脆弱的网络连接与全新的人机交互方式使得这两个问题被无限放大，严重制约了 web 应用在移动平台的发展。在用户眼里，原生应用不会出现「白屏」，清一色都摆在主屏幕上；而 web 应用则是浏览器这个应用中的应用，使用起来并不方便，而且加载也比原生应用要慢。")]),v._v(" "),e("h2",{attrs:{id:"什么是-pwa"}},[v._v("什么是 PWA")]),v._v(" "),e("p",[v._v("Progressive Web App, 中文名叫做"),e("strong",[v._v("渐进式网页应用")]),v._v("，简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。")]),v._v(" "),e("p",[v._v("PWA 以及构成 PWA 的一系列关键技术的出现，终于让我们看到了彻底解决这两个平台级别问题的曙光：能够显著提高应用加载速度、甚至让 web 应用可以在离线环境使用的 Service Worker 与 Cache Storage；用于描述 web 应用元数据（metadata）、让 web 应用能够像原生应用一样被添加到主屏、全屏执行的 Web App Manifest；以及进一步提高 web 应用与操作系统集成能力，让 web 应用能在未被激活时发起推送通知的 Push API 与 Notification API 等等。")]),v._v(" "),e("p",[v._v("PWA 可以将 Web 和 App 各自的优势融合在一起：渐进式、可响应、可离线、实现类似 App 的交互、即时更新、安全、可以被搜索引擎检索、可推送、可安装、可链接。")]),v._v(" "),e("h2",{attrs:{id:"几种技术的优缺点"}},[v._v("几种技术的优缺点")]),v._v(" "),e("h3",{attrs:{id:"native-app"}},[v._v("Native APP")]),v._v(" "),e("p",[v._v("Native APP 由于天生就基于操作系统（Android、iOS），因此具备很多优点：")]),v._v(" "),e("ul",[e("li",[v._v("相比于其它模式，提供最佳的用户体验，最优质的用户界面，最华丽的交互")]),v._v(" "),e("li",[v._v("针对不同平台提供不同体验")]),v._v(" "),e("li",[v._v("可节省带宽成本，打开速度更快")]),v._v(" "),e("li",[v._v("功能最为强大,特别是在与系统交互中,几乎所有功能都能实现")])]),v._v(" "),e("p",[v._v("Native APP 用起来很流畅，但是也有其天然的基因缺陷：")]),v._v(" "),e("ul",[e("li",[v._v("门槛高，原生开发人才稀缺，至少比前端和后端少，开发环境昂贵")]),v._v(" "),e("li",[v._v("无法跨平台，开发的成本比较大，各个系统独立开发")]),v._v(" "),e("li",[v._v("发布成本高，版本更新需要将新版本上传到不同的应用商店，导致更新缓慢，软件上线需要审核")]),v._v(" "),e("li",[v._v("维持多个版本、多个系统的成本比较高，而且必须做兼容")]),v._v(" "),e("li",[v._v("用户 80% 的时间被 Top3 的超级 App 占据，对于站点来说，应用分发的性价比也越来越不划算")]),v._v(" "),e("li",[v._v("要使用它，首先还需要下载几十兆上百着兆的安装包，即使是偶尔需要使用一下下")])]),v._v(" "),e("h3",{attrs:{id:"hybrid-app"}},[v._v("Hybrid APP")]),v._v(" "),e("p",[v._v("混合模式移动应用，介于Web App、Native App这两者之间的App开发技术，兼具“Native App良好交互体验的优势”和“Web App跨平台开发的优势”（百度百科解释）")]),v._v(" "),e("p",[v._v("主要的原理是，由Native通过JSBridge等方法提供统一的API，然后用Html+Css实现界面，JS来写逻辑，调用API，最终的页面在Webview中显示，这种模式下，Android、iOS的API一般有一致性，Hybrid App所以有跨平台效果。")]),v._v(" "),e("ul",[e("li",[v._v("优点：开发和发布都比较方便，效率介于Native App、Web App之间")]),v._v(" "),e("li",[v._v("缺点：学习范围较广，需要原生配合")]),v._v(" "),e("li",[v._v("应用技术：PhoneGap，AppCan，Wex5，APICloud，H5+（HBuilder）等")])]),v._v(" "),e("h3",{attrs:{id:"web-app"}},[v._v("Web App")]),v._v(" "),e("p",[v._v("web网页开发成本低，网站更新时上传最新的资源到服务器即可，用手机带的浏览器打开就可以使用，具有很多优点：")]),v._v(" "),e("ul",[e("li",[v._v("可以跨平台，调试方便")]),v._v(" "),e("li",[v._v("无需安装，不会占用手机内存，而且更新速度最快")]),v._v(" "),e("li",[v._v("不存在多版本问题，维护成本低")]),v._v(" "),e("li",[v._v("临时入口，可以随意嵌入")])]),v._v(" "),e("p",[v._v("但是除了体验上比 Native App 还是差一些，还有一些明显的缺点：")]),v._v(" "),e("ul",[e("li",[v._v("手机桌面入口不够便捷，想要进入一个页面必须要记住它的 url 或者加入书签")]),v._v(" "),e("li",[v._v("依赖于网络，没网络就没响应，不具备离线能力，第一次访问页面速度慢，耗费流量")]),v._v(" "),e("li",[v._v("不像APP一样能进行消息推送")]),v._v(" "),e("li",[v._v("受限于手机和浏览器性能，用户体验相较于其他模式最差")]),v._v(" "),e("li",[v._v("功能受限，大量移动端功能无法实现")])]),v._v(" "),e("p",[v._v("Web App 与 WAP 的区别：")]),v._v(" "),e("p",[v._v("说到 Web App 不少人会联想到 WAP，或者有人认为，WAP 就是 Web App，其实不然。")]),v._v(" "),e("p",[v._v("Web App 与 WAP 最直接的区别就是功能层面。WAP更侧重使用网页技术在移动端做展示，包括文字、媒体文件等。而Web App更侧重“功能”，是使用网页技术实现的App。总的来说，Web App就是运行于网络和标准浏览器上，基于网页技术开发实现特定功能的应用。")]),v._v(" "),e("h3",{attrs:{id:"pwa"}},[v._v("PWA")]),v._v(" "),e("p",[v._v("一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用。随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能。")]),v._v(" "),e("p",[v._v("解决了以下一些问题：")]),v._v(" "),e("ul",[e("li",[v._v("可以添加至主屏幕，点击主屏幕图标可以实现启动动画以及隐藏地址栏")]),v._v(" "),e("li",[v._v("实现离线缓存功能，即使用户手机没有网络，依然可以使用一些离线功能")]),v._v(" "),e("li",[v._v("实现了消息推送")])])])}],i=p(1),t=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},e,!1,null,null,null);_.default=t.exports},700:function(v,_,p){v.exports=p.p+"assets/img/131.48c6e2b4.jpeg"},701:function(v,_,p){v.exports=p.p+"assets/img/132.fb89f21a.png"},702:function(v,_,p){v.exports=p.p+"assets/img/133.2f6c2fb6.jpeg"}}]);