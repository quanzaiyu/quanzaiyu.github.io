(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{516:function(r,e,t){"use strict";t.r(e);var a=t(1),o=Object(a.a)({},function(){var r=this,e=r.$createElement,t=r._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"docker-核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-核心概念","aria-hidden":"true"}},[r._v("#")]),r._v(" Docker 核心概念")]),r._v(" "),t("h2",{attrs:{id:"docker-内部组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-内部组件","aria-hidden":"true"}},[r._v("#")]),r._v(" Docker 内部组件")]),r._v(" "),t("ul",[t("li",[r._v("Docker 镜像 - Docker Image")]),r._v(" "),t("li",[r._v("Docker 容器 - Docker Containers")]),r._v(" "),t("li",[r._v("Dokcer 仓库 - Docker Registeries")])]),r._v(" "),t("h3",{attrs:{id:"docker-镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像","aria-hidden":"true"}},[r._v("#")]),r._v(" Docker 镜像")]),r._v(" "),t("p",[r._v("我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu 16.04 最小系统的 root 文件系统。")]),r._v(" "),t("p",[r._v("Docker 镜像是Docker容器运行时的只读模板，每一个镜像有一些列的层（layers）组成。Docker使用UnionFS来将这些层联合到单独的镜像中。UnionFS允许独立于文件系统中的文件和文件夹（称之为分支）被透明覆盖，形成一个单独连贯的文件系统。正因为有了这些层的存在，Docker是如此的轻量。")]),r._v(" "),t("imgLink",{attrs:{src:"date/20181013/001.png"}}),r._v(" "),t("p",[r._v("当你改变了一个Docker镜像，比如升级到某个程序到新的版本，一个新的层就会被创建。因此，不用替换整个原先的镜像或者重新建立（在使用虚拟机的时候你可能会这么做），只是一个新的层被添加或者升级了。现在你不用重新发布整个镜像，只需要升级，层使得分发Docker镜像变得简单和快速。")]),r._v(" "),t("p",[r._v("在 Docker Store 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 nginx、redis、mongo、mysql、httpd、php、tomcat 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 node、openjdk、python、ruby、golang 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。")]),r._v(" "),t("p",[r._v("如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 ubuntu、debian、centos、fedora、alpine 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。")]),r._v(" "),t("p",[r._v("除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。")]),r._v(" "),t("h3",{attrs:{id:"docker-容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-容器","aria-hidden":"true"}},[r._v("#")]),r._v(" Docker 容器")]),r._v(" "),t("p",[r._v("Docker容器和文件夹很类似，一个Docker容器包含了所有的某个应用运行所需要的环境。每一个Docker容器都是从Docker镜像创建的。Docker容器可以运行、开始、停止、移动和删除。每一个Docker容器都是单独和安全的应用平台，Docker容器是Docker的运行部分。")]),r._v(" "),t("p",[r._v("镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")]),r._v(" "),t("p",[r._v("容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。")]),r._v(" "),t("p",[r._v("每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。")]),r._v(" "),t("p",[r._v("容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。")]),r._v(" "),t("imgLink",{attrs:{src:"date/20181013/002.png"}}),r._v(" "),t("p",[r._v("要点：容器 = 镜像 + 读写层。并且容器的定义并没有提及是否要运行容器。")]),r._v(" "),t("p",[t("strong",[r._v("运行态容器")])]),r._v(" "),t("p",[r._v("一个运行态容器（running container）被定义为一个可读写的统一文件系统加上隔离的进程空间和包含其中的进程。")]),r._v(" "),t("imgLink",{attrs:{src:"date/20181013/003.png"}}),r._v(" "),t("h3",{attrs:{id:"docker-仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-仓库","aria-hidden":"true"}},[r._v("#")]),r._v(" Docker 仓库")]),r._v(" "),t("p",[r._v("镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker 仓库就是这样的服务。")]),r._v(" "),t("p",[r._v("Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker仓库也有公有和私有的概念。共有的Docker仓库名字是Docker Hub。Docker Hub提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker仓库是Docker的分发部分。")]),r._v(" "),t("p",[r._v("一个 Docker 仓库中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。")]),r._v(" "),t("h2",{attrs:{id:"docker-依赖的相关技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-依赖的相关技术","aria-hidden":"true"}},[r._v("#")]),r._v(" Docker 依赖的相关技术")]),r._v(" "),t("h3",{attrs:{id:"namespaces-命名空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#namespaces-命名空间","aria-hidden":"true"}},[r._v("#")]),r._v(" Namespaces 命名空间")]),r._v(" "),t("ul",[t("li",[r._v("PID（Process ID） 进程隔离")]),r._v(" "),t("li",[r._v("NET（Network） 管理网络接口")]),r._v(" "),t("li",[r._v("IPC（InterProcess Communication） 管理跨进程通信的访问")]),r._v(" "),t("li",[r._v("MNT（Mount） 管理挂载点")]),r._v(" "),t("li",[r._v("UTS（Unix Timesharing System） 隔离内核和版本标识")])]),r._v(" "),t("h3",{attrs:{id:"control-groups-控制组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#control-groups-控制组","aria-hidden":"true"}},[r._v("#")]),r._v(" Control Groups 控制组")]),r._v(" "),t("p",[r._v("Control Groups 用来分配资源，此技术来源于 Google，在2007年整合进 Linux Kernel 2.6.24 。")]),r._v(" "),t("p",[r._v("Control Groups 有以下作用：")]),r._v(" "),t("ul",[t("li",[r._v("资源限制")]),r._v(" "),t("li",[r._v("优先级设定")]),r._v(" "),t("li",[r._v("资源计量")]),r._v(" "),t("li",[r._v("资源控制")])]),r._v(" "),t("h2",{attrs:{id:"docker-的-c-s-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-的-c-s-模式","aria-hidden":"true"}},[r._v("#")]),r._v(" Docker 的 C/S 模式")]),r._v(" "),t("imgLink",{attrs:{src:"date/20181014/002.png"}}),r._v(" "),t("h3",{attrs:{id:"remote-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remote-api","aria-hidden":"true"}},[r._v("#")]),r._v(" Remote API")]),r._v(" "),t("h3",{attrs:{id:"连接方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接方式","aria-hidden":"true"}},[r._v("#")]),r._v(" 连接方式")]),r._v(" "),t("ul",[t("li",[r._v("unix://var/run/docker.sock")]),r._v(" "),t("li",[r._v("tcp://host:port")]),r._v(" "),t("li",[r._v("fd://socketfd")])]),r._v(" "),t("h2",{attrs:{id:"docker-信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-信息","aria-hidden":"true"}},[r._v("#")]),r._v(" Docker 信息")]),r._v(" "),t("p",[r._v("Docker 镜像存储位置："),t("code",[r._v("/var/lib/docker")])]),r._v(" "),t("p",[r._v("使用 "),t("code",[r._v("docker info")]),r._v(" 可以查看关于 Docker 的一些信息。")])],1)},[],!1,null,null,null);e.default=o.exports}}]);